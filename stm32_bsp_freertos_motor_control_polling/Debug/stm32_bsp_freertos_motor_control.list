
stm32_bsp_freertos_motor_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ba8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08003d48  08003d48  00013d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003ec8  08003ec8  00013ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003ed0  08003ed0  00013ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003ed4  08003ed4  00013ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000036c  20000000  08003ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004188  2000036c  08004244  0002036c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200044f4  08004244  000244f4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002036c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f841  00000000  00000000  0002039c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003efd  00000000  00000000  0003fbdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ba70  00000000  00000000  00043ada  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001260  00000000  00000000  0004f550  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001620  00000000  00000000  000507b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008aaf  00000000  00000000  00051dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000070dc  00000000  00000000  0005a87f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0006195b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003728  00000000  00000000  000619d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000036c 	.word	0x2000036c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003d30 	.word	0x08003d30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000370 	.word	0x20000370
 80001dc:	08003d30 	.word	0x08003d30

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b97a 	b.w	80004ec <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	468c      	mov	ip, r1
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	9e08      	ldr	r6, [sp, #32]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d151      	bne.n	80002c4 <__udivmoddi4+0xb4>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d96d      	bls.n	8000302 <__udivmoddi4+0xf2>
 8000226:	fab2 fe82 	clz	lr, r2
 800022a:	f1be 0f00 	cmp.w	lr, #0
 800022e:	d00b      	beq.n	8000248 <__udivmoddi4+0x38>
 8000230:	f1ce 0c20 	rsb	ip, lr, #32
 8000234:	fa01 f50e 	lsl.w	r5, r1, lr
 8000238:	fa20 fc0c 	lsr.w	ip, r0, ip
 800023c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000240:	ea4c 0c05 	orr.w	ip, ip, r5
 8000244:	fa00 f40e 	lsl.w	r4, r0, lr
 8000248:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800024c:	0c25      	lsrs	r5, r4, #16
 800024e:	fbbc f8fa 	udiv	r8, ip, sl
 8000252:	fa1f f987 	uxth.w	r9, r7
 8000256:	fb0a cc18 	mls	ip, sl, r8, ip
 800025a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800025e:	fb08 f309 	mul.w	r3, r8, r9
 8000262:	42ab      	cmp	r3, r5
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x6c>
 8000266:	19ed      	adds	r5, r5, r7
 8000268:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800026c:	f080 8123 	bcs.w	80004b6 <__udivmoddi4+0x2a6>
 8000270:	42ab      	cmp	r3, r5
 8000272:	f240 8120 	bls.w	80004b6 <__udivmoddi4+0x2a6>
 8000276:	f1a8 0802 	sub.w	r8, r8, #2
 800027a:	443d      	add	r5, r7
 800027c:	1aed      	subs	r5, r5, r3
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb5 f0fa 	udiv	r0, r5, sl
 8000284:	fb0a 5510 	mls	r5, sl, r0, r5
 8000288:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800028c:	fb00 f909 	mul.w	r9, r0, r9
 8000290:	45a1      	cmp	r9, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x98>
 8000294:	19e4      	adds	r4, r4, r7
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 810a 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 800029e:	45a1      	cmp	r9, r4
 80002a0:	f240 8107 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	eba4 0409 	sub.w	r4, r4, r9
 80002ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002b0:	2100      	movs	r1, #0
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	d061      	beq.n	800037a <__udivmoddi4+0x16a>
 80002b6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ba:	2300      	movs	r3, #0
 80002bc:	6034      	str	r4, [r6, #0]
 80002be:	6073      	str	r3, [r6, #4]
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d907      	bls.n	80002d8 <__udivmoddi4+0xc8>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	d054      	beq.n	8000376 <__udivmoddi4+0x166>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e886 0021 	stmia.w	r6, {r0, r5}
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	f040 808e 	bne.w	80003fe <__udivmoddi4+0x1ee>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xdc>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2d0>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0503 	sbc.w	r5, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	46ac      	mov	ip, r5
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d03f      	beq.n	800037a <__udivmoddi4+0x16a>
 80002fa:	e886 1010 	stmia.w	r6, {r4, ip}
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	b912      	cbnz	r2, 800030a <__udivmoddi4+0xfa>
 8000304:	2701      	movs	r7, #1
 8000306:	fbb7 f7f2 	udiv	r7, r7, r2
 800030a:	fab7 fe87 	clz	lr, r7
 800030e:	f1be 0f00 	cmp.w	lr, #0
 8000312:	d134      	bne.n	800037e <__udivmoddi4+0x16e>
 8000314:	1beb      	subs	r3, r5, r7
 8000316:	0c3a      	lsrs	r2, r7, #16
 8000318:	fa1f fc87 	uxth.w	ip, r7
 800031c:	2101      	movs	r1, #1
 800031e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000322:	0c25      	lsrs	r5, r4, #16
 8000324:	fb02 3318 	mls	r3, r2, r8, r3
 8000328:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800032c:	fb0c f308 	mul.w	r3, ip, r8
 8000330:	42ab      	cmp	r3, r5
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x134>
 8000334:	19ed      	adds	r5, r5, r7
 8000336:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x132>
 800033c:	42ab      	cmp	r3, r5
 800033e:	f200 80d1 	bhi.w	80004e4 <__udivmoddi4+0x2d4>
 8000342:	4680      	mov	r8, r0
 8000344:	1aed      	subs	r5, r5, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb5 f0f2 	udiv	r0, r5, r2
 800034c:	fb02 5510 	mls	r5, r2, r0, r5
 8000350:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000354:	fb0c fc00 	mul.w	ip, ip, r0
 8000358:	45a4      	cmp	ip, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x15c>
 800035c:	19e4      	adds	r4, r4, r7
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x15a>
 8000364:	45a4      	cmp	ip, r4
 8000366:	f200 80b8 	bhi.w	80004da <__udivmoddi4+0x2ca>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 040c 	sub.w	r4, r4, ip
 8000370:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000374:	e79d      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000376:	4631      	mov	r1, r6
 8000378:	4630      	mov	r0, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	f1ce 0420 	rsb	r4, lr, #32
 8000382:	fa05 f30e 	lsl.w	r3, r5, lr
 8000386:	fa07 f70e 	lsl.w	r7, r7, lr
 800038a:	fa20 f804 	lsr.w	r8, r0, r4
 800038e:	0c3a      	lsrs	r2, r7, #16
 8000390:	fa25 f404 	lsr.w	r4, r5, r4
 8000394:	ea48 0803 	orr.w	r8, r8, r3
 8000398:	fbb4 f1f2 	udiv	r1, r4, r2
 800039c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003a0:	fb02 4411 	mls	r4, r2, r1, r4
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003ac:	fb01 f30c 	mul.w	r3, r1, ip
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1bc>
 80003b8:	19ed      	adds	r5, r5, r7
 80003ba:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003be:	f080 808a 	bcs.w	80004d6 <__udivmoddi4+0x2c6>
 80003c2:	42ab      	cmp	r3, r5
 80003c4:	f240 8087 	bls.w	80004d6 <__udivmoddi4+0x2c6>
 80003c8:	3902      	subs	r1, #2
 80003ca:	443d      	add	r5, r7
 80003cc:	1aeb      	subs	r3, r5, r3
 80003ce:	fa1f f588 	uxth.w	r5, r8
 80003d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003d6:	fb02 3310 	mls	r3, r2, r0, r3
 80003da:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003de:	fb00 f30c 	mul.w	r3, r0, ip
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x1e6>
 80003e6:	19ed      	adds	r5, r5, r7
 80003e8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003ec:	d26f      	bcs.n	80004ce <__udivmoddi4+0x2be>
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d96d      	bls.n	80004ce <__udivmoddi4+0x2be>
 80003f2:	3802      	subs	r0, #2
 80003f4:	443d      	add	r5, r7
 80003f6:	1aeb      	subs	r3, r5, r3
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	e78f      	b.n	800031e <__udivmoddi4+0x10e>
 80003fe:	f1c1 0720 	rsb	r7, r1, #32
 8000402:	fa22 f807 	lsr.w	r8, r2, r7
 8000406:	408b      	lsls	r3, r1
 8000408:	fa05 f401 	lsl.w	r4, r5, r1
 800040c:	ea48 0303 	orr.w	r3, r8, r3
 8000410:	fa20 fe07 	lsr.w	lr, r0, r7
 8000414:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000418:	40fd      	lsrs	r5, r7
 800041a:	ea4e 0e04 	orr.w	lr, lr, r4
 800041e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000422:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000426:	fb0c 5519 	mls	r5, ip, r9, r5
 800042a:	fa1f f883 	uxth.w	r8, r3
 800042e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000432:	fb09 f408 	mul.w	r4, r9, r8
 8000436:	42ac      	cmp	r4, r5
 8000438:	fa02 f201 	lsl.w	r2, r2, r1
 800043c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x244>
 8000442:	18ed      	adds	r5, r5, r3
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000448:	d243      	bcs.n	80004d2 <__udivmoddi4+0x2c2>
 800044a:	42ac      	cmp	r4, r5
 800044c:	d941      	bls.n	80004d2 <__udivmoddi4+0x2c2>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	441d      	add	r5, r3
 8000454:	1b2d      	subs	r5, r5, r4
 8000456:	fa1f fe8e 	uxth.w	lr, lr
 800045a:	fbb5 f0fc 	udiv	r0, r5, ip
 800045e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000462:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45a0      	cmp	r8, r4
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x26e>
 800046e:	18e4      	adds	r4, r4, r3
 8000470:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000474:	d229      	bcs.n	80004ca <__udivmoddi4+0x2ba>
 8000476:	45a0      	cmp	r8, r4
 8000478:	d927      	bls.n	80004ca <__udivmoddi4+0x2ba>
 800047a:	3802      	subs	r0, #2
 800047c:	441c      	add	r4, r3
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba4 0408 	sub.w	r4, r4, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454c      	cmp	r4, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	464d      	mov	r5, r9
 8000490:	d315      	bcc.n	80004be <__udivmoddi4+0x2ae>
 8000492:	d012      	beq.n	80004ba <__udivmoddi4+0x2aa>
 8000494:	b156      	cbz	r6, 80004ac <__udivmoddi4+0x29c>
 8000496:	ebba 030e 	subs.w	r3, sl, lr
 800049a:	eb64 0405 	sbc.w	r4, r4, r5
 800049e:	fa04 f707 	lsl.w	r7, r4, r7
 80004a2:	40cb      	lsrs	r3, r1
 80004a4:	431f      	orrs	r7, r3
 80004a6:	40cc      	lsrs	r4, r1
 80004a8:	6037      	str	r7, [r6, #0]
 80004aa:	6074      	str	r4, [r6, #4]
 80004ac:	2100      	movs	r1, #0
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	4618      	mov	r0, r3
 80004b4:	e6f8      	b.n	80002a8 <__udivmoddi4+0x98>
 80004b6:	4690      	mov	r8, r2
 80004b8:	e6e0      	b.n	800027c <__udivmoddi4+0x6c>
 80004ba:	45c2      	cmp	sl, r8
 80004bc:	d2ea      	bcs.n	8000494 <__udivmoddi4+0x284>
 80004be:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c2:	eb69 0503 	sbc.w	r5, r9, r3
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7e4      	b.n	8000494 <__udivmoddi4+0x284>
 80004ca:	4628      	mov	r0, r5
 80004cc:	e7d7      	b.n	800047e <__udivmoddi4+0x26e>
 80004ce:	4640      	mov	r0, r8
 80004d0:	e791      	b.n	80003f6 <__udivmoddi4+0x1e6>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e7be      	b.n	8000454 <__udivmoddi4+0x244>
 80004d6:	4601      	mov	r1, r0
 80004d8:	e778      	b.n	80003cc <__udivmoddi4+0x1bc>
 80004da:	3802      	subs	r0, #2
 80004dc:	443c      	add	r4, r7
 80004de:	e745      	b.n	800036c <__udivmoddi4+0x15c>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xe6>
 80004e4:	f1a8 0802 	sub.w	r8, r8, #2
 80004e8:	443d      	add	r5, r7
 80004ea:	e72b      	b.n	8000344 <__udivmoddi4+0x134>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <L6206_AttachErrorHandler>:
 * to the error Hanlder
 * @retval None
 **********************************************************/
void L6206_AttachErrorHandler(void (*callback)(uint16_t))
{
  errorHandlerCallback = (void (*)(uint16_t))callback;
 80004f0:	4b01      	ldr	r3, [pc, #4]	; (80004f8 <L6206_AttachErrorHandler+0x8>)
 80004f2:	6018      	str	r0, [r3, #0]
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	20004364 	.word	0x20004364

080004fc <L6206_AttachFlagInterrupt>:
 * to the Flag Interrupt
 * @retval None
 **********************************************************/
void L6206_AttachFlagInterrupt(void (*callback)(void))
{
  flagInterruptCallback = (void (*)())callback;
 80004fc:	4b01      	ldr	r3, [pc, #4]	; (8000504 <L6206_AttachFlagInterrupt+0x8>)
 80004fe:	6018      	str	r0, [r3, #0]
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	20004368 	.word	0x20004368

08000508 <L6206_GetBridgeInputPwmFreq>:
 * @param[in] bridgeId 0 for bridge A, 1 for bridge B
 * @retval Freq in Hz
 **********************************************************/
uint32_t L6206_GetBridgeInputPwmFreq(uint8_t bridgeId)
{                                                  
  return (devicePrm.pwmFreq[(bridgeId << 1)]);
 8000508:	4b02      	ldr	r3, [pc, #8]	; (8000514 <L6206_GetBridgeInputPwmFreq+0xc>)
 800050a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
}
 800050e:	6840      	ldr	r0, [r0, #4]
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	2000433c 	.word	0x2000433c

08000518 <L6206_GetFwVersion>:
 * @retval L6206_FW_VERSION
 **********************************************************/
uint32_t L6206_GetFwVersion(void)
{
  return (L6206_FW_VERSION);
}
 8000518:	2000      	movs	r0, #0
 800051a:	4770      	bx	lr

0800051c <L6206_ReadId>:
 * @retval Id of the l6206 Driver Instance
 **********************************************************/
uint16_t L6206_ReadId(void)
{
  return(l6206DriverInstance);
}
 800051c:	4b01      	ldr	r3, [pc, #4]	; (8000524 <L6206_ReadId+0x8>)
 800051e:	8818      	ldrh	r0, [r3, #0]
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	20000388 	.word	0x20000388

08000528 <L6206_SetNbDevices>:
  }
  else
  {
    return FALSE;
  }
}
 8000528:	2801      	cmp	r0, #1
 800052a:	bf8c      	ite	hi
 800052c:	2000      	movhi	r0, #0
 800052e:	2001      	movls	r0, #1
 8000530:	4770      	bx	lr
	...

08000534 <L6206_ErrorHandler>:
 * @param[in] error Number of the error
 * @retval None
 **********************************************************/
void L6206_ErrorHandler(uint16_t error)
{
  if (errorHandlerCallback != 0)
 8000534:	4b02      	ldr	r3, [pc, #8]	; (8000540 <L6206_ErrorHandler+0xc>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	b103      	cbz	r3, 800053c <L6206_ErrorHandler+0x8>
  {
    (void) errorHandlerCallback(error);
 800053a:	4718      	bx	r3
 800053c:	e7fe      	b.n	800053c <L6206_ErrorHandler+0x8>
 800053e:	bf00      	nop
 8000540:	20004364 	.word	0x20004364

08000544 <L6206_GetCurrentSpeed>:
{                                                  
 8000544:	b508      	push	{r3, lr}
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <L6206_GetCurrentSpeed+0x2c>)
 8000548:	490a      	ldr	r1, [pc, #40]	; (8000574 <L6206_GetCurrentSpeed+0x30>)
 800054a:	781a      	ldrb	r2, [r3, #0]
 800054c:	5c8a      	ldrb	r2, [r1, r2]
 800054e:	4282      	cmp	r2, r0
 8000550:	d205      	bcs.n	800055e <L6206_GetCurrentSpeed+0x1a>
    L6206_ErrorHandler(L6206_ERROR_1);
 8000552:	f248 0001 	movw	r0, #32769	; 0x8001
 8000556:	f7ff ffed 	bl	8000534 <L6206_ErrorHandler>
  uint16_t speed = 0;
 800055a:	2000      	movs	r0, #0
}
 800055c:	bd08      	pop	{r3, pc}
  else if (devicePrm.motionState[motorId] != INACTIVE)
 800055e:	181a      	adds	r2, r3, r0
 8000560:	f892 2020 	ldrb.w	r2, [r2, #32]
 8000564:	2a08      	cmp	r2, #8
 8000566:	d0f8      	beq.n	800055a <L6206_GetCurrentSpeed+0x16>
    speed = devicePrm.speed[motorId];
 8000568:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800056c:	8a98      	ldrh	r0, [r3, #20]
 800056e:	bd08      	pop	{r3, pc}
 8000570:	2000433c 	.word	0x2000433c
 8000574:	08003d64 	.word	0x08003d64

08000578 <L6206_GetDeviceState>:
{
 8000578:	b508      	push	{r3, lr}
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 800057a:	4b08      	ldr	r3, [pc, #32]	; (800059c <L6206_GetDeviceState+0x24>)
 800057c:	4908      	ldr	r1, [pc, #32]	; (80005a0 <L6206_GetDeviceState+0x28>)
 800057e:	781a      	ldrb	r2, [r3, #0]
 8000580:	5c8a      	ldrb	r2, [r1, r2]
 8000582:	4282      	cmp	r2, r0
 8000584:	d205      	bcs.n	8000592 <L6206_GetDeviceState+0x1a>
    L6206_ErrorHandler(L6206_ERROR_1);
 8000586:	f248 0001 	movw	r0, #32769	; 0x8001
 800058a:	f7ff ffd3 	bl	8000534 <L6206_ErrorHandler>
  motorState_t state =  INACTIVE;
 800058e:	2008      	movs	r0, #8
 8000590:	bd08      	pop	{r3, pc}
    state =  devicePrm.motionState[motorId];
 8000592:	4403      	add	r3, r0
 8000594:	f893 0020 	ldrb.w	r0, [r3, #32]
}
 8000598:	bd08      	pop	{r3, pc}
 800059a:	bf00      	nop
 800059c:	2000433c 	.word	0x2000433c
 80005a0:	08003d64 	.word	0x08003d64

080005a4 <L6206_GetMaxSpeed>:
{                                                  
 80005a4:	b508      	push	{r3, lr}
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <L6206_GetMaxSpeed+0x24>)
 80005a8:	4908      	ldr	r1, [pc, #32]	; (80005cc <L6206_GetMaxSpeed+0x28>)
 80005aa:	781a      	ldrb	r2, [r3, #0]
 80005ac:	5c8a      	ldrb	r2, [r1, r2]
 80005ae:	4282      	cmp	r2, r0
 80005b0:	d205      	bcs.n	80005be <L6206_GetMaxSpeed+0x1a>
    L6206_ErrorHandler(L6206_ERROR_1);
 80005b2:	f248 0001 	movw	r0, #32769	; 0x8001
 80005b6:	f7ff ffbd 	bl	8000534 <L6206_ErrorHandler>
  uint16_t speed = 0;
 80005ba:	2000      	movs	r0, #0
 80005bc:	bd08      	pop	{r3, pc}
    speed =  devicePrm.speed[motorId];
 80005be:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80005c2:	8a98      	ldrh	r0, [r3, #20]
}
 80005c4:	bd08      	pop	{r3, pc}
 80005c6:	bf00      	nop
 80005c8:	2000433c 	.word	0x2000433c
 80005cc:	08003d64 	.word	0x08003d64

080005d0 <L6206_GetBridgeStatus>:
{
 80005d0:	b508      	push	{r3, lr}
  uint16_t status = L6206_Board_GetFlagPinState(bridgeId);
 80005d2:	f000 fbab 	bl	8000d2c <L6206_Board_GetFlagPinState>
}
 80005d6:	b280      	uxth	r0, r0
 80005d8:	bd08      	pop	{r3, pc}
	...

080005dc <L6206_FlagInterruptHandler>:
/******************************************************//**
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void L6206_FlagInterruptHandler(void)
{
 80005dc:	b510      	push	{r4, lr}
  uint16_t status = L6206_Board_GetFlagPinState(bridgeId);
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 fba4 	bl	8000d2c <L6206_Board_GetFlagPinState>
  bool status;
  
  status = L6206_GetBridgeStatus(BRIDGE_A);
  if (status != devicePrm.bridgeEnabled[BRIDGE_A])
 80005e4:	4c0c      	ldr	r4, [pc, #48]	; (8000618 <L6206_FlagInterruptHandler+0x3c>)
 80005e6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  status = L6206_GetBridgeStatus(BRIDGE_A);
 80005ea:	b2c0      	uxtb	r0, r0
  if (status != devicePrm.bridgeEnabled[BRIDGE_A])
 80005ec:	4283      	cmp	r3, r0
  {
    devicePrm.bridgeEnabled[BRIDGE_A] = status;
 80005ee:	bf18      	it	ne
 80005f0:	f884 0024 	strbne.w	r0, [r4, #36]	; 0x24
  uint16_t status = L6206_Board_GetFlagPinState(bridgeId);
 80005f4:	2001      	movs	r0, #1
 80005f6:	f000 fb99 	bl	8000d2c <L6206_Board_GetFlagPinState>
  }
  
  status = L6206_GetBridgeStatus(BRIDGE_B);
  if (status != devicePrm.bridgeEnabled[BRIDGE_B])
 80005fa:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
  status = L6206_GetBridgeStatus(BRIDGE_B);
 80005fe:	b2c0      	uxtb	r0, r0
  if (status != devicePrm.bridgeEnabled[BRIDGE_B])
 8000600:	4283      	cmp	r3, r0
  {
    devicePrm.bridgeEnabled[BRIDGE_B] = status;
  }  
  
  if (flagInterruptCallback != 0)
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <L6206_FlagInterruptHandler+0x40>)
    devicePrm.bridgeEnabled[BRIDGE_B] = status;
 8000604:	bf18      	it	ne
 8000606:	f884 0025 	strbne.w	r0, [r4, #37]	; 0x25
  if (flagInterruptCallback != 0)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	b113      	cbz	r3, 8000614 <L6206_FlagInterruptHandler+0x38>
  {
    flagInterruptCallback();
  }
}
 800060e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flagInterruptCallback();
 8000612:	4718      	bx	r3
 8000614:	bd10      	pop	{r4, pc}
 8000616:	bf00      	nop
 8000618:	2000433c 	.word	0x2000433c
 800061c:	20004368 	.word	0x20004368

08000620 <L6206_SetDualFullBridgeConfig>:
{
 8000620:	b510      	push	{r4, lr}
  devicePrm.config = (dualFullBridgeConfig_t)newConfig;
 8000622:	4c2b      	ldr	r4, [pc, #172]	; (80006d0 <L6206_SetDualFullBridgeConfig+0xb0>)
 8000624:	7020      	strb	r0, [r4, #0]
  L6206_Board_PwmDeInit(INPUT_1A);
 8000626:	2000      	movs	r0, #0
 8000628:	f000 fbec 	bl	8000e04 <L6206_Board_PwmDeInit>
  L6206_Board_PwmDeInit(INPUT_2A);
 800062c:	2001      	movs	r0, #1
 800062e:	f000 fbe9 	bl	8000e04 <L6206_Board_PwmDeInit>
  L6206_Board_PwmDeInit(INPUT_1B);
 8000632:	2002      	movs	r0, #2
 8000634:	f000 fbe6 	bl	8000e04 <L6206_Board_PwmDeInit>
  L6206_Board_PwmDeInit(INPUT_2B);
 8000638:	2003      	movs	r0, #3
 800063a:	f000 fbe3 	bl	8000e04 <L6206_Board_PwmDeInit>
  switch (devicePrm.config)
 800063e:	7823      	ldrb	r3, [r4, #0]
 8000640:	2b0c      	cmp	r3, #12
 8000642:	d844      	bhi.n	80006ce <L6206_SetDualFullBridgeConfig+0xae>
 8000644:	e8df f003 	tbb	[pc, r3]
 8000648:	07070707 	.word	0x07070707
 800064c:	1a1a1515 	.word	0x1a1a1515
 8000650:	2d2d2525 	.word	0x2d2d2525
 8000654:	38          	.byte	0x38
 8000655:	00          	.byte	0x00
        L6206_Board_PwmInit(INPUT_1A);
 8000656:	2000      	movs	r0, #0
 8000658:	f000 fbf8 	bl	8000e4c <L6206_Board_PwmInit>
        L6206_Board_PwmInit(INPUT_2A);
 800065c:	2001      	movs	r0, #1
        L6206_Board_PwmInit(INPUT_1A);
 800065e:	f000 fbf5 	bl	8000e4c <L6206_Board_PwmInit>
        L6206_Board_PwmInit(INPUT_1B);
 8000662:	2002      	movs	r0, #2
 8000664:	f000 fbf2 	bl	8000e4c <L6206_Board_PwmInit>
        L6206_Board_PwmInit(INPUT_2B);
 8000668:	2003      	movs	r0, #3
}
 800066a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        L6206_Board_PwmInit(INPUT_1A);
 800066e:	f000 bbed 	b.w	8000e4c <L6206_Board_PwmInit>
        L6206_Board_PwmDeInit(INPUT_2A);
 8000672:	2001      	movs	r0, #1
 8000674:	f000 fbc6 	bl	8000e04 <L6206_Board_PwmDeInit>
        L6206_Board_PwmInit(INPUT_1A);
 8000678:	2000      	movs	r0, #0
 800067a:	e7f0      	b.n	800065e <L6206_SetDualFullBridgeConfig+0x3e>
        L6206_Board_PwmDeInit(INPUT_2B);
 800067c:	2003      	movs	r0, #3
 800067e:	f000 fbc1 	bl	8000e04 <L6206_Board_PwmDeInit>
        L6206_Board_PwmInit(INPUT_1A);
 8000682:	2000      	movs	r0, #0
 8000684:	f000 fbe2 	bl	8000e4c <L6206_Board_PwmInit>
        L6206_Board_PwmInit(INPUT_2A);
 8000688:	2001      	movs	r0, #1
        L6206_Board_PwmInit(INPUT_1A);
 800068a:	f000 fbdf 	bl	8000e4c <L6206_Board_PwmInit>
        L6206_Board_PwmInit(INPUT_1B);
 800068e:	2002      	movs	r0, #2
 8000690:	e7eb      	b.n	800066a <L6206_SetDualFullBridgeConfig+0x4a>
        L6206_Board_PwmDeInit(INPUT_2A);
 8000692:	2001      	movs	r0, #1
 8000694:	f000 fbb6 	bl	8000e04 <L6206_Board_PwmDeInit>
        L6206_Board_PwmDeInit(INPUT_2B);
 8000698:	2003      	movs	r0, #3
 800069a:	f000 fbb3 	bl	8000e04 <L6206_Board_PwmDeInit>
        L6206_Board_PwmInit(INPUT_1A);
 800069e:	2000      	movs	r0, #0
 80006a0:	e7f3      	b.n	800068a <L6206_SetDualFullBridgeConfig+0x6a>
        L6206_Board_PwmDeInit(INPUT_1B);
 80006a2:	2002      	movs	r0, #2
 80006a4:	f000 fbae 	bl	8000e04 <L6206_Board_PwmDeInit>
        L6206_Board_PwmDeInit(INPUT_2B);
 80006a8:	2003      	movs	r0, #3
 80006aa:	f000 fbab 	bl	8000e04 <L6206_Board_PwmDeInit>
        L6206_Board_PwmInit(INPUT_1A);
 80006ae:	2000      	movs	r0, #0
 80006b0:	f000 fbcc 	bl	8000e4c <L6206_Board_PwmInit>
        L6206_Board_PwmInit(INPUT_2A);
 80006b4:	2001      	movs	r0, #1
 80006b6:	e7d8      	b.n	800066a <L6206_SetDualFullBridgeConfig+0x4a>
        L6206_Board_PwmDeInit(INPUT_2A);
 80006b8:	2001      	movs	r0, #1
 80006ba:	f000 fba3 	bl	8000e04 <L6206_Board_PwmDeInit>
        L6206_Board_PwmDeInit(INPUT_1B);
 80006be:	2002      	movs	r0, #2
 80006c0:	f000 fba0 	bl	8000e04 <L6206_Board_PwmDeInit>
        L6206_Board_PwmDeInit(INPUT_2B);
 80006c4:	2003      	movs	r0, #3
 80006c6:	f000 fb9d 	bl	8000e04 <L6206_Board_PwmDeInit>
        L6206_Board_PwmInit(INPUT_1A);
 80006ca:	2000      	movs	r0, #0
 80006cc:	e7cd      	b.n	800066a <L6206_SetDualFullBridgeConfig+0x4a>
 80006ce:	bd10      	pop	{r4, pc}
 80006d0:	2000433c 	.word	0x2000433c

080006d4 <L6206_DisableBridge>:
{
 80006d4:	b570      	push	{r4, r5, r6, lr}
  devicePrm.bridgeEnabled[bridgeId] = FALSE;
 80006d6:	4c0c      	ldr	r4, [pc, #48]	; (8000708 <L6206_DisableBridge+0x34>)
{
 80006d8:	4606      	mov	r6, r0
  L6206_Board_DisableBridge(bridgeId);
 80006da:	f000 facb 	bl	8000c74 <L6206_Board_DisableBridge>
  devicePrm.bridgeEnabled[bridgeId] = FALSE;
 80006de:	19a3      	adds	r3, r4, r6
 80006e0:	2500      	movs	r5, #0
 80006e2:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
  if (devicePrm.config >= PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR)
 80006e6:	7823      	ldrb	r3, [r4, #0]
 80006e8:	2b08      	cmp	r3, #8
 80006ea:	d90b      	bls.n	8000704 <L6206_DisableBridge+0x30>
    if (bridgeId == BRIDGE_A) 
 80006ec:	b92e      	cbnz	r6, 80006fa <L6206_DisableBridge+0x26>
      L6206_Board_DisableBridge(BRIDGE_B);
 80006ee:	2001      	movs	r0, #1
 80006f0:	f000 fac0 	bl	8000c74 <L6206_Board_DisableBridge>
      devicePrm.bridgeEnabled[BRIDGE_B] = FALSE;
 80006f4:	f884 6025 	strb.w	r6, [r4, #37]	; 0x25
 80006f8:	bd70      	pop	{r4, r5, r6, pc}
      L6206_Board_DisableBridge(BRIDGE_A);
 80006fa:	4628      	mov	r0, r5
 80006fc:	f000 faba 	bl	8000c74 <L6206_Board_DisableBridge>
      devicePrm.bridgeEnabled[BRIDGE_A] = FALSE;
 8000700:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	bf00      	nop
 8000708:	2000433c 	.word	0x2000433c

0800070c <L6206_EnableBridge>:
{
 800070c:	b570      	push	{r4, r5, r6, lr}
  devicePrm.bridgeEnabled[bridgeId] = TRUE;
 800070e:	4d0f      	ldr	r5, [pc, #60]	; (800074c <L6206_EnableBridge+0x40>)
 8000710:	182b      	adds	r3, r5, r0
 8000712:	2401      	movs	r4, #1
 8000714:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
  if (devicePrm.config >= PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR)
 8000718:	782b      	ldrb	r3, [r5, #0]
 800071a:	2b08      	cmp	r3, #8
{
 800071c:	4606      	mov	r6, r0
  if (devicePrm.config >= PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR)
 800071e:	d910      	bls.n	8000742 <L6206_EnableBridge+0x36>
    L6206_Board_EnableBridge(bridgeId, 0);
 8000720:	2100      	movs	r1, #0
 8000722:	f000 facf 	bl	8000cc4 <L6206_Board_EnableBridge>
      L6206_Board_EnableBridge(BRIDGE_B, 1);
 8000726:	4621      	mov	r1, r4
    if (bridgeId == BRIDGE_A) 
 8000728:	b92e      	cbnz	r6, 8000736 <L6206_EnableBridge+0x2a>
      L6206_Board_EnableBridge(BRIDGE_B, 1);
 800072a:	4620      	mov	r0, r4
 800072c:	f000 faca 	bl	8000cc4 <L6206_Board_EnableBridge>
      devicePrm.bridgeEnabled[BRIDGE_B] = TRUE;
 8000730:	f885 4025 	strb.w	r4, [r5, #37]	; 0x25
 8000734:	bd70      	pop	{r4, r5, r6, pc}
      L6206_Board_EnableBridge(BRIDGE_A, 1);
 8000736:	2000      	movs	r0, #0
 8000738:	f000 fac4 	bl	8000cc4 <L6206_Board_EnableBridge>
      devicePrm.bridgeEnabled[BRIDGE_A] = TRUE;
 800073c:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
 8000740:	bd70      	pop	{r4, r5, r6, pc}
    L6206_Board_EnableBridge(bridgeId, 1);
 8000742:	4621      	mov	r1, r4
}
 8000744:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    L6206_Board_EnableBridge(bridgeId, 1);
 8000748:	f000 babc 	b.w	8000cc4 <L6206_Board_EnableBridge>
 800074c:	2000433c 	.word	0x2000433c

08000750 <L6206_GetMotorHandle>:
}
 8000750:	4800      	ldr	r0, [pc, #0]	; (8000754 <L6206_GetMotorHandle+0x4>)
 8000752:	4770      	bx	lr
 8000754:	20000000 	.word	0x20000000

08000758 <L6206_GetBridgeIdUsedByMotorId>:
 * @retval bridgeId 0 for bridge A , 1 for bridge B
 **********************************************************/
uint8_t L6206_GetBridgeIdUsedByMotorId(uint8_t motorId)
{
  uint8_t bridgeId;
  switch (devicePrm.config)
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <L6206_GetBridgeIdUsedByMotorId+0x30>)
 800075a:	781a      	ldrb	r2, [r3, #0]
 800075c:	2a08      	cmp	r2, #8
 800075e:	d808      	bhi.n	8000772 <L6206_GetBridgeIdUsedByMotorId+0x1a>
 8000760:	2301      	movs	r3, #1
 8000762:	4093      	lsls	r3, r2
 8000764:	f240 1273 	movw	r2, #371	; 0x173
 8000768:	4213      	tst	r3, r2
 800076a:	d104      	bne.n	8000776 <L6206_GetBridgeIdUsedByMotorId+0x1e>
 800076c:	f013 038c 	ands.w	r3, r3, #140	; 0x8c
 8000770:	d105      	bne.n	800077e <L6206_GetBridgeIdUsedByMotorId+0x26>
    case PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR:
    case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_UNDIR_MOTOR_BRIDGE_1A__1_UNDIR_MOTOR_BRIDGE_2A:
    case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
    case PARALLELING_ALL_WITH_IN1A___1_UNDIR_MOTOR:
    default:
        bridgeId = 0;
 8000772:	2000      	movs	r0, #0
      break;        
  }  
  return (bridgeId);
}
 8000774:	4770      	bx	lr
        bridgeId = 1;
 8000776:	3000      	adds	r0, #0
 8000778:	bf18      	it	ne
 800077a:	2001      	movne	r0, #1
 800077c:	4770      	bx	lr
 800077e:	2801      	cmp	r0, #1
 8000780:	bf94      	ite	ls
 8000782:	2000      	movls	r0, #0
 8000784:	2001      	movhi	r0, #1
 8000786:	4770      	bx	lr
 8000788:	2000433c 	.word	0x2000433c

0800078c <L6206_GetMotorIdUsingbridgeInput>:
 **********************************************************/
uint8_t L6206_GetMotorIdUsingbridgeInput(uint8_t bridgeInput)
{
  uint8_t motorId;
  
  switch (devicePrm.config)
 800078c:	4b13      	ldr	r3, [pc, #76]	; (80007dc <L6206_GetMotorIdUsingbridgeInput+0x50>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b0a      	cmp	r3, #10
 8000792:	d81f      	bhi.n	80007d4 <L6206_GetMotorIdUsingbridgeInput+0x48>
 8000794:	e8df f003 	tbb	[pc, r3]
 8000798:	16120b06 	.word	0x16120b06
 800079c:	12060b06 	.word	0x12060b06
 80007a0:	1e06      	.short	0x1e06
 80007a2:	1b          	.byte	0x1b
 80007a3:	00          	.byte	0x00
      {
        motorId = 1;
      }
      else
      {
        motorId = 0;
 80007a4:	2801      	cmp	r0, #1
 80007a6:	bf94      	ite	ls
 80007a8:	2000      	movls	r0, #0
 80007aa:	2001      	movhi	r0, #1
 80007ac:	4770      	bx	lr
      }
      break;  
    case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
    case   PARALLELING_IN1A_IN2A__1_UNDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:      
      if (bridgeInput == INPUT_2B) 
 80007ae:	2803      	cmp	r0, #3
 80007b0:	d012      	beq.n	80007d8 <L6206_GetMotorIdUsingbridgeInput+0x4c>
        motorId = 0;
 80007b2:	2802      	cmp	r0, #2
      }      
      break;           
    case PARALLELING_NONE___2_UNDIR_MOTOR_BRIDGE_A__2_UNDIR_MOTOR_BRIDGE_B:
      if (bridgeInput == INPUT_2B) 
      {
        motorId = 3;
 80007b4:	bf14      	ite	ne
 80007b6:	2000      	movne	r0, #0
 80007b8:	2001      	moveq	r0, #1
 80007ba:	4770      	bx	lr
      if (bridgeInput >= INPUT_1B) 
 80007bc:	2801      	cmp	r0, #1
 80007be:	d80b      	bhi.n	80007d8 <L6206_GetMotorIdUsingbridgeInput+0x4c>
        motorId = 3;
 80007c0:	2801      	cmp	r0, #1
 80007c2:	e7f7      	b.n	80007b4 <L6206_GetMotorIdUsingbridgeInput+0x28>
      if (bridgeInput == INPUT_2B) 
 80007c4:	2803      	cmp	r0, #3
 80007c6:	d008      	beq.n	80007da <L6206_GetMotorIdUsingbridgeInput+0x4e>
      }
      else if (bridgeInput == INPUT_1B) 
 80007c8:	2802      	cmp	r0, #2
 80007ca:	d1f9      	bne.n	80007c0 <L6206_GetMotorIdUsingbridgeInput+0x34>
 80007cc:	4770      	bx	lr
      {
        motorId = 0;
      }      
      break;           
    case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_UNDIR_MOTOR_BRIDGE_1A__1_UNDIR_MOTOR_BRIDGE_2A:
      if ((bridgeInput == INPUT_2A) || (bridgeInput == INPUT_2B))
 80007ce:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 80007d2:	e7f5      	b.n	80007c0 <L6206_GetMotorIdUsingbridgeInput+0x34>
      break;
    case   PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR:
    case   PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
    case   PARALLELING_ALL_WITH_IN1A___1_UNDIR_MOTOR:
    default:
      motorId = 0;  
 80007d4:	2000      	movs	r0, #0
 80007d6:	4770      	bx	lr
        motorId = 2;
 80007d8:	2002      	movs	r0, #2
      break;        
  }
  
  return (motorId);
}
 80007da:	4770      	bx	lr
 80007dc:	2000433c 	.word	0x2000433c

080007e0 <L6206_GetBridgeInputUsedByMotorId>:
 * @retval PWM input 0 for 1A, 1 for 2A, 2 for 1B, 3 for 3B
 **********************************************************/
uint8_t L6206_GetBridgeInputUsedByMotorId(uint8_t motorId)
{
  uint8_t bridgeInput;
  switch (devicePrm.config)
 80007e0:	4b21      	ldr	r3, [pc, #132]	; (8000868 <L6206_GetBridgeInputUsedByMotorId+0x88>)
 80007e2:	781a      	ldrb	r2, [r3, #0]
 80007e4:	2a0b      	cmp	r2, #11
 80007e6:	d83d      	bhi.n	8000864 <L6206_GetBridgeInputUsedByMotorId+0x84>
 80007e8:	e8df f002 	tbb	[pc, r2]
 80007ec:	1a150e06 	.word	0x1a150e06
 80007f0:	2b272421 	.word	0x2b272421
 80007f4:	07383230 	.word	0x07383230
  {
    case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
      if  (motorId == 0)
 80007f8:	b918      	cbnz	r0, 8000802 <L6206_GetBridgeInputUsedByMotorId+0x22>
      {
        bridgeInput = INPUT_2A;
      }      
      break;
    case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
      if (devicePrm.direction[0] == FORWARD)
 80007fa:	7f18      	ldrb	r0, [r3, #28]
           bridgeInput = INPUT_1B;
 80007fc:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 8000800:	e02d      	b.n	800085e <L6206_GetBridgeInputUsedByMotorId+0x7e>
         if (devicePrm.direction[1] == FORWARD)
 8000802:	7f5b      	ldrb	r3, [r3, #29]
        bridgeInput = INPUT_1B;        
 8000804:	2b01      	cmp	r3, #1
 8000806:	e002      	b.n	800080e <L6206_GetBridgeInputUsedByMotorId+0x2e>
      if  (motorId == 0)
 8000808:	2800      	cmp	r0, #0
 800080a:	d0f6      	beq.n	80007fa <L6206_GetBridgeInputUsedByMotorId+0x1a>
        bridgeInput = INPUT_1B;        
 800080c:	2801      	cmp	r0, #1
 800080e:	bf14      	ite	ne
 8000810:	2003      	movne	r0, #3
 8000812:	2002      	moveq	r0, #2
 8000814:	4770      	bx	lr
      if  (motorId == 0)
 8000816:	b330      	cbz	r0, 8000866 <L6206_GetBridgeInputUsedByMotorId+0x86>
      else if (motorId == 1)
 8000818:	2801      	cmp	r0, #1
 800081a:	d024      	beq.n	8000866 <L6206_GetBridgeInputUsedByMotorId+0x86>
         if (devicePrm.direction[2] == FORWARD)
 800081c:	7f9b      	ldrb	r3, [r3, #30]
 800081e:	e7f1      	b.n	8000804 <L6206_GetBridgeInputUsedByMotorId+0x24>
      if  (motorId == 0)
 8000820:	b308      	cbz	r0, 8000866 <L6206_GetBridgeInputUsedByMotorId+0x86>
      else if (motorId == 1)
 8000822:	2801      	cmp	r0, #1
 8000824:	d01f      	beq.n	8000866 <L6206_GetBridgeInputUsedByMotorId+0x86>
           bridgeInput = INPUT_2B;
 8000826:	2802      	cmp	r0, #2
 8000828:	bf18      	it	ne
 800082a:	2003      	movne	r0, #3
 800082c:	4770      	bx	lr
      if  (motorId == 0)
 800082e:	2800      	cmp	r0, #0
 8000830:	d1e7      	bne.n	8000802 <L6206_GetBridgeInputUsedByMotorId+0x22>
 8000832:	4770      	bx	lr
      if  (motorId == 0)
 8000834:	2800      	cmp	r0, #0
 8000836:	d1e9      	bne.n	800080c <L6206_GetBridgeInputUsedByMotorId+0x2c>
 8000838:	4770      	bx	lr
      if  (motorId == 0)
 800083a:	2800      	cmp	r0, #0
 800083c:	d0dd      	beq.n	80007fa <L6206_GetBridgeInputUsedByMotorId+0x1a>
        bridgeInput = INPUT_1B;        
 800083e:	2002      	movs	r0, #2
 8000840:	4770      	bx	lr
      if  (motorId == 0)
 8000842:	b180      	cbz	r0, 8000866 <L6206_GetBridgeInputUsedByMotorId+0x86>
        bridgeInput = INPUT_1B;        
 8000844:	2801      	cmp	r0, #1
 8000846:	bf18      	it	ne
 8000848:	2002      	movne	r0, #2
 800084a:	4770      	bx	lr
 800084c:	2800      	cmp	r0, #0
 800084e:	e7fa      	b.n	8000846 <L6206_GetBridgeInputUsedByMotorId+0x66>
      if (devicePrm.direction[0] == FORWARD)
 8000850:	7f1b      	ldrb	r3, [r3, #28]
        bridgeInput = INPUT_1A;
 8000852:	2b01      	cmp	r3, #1
 8000854:	bf14      	ite	ne
 8000856:	2002      	movne	r0, #2
 8000858:	2000      	moveq	r0, #0
 800085a:	4770      	bx	lr
           bridgeInput = INPUT_1B;
 800085c:	3000      	adds	r0, #0
 800085e:	bf18      	it	ne
 8000860:	2001      	movne	r0, #1
 8000862:	4770      	bx	lr
        bridgeInput = INPUT_2A;
      }  
      break;      
    case PARALLELING_ALL_WITH_IN1A___1_UNDIR_MOTOR:
    default:
      bridgeInput = INPUT_1A;
 8000864:	2000      	movs	r0, #0
      break;       
  }  
  return (bridgeInput);
}
 8000866:	4770      	bx	lr
 8000868:	2000433c 	.word	0x2000433c

0800086c <L6206_GetSecondBridgeInputUsedByMotorId>:
 * @brief  Get the second PWM input used by a given bidirectionnal motor
 * @param motorId from 0 to MAX_NUMBER_OF_BRUSH_DC_MOTORS 
 * @retval PWM input 0 for 1A, 1 for 2A, 2 for 1B, 3 for 3B
 **********************************************************/
uint8_t L6206_GetSecondBridgeInputUsedByMotorId(uint8_t motorId)
{
 800086c:	b508      	push	{r3, lr}
  uint8_t bridgeInput = 0xFF;
  
  switch (devicePrm.config)
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <L6206_GetSecondBridgeInputUsedByMotorId+0x60>)
 8000870:	781a      	ldrb	r2, [r3, #0]
 8000872:	2a0b      	cmp	r2, #11
 8000874:	d81d      	bhi.n	80008b2 <L6206_GetSecondBridgeInputUsedByMotorId+0x46>
 8000876:	e8df f002 	tbb	[pc, r2]
 800087a:	1a06      	.short	0x1a06
 800087c:	1c111c0c 	.word	0x1c111c0c
 8000880:	221c1c1a 	.word	0x221c1c1a
 8000884:	071c      	.short	0x071c
  {
    case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
      if  (motorId == 0)
 8000886:	b958      	cbnz	r0, 80008a0 <L6206_GetSecondBridgeInputUsedByMotorId+0x34>
         bridgeInput = INPUT_1A;
       }
      break;       
    
    case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
      if (devicePrm.direction[0] == FORWARD)
 8000888:	7f18      	ldrb	r0, [r3, #28]
         bridgeInput = INPUT_1B;
 800088a:	1e43      	subs	r3, r0, #1
 800088c:	4258      	negs	r0, r3
 800088e:	4158      	adcs	r0, r3
 8000890:	bd08      	pop	{r3, pc}
      if (motorId == 2)
 8000892:	2802      	cmp	r0, #2
 8000894:	d10d      	bne.n	80008b2 <L6206_GetSecondBridgeInputUsedByMotorId+0x46>
         if (devicePrm.direction[2] == FORWARD)
 8000896:	7f9b      	ldrb	r3, [r3, #30]
           bridgeInput = INPUT_2B;
 8000898:	2b01      	cmp	r3, #1
 800089a:	e005      	b.n	80008a8 <L6206_GetSecondBridgeInputUsedByMotorId+0x3c>
      if  (motorId == 1)
 800089c:	2801      	cmp	r0, #1
 800089e:	d108      	bne.n	80008b2 <L6206_GetSecondBridgeInputUsedByMotorId+0x46>
         if (devicePrm.direction[1] == FORWARD)
 80008a0:	7f5b      	ldrb	r3, [r3, #29]
           bridgeInput = INPUT_2B;
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	bf18      	it	ne
 80008a6:	2002      	movne	r0, #2
 80008a8:	bf08      	it	eq
 80008aa:	2003      	moveq	r0, #3
 80008ac:	bd08      	pop	{r3, pc}
      if  (motorId == 0)
 80008ae:	2800      	cmp	r0, #0
 80008b0:	d0ea      	beq.n	8000888 <L6206_GetSecondBridgeInputUsedByMotorId+0x1c>
      bridgeInput = 0XFF;
      break;       
  }  
  if (bridgeInput == 0XFF)
  {
    L6206_ErrorHandler(L6206_ERROR_2);
 80008b2:	f248 0002 	movw	r0, #32770	; 0x8002
 80008b6:	f7ff fe3d 	bl	8000534 <L6206_ErrorHandler>
 80008ba:	20ff      	movs	r0, #255	; 0xff
  }
  
  return (bridgeInput);
}        
 80008bc:	bd08      	pop	{r3, pc}
      if (devicePrm.direction[0] == FORWARD)
 80008be:	7f1b      	ldrb	r3, [r3, #28]
         bridgeInput = INPUT_1A;
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	bf0c      	ite	eq
 80008c4:	2002      	moveq	r0, #2
 80008c6:	2000      	movne	r0, #0
 80008c8:	bd08      	pop	{r3, pc}
 80008ca:	bf00      	nop
 80008cc:	2000433c 	.word	0x2000433c

080008d0 <L6206_IsBidirectionnalMotor>:
 * @retval True if motor is bidirectionnal, else false
 **********************************************************/
bool L6206_IsBidirectionnalMotor(uint8_t motorId)
{
  bool isBiDir = FALSE;
  switch (devicePrm.config)
 80008d0:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <L6206_IsBidirectionnalMotor+0x38>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b0b      	cmp	r3, #11
 80008d6:	d814      	bhi.n	8000902 <L6206_IsBidirectionnalMotor+0x32>
 80008d8:	e8df f003 	tbb	[pc, r3]
 80008dc:	130c0806 	.word	0x130c0806
 80008e0:	13081311 	.word	0x13081311
 80008e4:	06130613 	.word	0x06130613
  {
      case PARALLELING_NONE___1_BIDIR_MOTOR_BRIDGE_A__1_BIDIR_MOTOR_BRIDGE_B:
      case PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR:
      case PARALLELING_IN1A_IN1B__IN2A_IN2B__1_BIDIR_MOTOR:
        isBiDir = TRUE;
 80008e8:	2001      	movs	r0, #1
 80008ea:	4770      	bx	lr
 80008ec:	fab0 f080 	clz	r0, r0
 80008f0:	0940      	lsrs	r0, r0, #5
 80008f2:	4770      	bx	lr
 80008f4:	2802      	cmp	r0, #2
 80008f6:	bf14      	ite	ne
 80008f8:	2000      	movne	r0, #0
 80008fa:	2001      	moveq	r0, #1
 80008fc:	4770      	bx	lr
 80008fe:	2801      	cmp	r0, #1
 8000900:	e7f9      	b.n	80008f6 <L6206_IsBidirectionnalMotor+0x26>
  bool isBiDir = FALSE;
 8000902:	2000      	movs	r0, #0
    default:
      break;       
  }    
  
  return (isBiDir);
}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	2000433c 	.word	0x2000433c

0800090c <L6206_HardStop>:
{	
 800090c:	b570      	push	{r4, r5, r6, lr}
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 800090e:	4c13      	ldr	r4, [pc, #76]	; (800095c <L6206_HardStop+0x50>)
 8000910:	4a13      	ldr	r2, [pc, #76]	; (8000960 <L6206_HardStop+0x54>)
 8000912:	7823      	ldrb	r3, [r4, #0]
 8000914:	5cd3      	ldrb	r3, [r2, r3]
 8000916:	4283      	cmp	r3, r0
{	
 8000918:	4605      	mov	r5, r0
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 800091a:	d205      	bcs.n	8000928 <L6206_HardStop+0x1c>
    L6206_ErrorHandler(L6206_ERROR_1);
 800091c:	f248 0001 	movw	r0, #32769	; 0x8001
}
 8000920:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    L6206_ErrorHandler(L6206_ERROR_1);
 8000924:	f7ff be06 	b.w	8000534 <L6206_ErrorHandler>
  else if (devicePrm.motionState[motorId] != INACTIVE)
 8000928:	1823      	adds	r3, r4, r0
 800092a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800092e:	2b08      	cmp	r3, #8
 8000930:	d012      	beq.n	8000958 <L6206_HardStop+0x4c>
    bridgeInputFirstPWM = L6206_GetBridgeInputUsedByMotorId(motorId);
 8000932:	f7ff ff55 	bl	80007e0 <L6206_GetBridgeInputUsedByMotorId>
 8000936:	4606      	mov	r6, r0
    if (L6206_IsBidirectionnalMotor(motorId))
 8000938:	4628      	mov	r0, r5
 800093a:	f7ff ffc9 	bl	80008d0 <L6206_IsBidirectionnalMotor>
 800093e:	b120      	cbz	r0, 800094a <L6206_HardStop+0x3e>
    	bridgeInputSecondPWM = L6206_GetSecondBridgeInputUsedByMotorId(motorId);
 8000940:	4628      	mov	r0, r5
 8000942:	f7ff ff93 	bl	800086c <L6206_GetSecondBridgeInputUsedByMotorId>
    	L6206_Board_PwmStop(bridgeInputSecondPWM);
 8000946:	f000 fb07 	bl	8000f58 <L6206_Board_PwmStop>
    L6206_Board_PwmStop(bridgeInputFirstPWM);
 800094a:	4630      	mov	r0, r6
    devicePrm.motionState[motorId] = INACTIVE;
 800094c:	442c      	add	r4, r5
    L6206_Board_PwmStop(bridgeInputFirstPWM);
 800094e:	f000 fb03 	bl	8000f58 <L6206_Board_PwmStop>
    devicePrm.motionState[motorId] = INACTIVE;
 8000952:	2308      	movs	r3, #8
 8000954:	f884 3020 	strb.w	r3, [r4, #32]
 8000958:	bd70      	pop	{r4, r5, r6, pc}
 800095a:	bf00      	nop
 800095c:	2000433c 	.word	0x2000433c
 8000960:	08003d64 	.word	0x08003d64

08000964 <L6206_HardHiz>:
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 8000964:	491c      	ldr	r1, [pc, #112]	; (80009d8 <L6206_HardHiz+0x74>)
{
 8000966:	b538      	push	{r3, r4, r5, lr}
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 8000968:	780d      	ldrb	r5, [r1, #0]
 800096a:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <L6206_HardHiz+0x78>)
 800096c:	5d5b      	ldrb	r3, [r3, r5]
 800096e:	4283      	cmp	r3, r0
{
 8000970:	4604      	mov	r4, r0
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 8000972:	d205      	bcs.n	8000980 <L6206_HardHiz+0x1c>
    L6206_ErrorHandler(L6206_ERROR_1);
 8000974:	f248 0001 	movw	r0, #32769	; 0x8001
}
 8000978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    L6206_ErrorHandler(L6206_ERROR_1);
 800097c:	f7ff bdda 	b.w	8000534 <L6206_ErrorHandler>
    uint8_t bridgeId = L6206_GetBridgeIdUsedByMotorId(motorId);
 8000980:	f7ff feea 	bl	8000758 <L6206_GetBridgeIdUsedByMotorId>
    if (devicePrm.bridgeEnabled[bridgeId] != FALSE)
 8000984:	180b      	adds	r3, r1, r0
 8000986:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800098a:	b193      	cbz	r3, 80009b2 <L6206_HardHiz+0x4e>
      switch (devicePrm.config)
 800098c:	3d01      	subs	r5, #1
 800098e:	2d09      	cmp	r5, #9
 8000990:	d81f      	bhi.n	80009d2 <L6206_HardHiz+0x6e>
 8000992:	e8df f005 	tbb	[pc, r5]
 8000996:	1305      	.short	0x1305
 8000998:	1e051e17 	.word	0x1e051e17
 800099c:	151e1e13 	.word	0x151e1e13
          if ((motorId > 0) && (devicePrm.motionState[1] == STEADY) && (devicePrm.motionState[2] == STEADY))
 80009a0:	b1bc      	cbz	r4, 80009d2 <L6206_HardHiz+0x6e>
 80009a2:	6a0b      	ldr	r3, [r1, #32]
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <L6206_HardHiz+0x7c>)
 80009a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80009aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80009ae:	4293      	cmp	r3, r2
          if ((devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY))
 80009b0:	d10f      	bne.n	80009d2 <L6206_HardHiz+0x6e>
    L6206_HardStop(motorId);
 80009b2:	4620      	mov	r0, r4
}
 80009b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    L6206_HardStop(motorId);
 80009b8:	f7ff bfa8 	b.w	800090c <L6206_HardStop>
          if ((motorId < 2) && (devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY))
 80009bc:	2c01      	cmp	r4, #1
 80009be:	d808      	bhi.n	80009d2 <L6206_HardHiz+0x6e>
          if ((devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY))
 80009c0:	8c0a      	ldrh	r2, [r1, #32]
 80009c2:	e002      	b.n	80009ca <L6206_HardHiz+0x66>
          if (((motorId < 2) && (devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY))|| 
 80009c4:	2c01      	cmp	r4, #1
 80009c6:	d9fb      	bls.n	80009c0 <L6206_HardHiz+0x5c>
              ((motorId > 1) && (devicePrm.motionState[2] == STEADY) && (devicePrm.motionState[3] == STEADY)))
 80009c8:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
          if ((devicePrm.motionState[0] == STEADY) && (devicePrm.motionState[1] == STEADY))
 80009ca:	f240 3303 	movw	r3, #771	; 0x303
 80009ce:	429a      	cmp	r2, r3
 80009d0:	e7ee      	b.n	80009b0 <L6206_HardHiz+0x4c>
        L6206_DisableBridge(bridgeId);
 80009d2:	f7ff fe7f 	bl	80006d4 <L6206_DisableBridge>
 80009d6:	e7ec      	b.n	80009b2 <L6206_HardHiz+0x4e>
 80009d8:	2000433c 	.word	0x2000433c
 80009dc:	08003d64 	.word	0x08003d64
 80009e0:	00030300 	.word	0x00030300

080009e4 <L6206_Run>:
{
 80009e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 80009e6:	4c25      	ldr	r4, [pc, #148]	; (8000a7c <L6206_Run+0x98>)
 80009e8:	4a25      	ldr	r2, [pc, #148]	; (8000a80 <L6206_Run+0x9c>)
 80009ea:	7823      	ldrb	r3, [r4, #0]
 80009ec:	5cd3      	ldrb	r3, [r2, r3]
 80009ee:	4283      	cmp	r3, r0
{
 80009f0:	4605      	mov	r5, r0
 80009f2:	460e      	mov	r6, r1
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 80009f4:	d205      	bcs.n	8000a02 <L6206_Run+0x1e>
    L6206_ErrorHandler(L6206_ERROR_1);
 80009f6:	f248 0001 	movw	r0, #32769	; 0x8001
}
 80009fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    L6206_ErrorHandler(L6206_ERROR_1);
 80009fe:	f7ff bd99 	b.w	8000534 <L6206_ErrorHandler>
  else if ((devicePrm.motionState[motorId] == INACTIVE) ||
 8000a02:	1823      	adds	r3, r4, r0
 8000a04:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000a08:	2a08      	cmp	r2, #8
 8000a0a:	d004      	beq.n	8000a16 <L6206_Run+0x32>
 8000a0c:	7f1b      	ldrb	r3, [r3, #28]
 8000a0e:	428b      	cmp	r3, r1
 8000a10:	d033      	beq.n	8000a7a <L6206_Run+0x96>
      L6206_HardStop(motorId);
 8000a12:	f7ff ff7b 	bl	800090c <L6206_HardStop>
    devicePrm.direction[motorId] = direction;
 8000a16:	1963      	adds	r3, r4, r5
    devicePrm.motionState[motorId] = STEADY;
 8000a18:	2203      	movs	r2, #3
    bridgeId = L6206_GetBridgeIdUsedByMotorId(motorId);    
 8000a1a:	4628      	mov	r0, r5
    devicePrm.direction[motorId] = direction;
 8000a1c:	771e      	strb	r6, [r3, #28]
    devicePrm.motionState[motorId] = STEADY;
 8000a1e:	f883 2020 	strb.w	r2, [r3, #32]
    bridgeId = L6206_GetBridgeIdUsedByMotorId(motorId);    
 8000a22:	f7ff fe99 	bl	8000758 <L6206_GetBridgeIdUsedByMotorId>
 8000a26:	4607      	mov	r7, r0
    bridgeInput = L6206_GetBridgeInputUsedByMotorId(motorId);    
 8000a28:	4628      	mov	r0, r5
 8000a2a:	f7ff fed9 	bl	80007e0 <L6206_GetBridgeInputUsedByMotorId>
 8000a2e:	4606      	mov	r6, r0
    L6206_EnableBridge(bridgeId);
 8000a30:	4638      	mov	r0, r7
 8000a32:	f7ff fe6b 	bl	800070c <L6206_EnableBridge>
    if (L6206_IsBidirectionnalMotor(motorId))
 8000a36:	4628      	mov	r0, r5
 8000a38:	f7ff ff4a 	bl	80008d0 <L6206_IsBidirectionnalMotor>
 8000a3c:	f105 0308 	add.w	r3, r5, #8
 8000a40:	00b1      	lsls	r1, r6, #2
      L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],(100 - devicePrm.speed[motorId]));
 8000a42:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    if (L6206_IsBidirectionnalMotor(motorId))
 8000a46:	b198      	cbz	r0, 8000a70 <L6206_Run+0x8c>
      L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],(100 - devicePrm.speed[motorId]));
 8000a48:	791a      	ldrb	r2, [r3, #4]
 8000a4a:	4421      	add	r1, r4
 8000a4c:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8000a50:	b2d2      	uxtb	r2, r2
 8000a52:	6849      	ldr	r1, [r1, #4]
 8000a54:	4630      	mov	r0, r6
 8000a56:	f000 fa3b 	bl	8000ed0 <L6206_Board_PwmSetFreq>
      bridgeInput = L6206_GetSecondBridgeInputUsedByMotorId(motorId);
 8000a5a:	4628      	mov	r0, r5
 8000a5c:	f7ff ff06 	bl	800086c <L6206_GetSecondBridgeInputUsedByMotorId>
      L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],100);
 8000a60:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8000a64:	2264      	movs	r2, #100	; 0x64
 8000a66:	6861      	ldr	r1, [r4, #4]
}
 8000a68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],devicePrm.speed[motorId]);
 8000a6c:	f000 ba30 	b.w	8000ed0 <L6206_Board_PwmSetFreq>
 8000a70:	440c      	add	r4, r1
 8000a72:	791a      	ldrb	r2, [r3, #4]
 8000a74:	6861      	ldr	r1, [r4, #4]
 8000a76:	4630      	mov	r0, r6
 8000a78:	e7f6      	b.n	8000a68 <L6206_Run+0x84>
 8000a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a7c:	2000433c 	.word	0x2000433c
 8000a80:	08003d64 	.word	0x08003d64

08000a84 <L6206_SetMaxSpeed>:
{                                                  
 8000a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 8000a86:	4c15      	ldr	r4, [pc, #84]	; (8000adc <L6206_SetMaxSpeed+0x58>)
 8000a88:	4a15      	ldr	r2, [pc, #84]	; (8000ae0 <L6206_SetMaxSpeed+0x5c>)
 8000a8a:	7823      	ldrb	r3, [r4, #0]
 8000a8c:	5cd3      	ldrb	r3, [r2, r3]
 8000a8e:	4283      	cmp	r3, r0
{                                                  
 8000a90:	4606      	mov	r6, r0
 8000a92:	460d      	mov	r5, r1
  if (motorId > l6206ArrayNbMaxMotorsByConfig[devicePrm.config])
 8000a94:	d205      	bcs.n	8000aa2 <L6206_SetMaxSpeed+0x1e>
    L6206_ErrorHandler(L6206_ERROR_1);
 8000a96:	f248 0001 	movw	r0, #32769	; 0x8001
 8000a9a:	f7ff fd4b 	bl	8000534 <L6206_ErrorHandler>
  bool cmdExecuted = FALSE;
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    devicePrm.speed[motorId] = newMaxSpeed;
 8000aa2:	eb04 0340 	add.w	r3, r4, r0, lsl #1
 8000aa6:	8299      	strh	r1, [r3, #20]
    if (devicePrm.motionState[motorId] != INACTIVE)
 8000aa8:	1823      	adds	r3, r4, r0
 8000aaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000aae:	2b08      	cmp	r3, #8
 8000ab0:	d00f      	beq.n	8000ad2 <L6206_SetMaxSpeed+0x4e>
      bridgeInput = L6206_GetBridgeInputUsedByMotorId(motorId);
 8000ab2:	f7ff fe95 	bl	80007e0 <L6206_GetBridgeInputUsedByMotorId>
 8000ab6:	4607      	mov	r7, r0
      if (L6206_IsBidirectionnalMotor(motorId))
 8000ab8:	4630      	mov	r0, r6
 8000aba:	f7ff ff09 	bl	80008d0 <L6206_IsBidirectionnalMotor>
 8000abe:	00bb      	lsls	r3, r7, #2
 8000ac0:	b148      	cbz	r0, 8000ad6 <L6206_SetMaxSpeed+0x52>
        L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],(100 - devicePrm.speed[motorId]));
 8000ac2:	f1c5 0264 	rsb	r2, r5, #100	; 0x64
 8000ac6:	441c      	add	r4, r3
 8000ac8:	b2d2      	uxtb	r2, r2
        L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],devicePrm.speed[motorId]);
 8000aca:	6861      	ldr	r1, [r4, #4]
 8000acc:	4638      	mov	r0, r7
 8000ace:	f000 f9ff 	bl	8000ed0 <L6206_Board_PwmSetFreq>
    cmdExecuted = TRUE;
 8000ad2:	2001      	movs	r0, #1
}                                                     
 8000ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],devicePrm.speed[motorId]);
 8000ad6:	441c      	add	r4, r3
 8000ad8:	b2ea      	uxtb	r2, r5
 8000ada:	e7f6      	b.n	8000aca <L6206_SetMaxSpeed+0x46>
 8000adc:	2000433c 	.word	0x2000433c
 8000ae0:	08003d64 	.word	0x08003d64

08000ae4 <L6206_SetBridgeInputPwmFreq>:
{                                                  
 8000ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae8:	4f1e      	ldr	r7, [pc, #120]	; (8000b64 <L6206_SetBridgeInputPwmFreq+0x80>)
    devicePrm.pwmFreq[bridgeInput] = newFreq;
 8000aea:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8000b68 <L6206_SetBridgeInputPwmFreq+0x84>
 8000aee:	428f      	cmp	r7, r1
    uint8_t bridgeInput = (bridgeId << 1) + loop; 
 8000af0:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8000af4:	bf28      	it	cs
 8000af6:	460f      	movcs	r7, r1
 8000af8:	fa5f f980 	uxtb.w	r9, r0
 8000afc:	2600      	movs	r6, #0
 8000afe:	eb09 0506 	add.w	r5, r9, r6
 8000b02:	b2ed      	uxtb	r5, r5
    devicePrm.pwmFreq[bridgeInput] = newFreq;
 8000b04:	eb08 0a85 	add.w	sl, r8, r5, lsl #2
    motorId = L6206_GetMotorIdUsingbridgeInput(bridgeInput);
 8000b08:	4628      	mov	r0, r5
    devicePrm.pwmFreq[bridgeInput] = newFreq;
 8000b0a:	f8ca 7004 	str.w	r7, [sl, #4]
    motorId = L6206_GetMotorIdUsingbridgeInput(bridgeInput);
 8000b0e:	f7ff fe3d 	bl	800078c <L6206_GetMotorIdUsingbridgeInput>
    if (devicePrm.motionState[motorId] != INACTIVE)
 8000b12:	eb08 0300 	add.w	r3, r8, r0
    motorId = L6206_GetMotorIdUsingbridgeInput(bridgeInput);
 8000b16:	4604      	mov	r4, r0
    if (devicePrm.motionState[motorId] != INACTIVE)
 8000b18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b1c:	2b08      	cmp	r3, #8
 8000b1e:	d016      	beq.n	8000b4e <L6206_SetBridgeInputPwmFreq+0x6a>
      if (L6206_IsBidirectionnalMotor(motorId))
 8000b20:	f7ff fed6 	bl	80008d0 <L6206_IsBidirectionnalMotor>
 8000b24:	b1c0      	cbz	r0, 8000b58 <L6206_SetBridgeInputPwmFreq+0x74>
        if (bridgeInput !=  L6206_GetSecondBridgeInputUsedByMotorId(motorId))
 8000b26:	4620      	mov	r0, r4
 8000b28:	f7ff fea0 	bl	800086c <L6206_GetSecondBridgeInputUsedByMotorId>
 8000b2c:	42a8      	cmp	r0, r5
 8000b2e:	d009      	beq.n	8000b44 <L6206_SetBridgeInputPwmFreq+0x60>
        L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],(100 - devicePrm.speed[motorId]));
 8000b30:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8000b34:	f8da 1004 	ldr.w	r1, [sl, #4]
 8000b38:	7d22      	ldrb	r2, [r4, #20]
 8000b3a:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8000b3e:	b2d2      	uxtb	r2, r2
        L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],devicePrm.speed[motorId]);
 8000b40:	4628      	mov	r0, r5
 8000b42:	e002      	b.n	8000b4a <L6206_SetBridgeInputPwmFreq+0x66>
          L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],100);
 8000b44:	f8da 1004 	ldr.w	r1, [sl, #4]
 8000b48:	2264      	movs	r2, #100	; 0x64
        L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],devicePrm.speed[motorId]);
 8000b4a:	f000 f9c1 	bl	8000ed0 <L6206_Board_PwmSetFreq>
 8000b4e:	3601      	adds	r6, #1
  for (loop = 0; loop < 2;loop ++)
 8000b50:	2e02      	cmp	r6, #2
 8000b52:	d1d4      	bne.n	8000afe <L6206_SetBridgeInputPwmFreq+0x1a>
}
 8000b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        L6206_Board_PwmSetFreq(bridgeInput, devicePrm.pwmFreq[bridgeInput],devicePrm.speed[motorId]);
 8000b58:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8000b5c:	4639      	mov	r1, r7
 8000b5e:	7d22      	ldrb	r2, [r4, #20]
 8000b60:	e7ee      	b.n	8000b40 <L6206_SetBridgeInputPwmFreq+0x5c>
 8000b62:	bf00      	nop
 8000b64:	000186a0 	.word	0x000186a0
 8000b68:	2000433c 	.word	0x2000433c

08000b6c <L6206_SetDeviceParamsToPredefinedValues>:
 * @brief  Sets the parameters of the device to predefined values
 * from l6206_target_config.h
 * @retval None
 **********************************************************/
void L6206_SetDeviceParamsToPredefinedValues(void)
{
 8000b6c:	b570      	push	{r4, r5, r6, lr}
  uint32_t i;

  memset(&devicePrm, 0, sizeof(devicePrm));
 8000b6e:	4c0d      	ldr	r4, [pc, #52]	; (8000ba4 <L6206_SetDeviceParamsToPredefinedValues+0x38>)
 8000b70:	2228      	movs	r2, #40	; 0x28
 8000b72:	2100      	movs	r1, #0
 8000b74:	4620      	mov	r0, r4
 8000b76:	f003 f81b 	bl	8003bb0 <memset>

  devicePrm.config = L6206_CONF_PARAM_PARALLE_BRIDGES;

  devicePrm.pwmFreq[INPUT_1A] = L6206_CONF_PARAM_FREQ_PWM1A;
 8000b7a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000b7e:	6063      	str	r3, [r4, #4]
  devicePrm.pwmFreq[INPUT_2A] = L6206_CONF_PARAM_FREQ_PWM2A;
 8000b80:	60a3      	str	r3, [r4, #8]
  devicePrm.pwmFreq[INPUT_1B] = L6206_CONF_PARAM_FREQ_PWM1B;
 8000b82:	60e3      	str	r3, [r4, #12]
  devicePrm.pwmFreq[INPUT_2B] = L6206_CONF_PARAM_FREQ_PWM2B;
 8000b84:	6123      	str	r3, [r4, #16]
 8000b86:	f104 021b 	add.w	r2, r4, #27
 8000b8a:	2300      	movs	r3, #0
  
  for (i = 0; i < MAX_NUMBER_OF_BRUSH_DC_MOTORS; i++)
  {
    devicePrm.speed[i] = 100;
 8000b8c:	2664      	movs	r6, #100	; 0x64
    devicePrm.direction[i] = FORWARD;
 8000b8e:	2001      	movs	r0, #1
    devicePrm.motionState[i] = INACTIVE;
 8000b90:	2108      	movs	r1, #8
    devicePrm.speed[i] = 100;
 8000b92:	18e5      	adds	r5, r4, r3
 8000b94:	3302      	adds	r3, #2
 8000b96:	82ae      	strh	r6, [r5, #20]
    devicePrm.direction[i] = FORWARD;
 8000b98:	f802 0f01 	strb.w	r0, [r2, #1]!
  for (i = 0; i < MAX_NUMBER_OF_BRUSH_DC_MOTORS; i++)
 8000b9c:	2b08      	cmp	r3, #8
    devicePrm.motionState[i] = INACTIVE;
 8000b9e:	7111      	strb	r1, [r2, #4]
  for (i = 0; i < MAX_NUMBER_OF_BRUSH_DC_MOTORS; i++)
 8000ba0:	d1f7      	bne.n	8000b92 <L6206_SetDeviceParamsToPredefinedValues+0x26>
  }
  for (i = 0; i < L6206_NB_MAX_BRIDGES; i++)
  {  
    devicePrm.bridgeEnabled[i] = FALSE;
  }
}
 8000ba2:	bd70      	pop	{r4, r5, r6, pc}
 8000ba4:	2000433c 	.word	0x2000433c

08000ba8 <L6206_SetDeviceParamsToGivenValues>:
 * @param initDevicePrm structure containing values to initialize the device
 * parameters
 * @retval None
 **********************************************************/
void L6206_SetDeviceParamsToGivenValues(L6206_InitTypeDef* initDevicePrm)
{
 8000ba8:	b530      	push	{r4, r5, lr}
	  memcpy(&devicePrm, initDevicePrm, sizeof(devicePrm));
 8000baa:	4c06      	ldr	r4, [pc, #24]	; (8000bc4 <L6206_SetDeviceParamsToGivenValues+0x1c>)
{
 8000bac:	4603      	mov	r3, r0
	  memcpy(&devicePrm, initDevicePrm, sizeof(devicePrm));
 8000bae:	f100 0528 	add.w	r5, r0, #40	; 0x28
 8000bb2:	6818      	ldr	r0, [r3, #0]
 8000bb4:	6859      	ldr	r1, [r3, #4]
 8000bb6:	4622      	mov	r2, r4
 8000bb8:	c203      	stmia	r2!, {r0, r1}
 8000bba:	3308      	adds	r3, #8
 8000bbc:	42ab      	cmp	r3, r5
 8000bbe:	4614      	mov	r4, r2
 8000bc0:	d1f7      	bne.n	8000bb2 <L6206_SetDeviceParamsToGivenValues+0xa>
}
 8000bc2:	bd30      	pop	{r4, r5, pc}
 8000bc4:	2000433c 	.word	0x2000433c

08000bc8 <L6206_Init>:
	l6206DriverInstance++;
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <L6206_Init+0x2c>)
 8000bca:	8813      	ldrh	r3, [r2, #0]
{
 8000bcc:	b510      	push	{r4, lr}
	l6206DriverInstance++;
 8000bce:	3301      	adds	r3, #1
{
 8000bd0:	4604      	mov	r4, r0
	l6206DriverInstance++;
 8000bd2:	8013      	strh	r3, [r2, #0]
	L6206_Board_GpioInit();
 8000bd4:	f000 f8bc 	bl	8000d50 <L6206_Board_GpioInit>
	if (init == NULL)
 8000bd8:	b93c      	cbnz	r4, 8000bea <L6206_Init+0x22>
		L6206_SetDeviceParamsToPredefinedValues();
 8000bda:	f7ff ffc7 	bl	8000b6c <L6206_SetDeviceParamsToPredefinedValues>
	L6206_SetDualFullBridgeConfig(devicePrm.config);
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <L6206_Init+0x30>)
}
 8000be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	L6206_SetDualFullBridgeConfig(devicePrm.config);
 8000be4:	7818      	ldrb	r0, [r3, #0]
 8000be6:	f7ff bd1b 	b.w	8000620 <L6206_SetDualFullBridgeConfig>
		L6206_SetDeviceParamsToGivenValues((L6206_InitTypeDef*) init);
 8000bea:	4620      	mov	r0, r4
 8000bec:	f7ff ffdc 	bl	8000ba8 <L6206_SetDeviceParamsToGivenValues>
 8000bf0:	e7f5      	b.n	8000bde <L6206_Init+0x16>
 8000bf2:	bf00      	nop
 8000bf4:	20000388 	.word	0x20000388
 8000bf8:	2000433c 	.word	0x2000433c

08000bfc <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000bfc:	b510      	push	{r4, lr}
 8000bfe:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000c00:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <BSP_PB_Init+0x6c>)
 8000c02:	2400      	movs	r4, #0
 8000c04:	9400      	str	r4, [sp, #0]
 8000c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c08:	f042 0204 	orr.w	r2, r2, #4
 8000c0c:	631a      	str	r2, [r3, #48]	; 0x30
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c10:	f003 0304 	and.w	r3, r3, #4
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	9b00      	ldr	r3, [sp, #0]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000c18:	b971      	cbnz	r1, 8000c38 <BSP_PB_Init+0x3c>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000c1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c1e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c20:	2302      	movs	r3, #2
 8000c22:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000c24:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <BSP_PB_Init+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c28:	9102      	str	r1, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000c2a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000c2e:	a901      	add	r1, sp, #4
 8000c30:	f000 fb5a 	bl	80012e8 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 8000c34:	b006      	add	sp, #24
 8000c36:	bd10      	pop	{r4, pc}
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000c38:	2901      	cmp	r1, #1
 8000c3a:	d1fb      	bne.n	8000c34 <BSP_PB_Init+0x38>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000c3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c40:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <BSP_PB_Init+0x74>)
 8000c44:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <BSP_PB_Init+0x70>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000c4a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000c4e:	a901      	add	r1, sp, #4
 8000c50:	f000 fb4a 	bl	80012e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000c54:	4622      	mov	r2, r4
 8000c56:	210f      	movs	r1, #15
 8000c58:	2028      	movs	r0, #40	; 0x28
 8000c5a:	f000 fae5 	bl	8001228 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000c5e:	2028      	movs	r0, #40	; 0x28
 8000c60:	f000 fb16 	bl	8001290 <HAL_NVIC_EnableIRQ>
}
 8000c64:	e7e6      	b.n	8000c34 <BSP_PB_Init+0x38>
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	20000164 	.word	0x20000164
 8000c70:	10210000 	.word	0x10210000

08000c74 <L6206_Board_DisableBridge>:
 * @brief Disable the power bridges (leave the output bridges HiZ)
 * @param[in]  bridgeId (from 0 for bridge A to 1 for bridge B)
 * @retval None
 **********************************************************/
void L6206_Board_DisableBridge(uint8_t bridgeId)
{
 8000c74:	b570      	push	{r4, r5, r6, lr}
    gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT;
  }
  else
  {
    gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
    gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;    
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <L6206_Board_DisableBridge+0x44>)
 8000c78:	4c10      	ldr	r4, [pc, #64]	; (8000cbc <L6206_Board_DisableBridge+0x48>)
  if (bridgeId == 0)
 8000c7a:	2800      	cmp	r0, #0
{
 8000c7c:	b086      	sub	sp, #24
    gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;    
 8000c7e:	bf14      	ite	ne
 8000c80:	461c      	movne	r4, r3
 8000c82:	f44f 6580 	moveq.w	r5, #1024	; 0x400
  }
  
  /* Configure the GPIO connected to EN pin as an output */
  GPIO_InitStruct.Pin = gpioPin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	f04f 0301 	mov.w	r3, #1
    gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;    
 8000c8a:	bf18      	it	ne
 8000c8c:	2502      	movne	r5, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2600      	movs	r6, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
  HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8000c90:	a901      	add	r1, sp, #4
 8000c92:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = gpioPin;
 8000c94:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8000c9a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8000c9c:	f000 fb24 	bl	80012e8 <HAL_GPIO_Init>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
  
  __disable_irq();
  HAL_GPIO_WritePin(gpioPort, gpioPin, GPIO_PIN_RESET);  
 8000ca2:	4632      	mov	r2, r6
 8000ca4:	4629      	mov	r1, r5
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	f000 fc70 	bl	800158c <HAL_GPIO_WritePin>
  __HAL_GPIO_EXTI_CLEAR_IT(gpioPin);
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <L6206_Board_DisableBridge+0x4c>)
 8000cae:	615d      	str	r5, [r3, #20]
  __ASM volatile ("cpsie i" : : : "memory");
 8000cb0:	b662      	cpsie	i
  __enable_irq();
    
}
 8000cb2:	b006      	add	sp, #24
 8000cb4:	bd70      	pop	{r4, r5, r6, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40020800 	.word	0x40020800
 8000cbc:	40020000 	.word	0x40020000
 8000cc0:	40013c00 	.word	0x40013c00

08000cc4 <L6206_Board_EnableBridge>:
 * @param[in]  bridgeId (from 0 for bridge A to 1 for bridge B)
 * @param[in]  addDelay if different from 0, a delay is added after bridge activation
 * @retval None
 **********************************************************/
void L6206_Board_EnableBridge(uint8_t bridgeId, uint8_t addDelay)
{
 8000cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
  }
  else
  {
    gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
    gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;    
    flagIrqn = EXTI_FLAG_B_IRQn;    
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <L6206_Board_EnableBridge+0x58>)
 8000cc8:	4c15      	ldr	r4, [pc, #84]	; (8000d20 <L6206_Board_EnableBridge+0x5c>)
 8000cca:	2800      	cmp	r0, #0
 8000ccc:	bf16      	itet	ne
 8000cce:	461c      	movne	r4, r3
 8000cd0:	f44f 6580 	moveq.w	r5, #1024	; 0x400
 8000cd4:	2502      	movne	r5, #2
{
 8000cd6:	460f      	mov	r7, r1
 8000cd8:	b087      	sub	sp, #28
  }
  
  HAL_GPIO_WritePin(gpioPort, gpioPin, GPIO_PIN_SET);
 8000cda:	f04f 0201 	mov.w	r2, #1
 8000cde:	4629      	mov	r1, r5
 8000ce0:	4620      	mov	r0, r4
    flagIrqn = EXTI_FLAG_B_IRQn;    
 8000ce2:	bf0c      	ite	eq
 8000ce4:	2628      	moveq	r6, #40	; 0x28
 8000ce6:	2607      	movne	r6, #7
  HAL_GPIO_WritePin(gpioPort, gpioPin, GPIO_PIN_SET);
 8000ce8:	f000 fc50 	bl	800158c <HAL_GPIO_WritePin>
  if (addDelay != 0)
 8000cec:	b117      	cbz	r7, 8000cf4 <L6206_Board_EnableBridge+0x30>
  {
    HAL_Delay(BSP_MOTOR_CONTROL_BOARD_BRIDGE_TURN_ON_DELAY);
 8000cee:	2014      	movs	r0, #20
 8000cf0:	f000 fa74 	bl	80011dc <HAL_Delay>
  }
  /* Configure the GPIO connected to EN pin to take interrupt */
  GPIO_InitStruct.Pin = gpioPin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <L6206_Board_EnableBridge+0x60>)
 8000cf6:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
  HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8000cf8:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cfa:	2301      	movs	r3, #1
  HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8000cfc:	4620      	mov	r0, r4
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cfe:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8000d00:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = gpioPin;
 8000d02:	9501      	str	r5, [sp, #4]
  HAL_GPIO_Init(gpioPort, &GPIO_InitStruct);
 8000d04:	f000 faf0 	bl	80012e8 <HAL_GPIO_Init>
  
  __HAL_GPIO_EXTI_CLEAR_IT(gpioPin);
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <L6206_Board_EnableBridge+0x64>)
  HAL_NVIC_ClearPendingIRQ(flagIrqn);
 8000d0a:	4630      	mov	r0, r6
  __HAL_GPIO_EXTI_CLEAR_IT(gpioPin);
 8000d0c:	615d      	str	r5, [r3, #20]
  HAL_NVIC_ClearPendingIRQ(flagIrqn);
 8000d0e:	f000 facb 	bl	80012a8 <HAL_NVIC_ClearPendingIRQ>
  HAL_NVIC_EnableIRQ(flagIrqn);  
 8000d12:	4630      	mov	r0, r6
 8000d14:	f000 fabc 	bl	8001290 <HAL_NVIC_EnableIRQ>
}
 8000d18:	b007      	add	sp, #28
 8000d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d1c:	40020800 	.word	0x40020800
 8000d20:	40020000 	.word	0x40020000
 8000d24:	10210000 	.word	0x10210000
 8000d28:	40013c00 	.word	0x40013c00

08000d2c <L6206_Board_GetFlagPinState>:
 * @brief  Returns the FLAG pin state.
 * @param[in]  bridgeId (from 0 for bridge A to 1 for bridge B)
 * @retval The FLAG pin value.
 **********************************************************/
uint32_t L6206_Board_GetFlagPinState(uint8_t bridgeId)
{
 8000d2c:	b508      	push	{r3, lr}
  else
  {
    gpioPin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
    gpioPort = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT;    
  }
  return HAL_GPIO_ReadPin(gpioPort, gpioPin);
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <L6206_Board_GetFlagPinState+0x1c>)
  if (bridgeId == 0)
 8000d30:	2800      	cmp	r0, #0
  return HAL_GPIO_ReadPin(gpioPort, gpioPin);
 8000d32:	bf0c      	ite	eq
 8000d34:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8000d38:	2102      	movne	r1, #2
 8000d3a:	4804      	ldr	r0, [pc, #16]	; (8000d4c <L6206_Board_GetFlagPinState+0x20>)
 8000d3c:	bf18      	it	ne
 8000d3e:	4618      	movne	r0, r3
 8000d40:	f000 fc1e 	bl	8001580 <HAL_GPIO_ReadPin>
}
 8000d44:	bd08      	pop	{r3, pc}
 8000d46:	bf00      	nop
 8000d48:	40020800 	.word	0x40020800
 8000d4c:	40020000 	.word	0x40020000

08000d50 <L6206_Board_GpioInit>:
/******************************************************//**
 * @brief  Initiliases the GPIOs used by the L6206s
 * @retval None
  **********************************************************/
void L6206_Board_GpioInit(void)
{
 8000d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d52:	b089      	sub	sp, #36	; 0x24
   GPIO_InitTypeDef GPIO_InitStruct;
  
  /* GPIO Ports Clock Enable */
  __GPIOC_CLK_ENABLE();
 8000d54:	2400      	movs	r4, #0
 8000d56:	4b28      	ldr	r3, [pc, #160]	; (8000df8 <L6206_Board_GpioInit+0xa8>)
 8000d58:	9400      	str	r4, [sp, #0]
 8000d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /* This pin is reconfigured later for OCD and OVT as GPIO_MODE_IT_FALLING with GPIO_PULLUP */
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, &GPIO_InitStruct);
 8000d5c:	4e27      	ldr	r6, [pc, #156]	; (8000dfc <L6206_Board_GpioInit+0xac>)
  __GPIOC_CLK_ENABLE();
 8000d5e:	f042 0204 	orr.w	r2, r2, #4
 8000d62:	631a      	str	r2, [r3, #48]	; 0x30
 8000d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d66:	f002 0204 	and.w	r2, r2, #4
 8000d6a:	9200      	str	r2, [sp, #0]
 8000d6c:	9a00      	ldr	r2, [sp, #0]
  __GPIOA_CLK_ENABLE();
 8000d6e:	9401      	str	r4, [sp, #4]
 8000d70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d72:	f042 0201 	orr.w	r2, r2, #1
 8000d76:	631a      	str	r2, [r3, #48]	; 0x30
 8000d78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d7a:	f002 0201 	and.w	r2, r2, #1
 8000d7e:	9201      	str	r2, [sp, #4]
 8000d80:	9a01      	ldr	r2, [sp, #4]
  __GPIOB_CLK_ENABLE();
 8000d82:	9402      	str	r4, [sp, #8]
 8000d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d86:	f042 0202 	orr.w	r2, r2, #2
 8000d8a:	631a      	str	r2, [r3, #48]	; 0x30
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	9405      	str	r4, [sp, #20]
  __GPIOB_CLK_ENABLE();
 8000d90:	f003 0302 	and.w	r3, r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d94:	2501      	movs	r5, #1
  __GPIOB_CLK_ENABLE();
 8000d96:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
 8000d98:	f44f 6780 	mov.w	r7, #1024	; 0x400
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, &GPIO_InitStruct);
 8000d9c:	a903      	add	r1, sp, #12
 8000d9e:	4630      	mov	r0, r6
  __GPIOB_CLK_ENABLE();
 8000da0:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8000da4:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN;
 8000da6:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, &GPIO_InitStruct);
 8000da8:	f000 fa9e 	bl	80012e8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PORT, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN, GPIO_PIN_RESET);
 8000dac:	4622      	mov	r2, r4
 8000dae:	4639      	mov	r1, r7
 8000db0:	4630      	mov	r0, r6
 8000db2:	f000 fbeb 	bl	800158c <HAL_GPIO_WritePin>
  
  /* Set Priority of External Line Interrupt used for the OCD OVT interrupt*/ 
  HAL_NVIC_SetPriority(EXTI_FLAG_A_IRQn, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PRIORITY, 0);
 8000db6:	4622      	mov	r2, r4
 8000db8:	2104      	movs	r1, #4
 8000dba:	2028      	movs	r0, #40	; 0x28
 8000dbc:	f000 fa34 	bl	8001228 <HAL_NVIC_SetPriority>
    
  /* Enable the External Line Interrupt used for the OCD OVT interrupt*/
  HAL_NVIC_EnableIRQ(EXTI_FLAG_A_IRQn);    
 8000dc0:	2028      	movs	r0, #40	; 0x28
 8000dc2:	f000 fa65 	bl	8001290 <HAL_NVIC_EnableIRQ>
  
/* Configure L6206 Enable pin of Bridge B ------------------------------*/
  /* This pin is reconfigured later for OCD and OVT as GPIO_MODE_IT_FALLING with GPIO_PULLUP */
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8000dc8:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT, &GPIO_InitStruct);
 8000dca:	4d0d      	ldr	r5, [pc, #52]	; (8000e00 <L6206_Board_GpioInit+0xb0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
 8000dce:	2602      	movs	r6, #2
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT, &GPIO_InitStruct);
 8000dd0:	a903      	add	r1, sp, #12
 8000dd2:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN;
 8000dd4:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT, &GPIO_InitStruct);
 8000dd6:	f000 fa87 	bl	80012e8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PORT, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN, GPIO_PIN_RESET);
 8000dda:	4622      	mov	r2, r4
 8000ddc:	4631      	mov	r1, r6
 8000dde:	4628      	mov	r0, r5
 8000de0:	f000 fbd4 	bl	800158c <HAL_GPIO_WritePin>
  
  /* Set Priority of External Line Interrupt used for the OCD OVT interrupt*/ 
  HAL_NVIC_SetPriority(EXTI_FLAG_B_IRQn, BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PRIORITY, 0);
 8000de4:	4622      	mov	r2, r4
 8000de6:	2104      	movs	r1, #4
 8000de8:	2007      	movs	r0, #7
 8000dea:	f000 fa1d 	bl	8001228 <HAL_NVIC_SetPriority>
    
  /* Enable the External Line Interrupt used for the OCD OVT interrupt*/
  HAL_NVIC_EnableIRQ(EXTI_FLAG_B_IRQn);    
 8000dee:	2007      	movs	r0, #7
 8000df0:	f000 fa4e 	bl	8001290 <HAL_NVIC_EnableIRQ>

}
 8000df4:	b009      	add	sp, #36	; 0x24
 8000df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	40020800 	.word	0x40020800

08000e04 <L6206_Board_PwmDeInit>:
  **********************************************************/
void L6206_Board_PwmDeInit(uint8_t bridgeInput)
{
  TIM_HandleTypeDef *pHTim;

  switch (bridgeInput)
 8000e04:	2802      	cmp	r0, #2
 8000e06:	d00e      	beq.n	8000e26 <L6206_Board_PwmDeInit+0x22>
 8000e08:	2803      	cmp	r0, #3
 8000e0a:	d010      	beq.n	8000e2e <L6206_Board_PwmDeInit+0x2a>
 8000e0c:	2801      	cmp	r0, #1
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <L6206_Board_PwmDeInit+0x34>)
 8000e10:	d005      	beq.n	8000e1e <L6206_Board_PwmDeInit+0x1a>
  {
    case 0:
    default:
      pHTim = &hTimPwm1A;
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A;
 8000e12:	480a      	ldr	r0, [pc, #40]	; (8000e3c <L6206_Board_PwmDeInit+0x38>)
      pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2A;

      break;
    case 2:
      pHTim = &hTimPwm1B;
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8000e14:	6003      	str	r3, [r0, #0]
      pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1B;
 8000e16:	2301      	movs	r3, #1

      break;
    case 3:
      pHTim = &hTimPwm2B;
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
      pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
 8000e18:	7703      	strb	r3, [r0, #28]

      break;      
  }
  HAL_TIM_PWM_DeInit(pHTim);
 8000e1a:	f000 bed6 	b.w	8001bca <HAL_TIM_PWM_DeInit>
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
 8000e1e:	4808      	ldr	r0, [pc, #32]	; (8000e40 <L6206_Board_PwmDeInit+0x3c>)
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8000e20:	6003      	str	r3, [r0, #0]
      pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
 8000e22:	2302      	movs	r3, #2
 8000e24:	e7f8      	b.n	8000e18 <L6206_Board_PwmDeInit+0x14>
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8000e26:	4807      	ldr	r0, [pc, #28]	; (8000e44 <L6206_Board_PwmDeInit+0x40>)
 8000e28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e2c:	e7f2      	b.n	8000e14 <L6206_Board_PwmDeInit+0x10>
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8000e2e:	4806      	ldr	r0, [pc, #24]	; (8000e48 <L6206_Board_PwmDeInit+0x44>)
 8000e30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e34:	e7f4      	b.n	8000e20 <L6206_Board_PwmDeInit+0x1c>
 8000e36:	bf00      	nop
 8000e38:	40000400 	.word	0x40000400
 8000e3c:	2000442c 	.word	0x2000442c
 8000e40:	2000436c 	.word	0x2000436c
 8000e44:	200043ac 	.word	0x200043ac
 8000e48:	200043ec 	.word	0x200043ec

08000e4c <L6206_Board_PwmInit>:
 * @param[in] bridgeInput 0 for input 1A, 1 for input 2A,
 * 2 for input 1B, 3 for input 2B
 * @retval None
  **********************************************************/
void L6206_Board_PwmInit(uint8_t bridgeInput)
{
 8000e4c:	b570      	push	{r4, r5, r6, lr}
  TIM_OC_InitTypeDef sConfigOC;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_HandleTypeDef *pHTim;
  uint32_t  channel;

  switch (bridgeInput)
 8000e4e:	2802      	cmp	r0, #2
{
 8000e50:	b08a      	sub	sp, #40	; 0x28
  switch (bridgeInput)
 8000e52:	d02a      	beq.n	8000eaa <L6206_Board_PwmInit+0x5e>
 8000e54:	2803      	cmp	r0, #3
 8000e56:	d02c      	beq.n	8000eb2 <L6206_Board_PwmInit+0x66>
 8000e58:	2801      	cmp	r0, #1
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <L6206_Board_PwmInit+0x70>)
 8000e5c:	d01f      	beq.n	8000e9e <L6206_Board_PwmInit+0x52>
  {
    case 0:
    default:
      pHTim = &hTimPwm1A;
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A;
 8000e5e:	4c18      	ldr	r4, [pc, #96]	; (8000ec0 <L6206_Board_PwmInit+0x74>)
      pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2A;
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2A;
      break;
    case 2:
      pHTim = &hTimPwm1B;
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8000e60:	6023      	str	r3, [r4, #0]
      pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1B;
 8000e62:	2301      	movs	r3, #1
 8000e64:	7723      	strb	r3, [r4, #28]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B;
 8000e66:	2600      	movs	r6, #0
      pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
      break;      
  }
  pHTim->Init.Prescaler = TIMER_PRESCALER -1;
  pHTim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e68:	2500      	movs	r5, #0
  pHTim->Init.Prescaler = TIMER_PRESCALER -1;
 8000e6a:	233f      	movs	r3, #63	; 0x3f
 8000e6c:	6063      	str	r3, [r4, #4]
  pHTim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6e:	60a5      	str	r5, [r4, #8]
  pHTim->Init.Period = 0;
 8000e70:	60e5      	str	r5, [r4, #12]
  pHTim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e72:	6125      	str	r5, [r4, #16]
  HAL_TIM_PWM_Init(pHTim);
 8000e74:	4620      	mov	r0, r4
 8000e76:	f000 ffd3 	bl	8001e20 <HAL_TIM_PWM_Init>
  
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e7a:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 8000e7c:	4632      	mov	r2, r6
 8000e7e:	a903      	add	r1, sp, #12
 8000e80:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e82:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = 0;
 8000e84:	9504      	str	r5, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e86:	9505      	str	r5, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e88:	9507      	str	r5, [sp, #28]
  HAL_TIM_PWM_ConfigChannel(pHTim, &sConfigOC, channel);
 8000e8a:	f001 f80f 	bl	8001eac <HAL_TIM_PWM_ConfigChannel>
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 8000e8e:	a901      	add	r1, sp, #4
 8000e90:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e92:	9501      	str	r5, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e94:	9502      	str	r5, [sp, #8]
  HAL_TIMEx_MasterConfigSynchronization(pHTim, &sMasterConfig);
 8000e96:	f001 f8c3 	bl	8002020 <HAL_TIMEx_MasterConfigSynchronization>
}
 8000e9a:	b00a      	add	sp, #40	; 0x28
 8000e9c:	bd70      	pop	{r4, r5, r6, pc}
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
 8000e9e:	4c09      	ldr	r4, [pc, #36]	; (8000ec4 <L6206_Board_PwmInit+0x78>)
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8000ea0:	6023      	str	r3, [r4, #0]
      pHTim->Channel = BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM2B;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	7723      	strb	r3, [r4, #28]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
 8000ea6:	2604      	movs	r6, #4
      break;      
 8000ea8:	e7de      	b.n	8000e68 <L6206_Board_PwmInit+0x1c>
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8000eaa:	4c07      	ldr	r4, [pc, #28]	; (8000ec8 <L6206_Board_PwmInit+0x7c>)
 8000eac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eb0:	e7d6      	b.n	8000e60 <L6206_Board_PwmInit+0x14>
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8000eb2:	4c06      	ldr	r4, [pc, #24]	; (8000ecc <L6206_Board_PwmInit+0x80>)
 8000eb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eb8:	e7f2      	b.n	8000ea0 <L6206_Board_PwmInit+0x54>
 8000eba:	bf00      	nop
 8000ebc:	40000400 	.word	0x40000400
 8000ec0:	2000442c 	.word	0x2000442c
 8000ec4:	2000436c 	.word	0x2000436c
 8000ec8:	200043ac 	.word	0x200043ac
 8000ecc:	200043ec 	.word	0x200043ec

08000ed0 <L6206_Board_PwmSetFreq>:
 * @param[in] duty Duty cycle
 * @retval None
 * @note The frequency is directly the current speed of the device
 **********************************************************/
void L6206_Board_PwmSetFreq(uint8_t bridgeInput, uint32_t newFreq, uint8_t duty)
{
 8000ed0:	b570      	push	{r4, r5, r6, lr}
 8000ed2:	4605      	mov	r5, r0
 8000ed4:	460c      	mov	r4, r1
 8000ed6:	4616      	mov	r6, r2
  uint32_t sysFreq = HAL_RCC_GetSysClockFreq();
 8000ed8:	f000 fcec 	bl	80018b4 <HAL_RCC_GetSysClockFreq>
  TIM_HandleTypeDef *pHTim;
  uint32_t period;
  uint32_t pulse;
  uint32_t channel;
  
  switch (bridgeInput)
 8000edc:	2d02      	cmp	r5, #2
 8000ede:	d023      	beq.n	8000f28 <L6206_Board_PwmSetFreq+0x58>
 8000ee0:	2d03      	cmp	r5, #3
 8000ee2:	d025      	beq.n	8000f30 <L6206_Board_PwmSetFreq+0x60>
 8000ee4:	2d01      	cmp	r5, #1
 8000ee6:	4a17      	ldr	r2, [pc, #92]	; (8000f44 <L6206_Board_PwmSetFreq+0x74>)
 8000ee8:	d01a      	beq.n	8000f20 <L6206_Board_PwmSetFreq+0x50>
  {
    case 0:
    default:
      pHTim = &hTimPwm1A;
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A;
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <L6206_Board_PwmSetFreq+0x78>)
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2A;
      break;
    case 2:
      pHTim = &hTimPwm1B;
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8000eec:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B;
 8000eee:	2100      	movs	r1, #0
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
      break;      
  }
  
   period = (uint32_t)( (uint32_t)sysFreq / (uint32_t)(TIMER_PRESCALER * newFreq)) - 1;
 8000ef0:	01a4      	lsls	r4, r4, #6
 8000ef2:	fbb0 f0f4 	udiv	r0, r0, r4


  __HAL_TIM_SetAutoreload(pHTim, period);
 8000ef6:	681c      	ldr	r4, [r3, #0]
   period = (uint32_t)( (uint32_t)sysFreq / (uint32_t)(TIMER_PRESCALER * newFreq)) - 1;
 8000ef8:	3801      	subs	r0, #1
  __HAL_TIM_SetAutoreload(pHTim, period);
 8000efa:	62e0      	str	r0, [r4, #44]	; 0x2c
 8000efc:	60d8      	str	r0, [r3, #12]
  
  if (duty == 0) 
 8000efe:	b146      	cbz	r6, 8000f12 <L6206_Board_PwmSetFreq+0x42>
    pulse = 0 ;
  }
  else 
  {
    if (duty > 100) duty = 100;  
    pulse = (uint32_t) ( ((uint32_t)period * (uint32_t)duty) / 100) + 1;
 8000f00:	2e64      	cmp	r6, #100	; 0x64
 8000f02:	4632      	mov	r2, r6
 8000f04:	bf28      	it	cs
 8000f06:	2264      	movcs	r2, #100	; 0x64
 8000f08:	4350      	muls	r0, r2
 8000f0a:	2264      	movs	r2, #100	; 0x64
 8000f0c:	fbb0 f0f2 	udiv	r0, r0, r2
 8000f10:	1c46      	adds	r6, r0, #1
  }    
  __HAL_TIM_SetCompare(pHTim, channel, pulse);
 8000f12:	b989      	cbnz	r1, 8000f38 <L6206_Board_PwmSetFreq+0x68>
 8000f14:	6366      	str	r6, [r4, #52]	; 0x34
  HAL_TIM_PWM_Start(pHTim, channel);
 8000f16:	4618      	mov	r0, r3

}
 8000f18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_TIM_PWM_Start(pHTim, channel);
 8000f1c:	f001 b836 	b.w	8001f8c <HAL_TIM_PWM_Start>
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A;
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <L6206_Board_PwmSetFreq+0x7c>)
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8000f22:	601a      	str	r2, [r3, #0]
      channel = BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B;
 8000f24:	2104      	movs	r1, #4
      break;      
 8000f26:	e7e3      	b.n	8000ef0 <L6206_Board_PwmSetFreq+0x20>
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B;
 8000f28:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <L6206_Board_PwmSetFreq+0x80>)
 8000f2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f2e:	e7dd      	b.n	8000eec <L6206_Board_PwmSetFreq+0x1c>
      pHTim->Instance = BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B;
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <L6206_Board_PwmSetFreq+0x84>)
 8000f32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f36:	e7f4      	b.n	8000f22 <L6206_Board_PwmSetFreq+0x52>
  __HAL_TIM_SetCompare(pHTim, channel, pulse);
 8000f38:	b109      	cbz	r1, 8000f3e <L6206_Board_PwmSetFreq+0x6e>
 8000f3a:	63a6      	str	r6, [r4, #56]	; 0x38
 8000f3c:	e7eb      	b.n	8000f16 <L6206_Board_PwmSetFreq+0x46>
 8000f3e:	6426      	str	r6, [r4, #64]	; 0x40
 8000f40:	e7e9      	b.n	8000f16 <L6206_Board_PwmSetFreq+0x46>
 8000f42:	bf00      	nop
 8000f44:	40000400 	.word	0x40000400
 8000f48:	2000442c 	.word	0x2000442c
 8000f4c:	2000436c 	.word	0x2000436c
 8000f50:	200043ac 	.word	0x200043ac
 8000f54:	200043ec 	.word	0x200043ec

08000f58 <L6206_Board_PwmStop>:
 * 2 for input 1B, 3 for input 2B
 * @retval None
 **********************************************************/
void L6206_Board_PwmStop(uint8_t bridgeInput)
{
  switch (bridgeInput)
 8000f58:	2803      	cmp	r0, #3
 8000f5a:	d810      	bhi.n	8000f7e <L6206_Board_PwmStop+0x26>
 8000f5c:	e8df f000 	tbb	[pc, r0]
 8000f60:	0c090602 	.word	0x0c090602
  {
    case 0:
       HAL_TIM_PWM_Stop(&hTimPwm1A,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1A);
 8000f64:	4806      	ldr	r0, [pc, #24]	; (8000f80 <L6206_Board_PwmStop+0x28>)
 8000f66:	2100      	movs	r1, #0
      break;
    case  2:
      HAL_TIM_PWM_Stop(&hTimPwm1B,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B);
      break;
    case  3:
      HAL_TIM_PWM_Stop(&hTimPwm2B,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B);
 8000f68:	f001 b82c 	b.w	8001fc4 <HAL_TIM_PWM_Stop>
      HAL_TIM_PWM_Stop(&hTimPwm2A,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2A);
 8000f6c:	2104      	movs	r1, #4
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <L6206_Board_PwmStop+0x2c>)
 8000f70:	e7fa      	b.n	8000f68 <L6206_Board_PwmStop+0x10>
      HAL_TIM_PWM_Stop(&hTimPwm1B,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM1B);
 8000f72:	2100      	movs	r1, #0
 8000f74:	4804      	ldr	r0, [pc, #16]	; (8000f88 <L6206_Board_PwmStop+0x30>)
 8000f76:	e7f7      	b.n	8000f68 <L6206_Board_PwmStop+0x10>
      HAL_TIM_PWM_Stop(&hTimPwm2B,BSP_MOTOR_CONTROL_BOARD_CHAN_TIMER_PWM2B);
 8000f78:	2104      	movs	r1, #4
 8000f7a:	4804      	ldr	r0, [pc, #16]	; (8000f8c <L6206_Board_PwmStop+0x34>)
 8000f7c:	e7f4      	b.n	8000f68 <L6206_Board_PwmStop+0x10>
 8000f7e:	4770      	bx	lr
 8000f80:	2000442c 	.word	0x2000442c
 8000f84:	2000436c 	.word	0x2000436c
 8000f88:	200043ac 	.word	0x200043ac
 8000f8c:	200043ec 	.word	0x200043ec

08000f90 <L6474_GetMotorHandle>:
 8000f90:	2000      	movs	r0, #0
 8000f92:	4770      	bx	lr

08000f94 <l647x_GetMotorHandle>:
 8000f94:	2000      	movs	r0, #0
 8000f96:	4770      	bx	lr

08000f98 <l648x_GetMotorHandle>:
 8000f98:	2000      	movs	r0, #0
 8000f9a:	4770      	bx	lr

08000f9c <Powerstep01_GetMotorHandle>:
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	4770      	bx	lr

08000fa0 <L6208_GetMotorHandle>:
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	4770      	bx	lr

08000fa4 <Stspin220_GetMotorHandle>:
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	4770      	bx	lr

08000fa8 <Stspin240_250_GetMotorHandle>:
/// Get motor handle for L6208
__weak motorDrv_t* L6208_GetMotorHandle(void){return ((motorDrv_t* )0);}
/// Get motor handle for STSPIN220
__weak motorDrv_t* Stspin220_GetMotorHandle(void){return ((motorDrv_t* )0);}
/// Get motor handle for STSPIN240
__weak motorDrv_t* Stspin240_250_GetMotorHandle(void){return ((motorDrv_t* )0);}
 8000fa8:	2000      	movs	r0, #0
 8000faa:	4770      	bx	lr

08000fac <BSP_MotorControl_ErrorHandler>:
 * @param[in] error number of the error
 * @retval None
 **********************************************************/
void BSP_MotorControl_ErrorHandler(uint16_t error)
{
  if ((motorDrvHandle != 0)&&(motorDrvHandle->ErrorHandler != 0))
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <BSP_MotorControl_ErrorHandler+0x10>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	b11b      	cbz	r3, 8000fba <BSP_MotorControl_ErrorHandler+0xe>
 8000fb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fb6:	b103      	cbz	r3, 8000fba <BSP_MotorControl_ErrorHandler+0xe>
  {
    motorDrvHandle->ErrorHandler(error);
 8000fb8:	4718      	bx	r3
 8000fba:	e7fe      	b.n	8000fba <BSP_MotorControl_ErrorHandler+0xe>
 8000fbc:	2000038c 	.word	0x2000038c

08000fc0 <BSP_MotorControl_AttachErrorHandler>:
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachErrorHandler != 0))
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <BSP_MotorControl_AttachErrorHandler+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	b113      	cbz	r3, 8000fcc <BSP_MotorControl_AttachErrorHandler+0xc>
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	b103      	cbz	r3, 8000fcc <BSP_MotorControl_AttachErrorHandler+0xc>
    motorDrvHandle->AttachErrorHandler(callback);
 8000fca:	4718      	bx	r3
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(2);
 8000fcc:	f640 0002 	movw	r0, #2050	; 0x802
 8000fd0:	f7ff bfec 	b.w	8000fac <BSP_MotorControl_ErrorHandler>
 8000fd4:	2000038c 	.word	0x2000038c

08000fd8 <BSP_MotorControl_AttachFlagInterrupt>:
  if ((motorDrvHandle != 0)&&(motorDrvHandle->AttachFlagInterrupt != 0))
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <BSP_MotorControl_AttachFlagInterrupt+0x14>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	b113      	cbz	r3, 8000fe4 <BSP_MotorControl_AttachFlagInterrupt+0xc>
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	b103      	cbz	r3, 8000fe4 <BSP_MotorControl_AttachFlagInterrupt+0xc>
    motorDrvHandle->AttachFlagInterrupt(callback);
 8000fe2:	4718      	bx	r3
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(3);
 8000fe4:	f640 0003 	movw	r0, #2051	; 0x803
 8000fe8:	f7ff bfe0 	b.w	8000fac <BSP_MotorControl_ErrorHandler>
 8000fec:	2000038c 	.word	0x2000038c

08000ff0 <BSP_MotorControl_Init>:
 * @param[in] initDeviceParameters Initialization structure for one device
 * @retval None
 **********************************************************/
void BSP_MotorControl_Init(uint16_t id, void* initDeviceParameters)
{
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Init != 0))
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <BSP_MotorControl_Init+0x18>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	b11b      	cbz	r3, 8000ffe <BSP_MotorControl_Init+0xe>
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	b10b      	cbz	r3, 8000ffe <BSP_MotorControl_Init+0xe>
  {
    motorDrvHandle->Init(initDeviceParameters);
 8000ffa:	4608      	mov	r0, r1
 8000ffc:	4718      	bx	r3
  }  
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(0);
 8000ffe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001002:	f7ff bfd3 	b.w	8000fac <BSP_MotorControl_ErrorHandler>
 8001006:	bf00      	nop
 8001008:	2000038c 	.word	0x2000038c

0800100c <BSP_MotorControl_FlagInterruptHandler>:
 * @brief  Handlers of the flag interrupt which calls the user callback (if defined)
 * @retval None
 **********************************************************/
void BSP_MotorControl_FlagInterruptHandler(void)
{
  if ((motorDrvHandle != 0)&&(motorDrvHandle->FlagInterruptHandler != 0))
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <BSP_MotorControl_FlagInterruptHandler+0x14>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	b113      	cbz	r3, 8001018 <BSP_MotorControl_FlagInterruptHandler+0xc>
 8001012:	695b      	ldr	r3, [r3, #20]
 8001014:	b103      	cbz	r3, 8001018 <BSP_MotorControl_FlagInterruptHandler+0xc>
  {
    motorDrvHandle->FlagInterruptHandler();
 8001016:	4718      	bx	r3
  }    
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(5);
 8001018:	f640 0005 	movw	r0, #2053	; 0x805
 800101c:	f7ff bfc6 	b.w	8000fac <BSP_MotorControl_ErrorHandler>
 8001020:	2000038c 	.word	0x2000038c

08001024 <BSP_MotorControl_GetDeviceState>:
 **********************************************************/
motorState_t BSP_MotorControl_GetDeviceState(uint8_t deviceId)
{
  motorState_t state = INACTIVE;

  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetDeviceState != 0))
 8001024:	4b07      	ldr	r3, [pc, #28]	; (8001044 <BSP_MotorControl_GetDeviceState+0x20>)
 8001026:	681b      	ldr	r3, [r3, #0]
{
 8001028:	b510      	push	{r4, lr}
  if ((motorDrvHandle != 0)&&(motorDrvHandle->GetDeviceState != 0))
 800102a:	b123      	cbz	r3, 8001036 <BSP_MotorControl_GetDeviceState+0x12>
 800102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102e:	b113      	cbz	r3, 8001036 <BSP_MotorControl_GetDeviceState+0x12>
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(9);
  }  
  return(state);   
}
 8001030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    state = motorDrvHandle->GetDeviceState(deviceId);
 8001034:	4718      	bx	r3
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(9);
 8001036:	f640 0009 	movw	r0, #2057	; 0x809
 800103a:	f7ff ffb7 	bl	8000fac <BSP_MotorControl_ErrorHandler>
}
 800103e:	2008      	movs	r0, #8
 8001040:	bd10      	pop	{r4, pc}
 8001042:	bf00      	nop
 8001044:	2000038c 	.word	0x2000038c

08001048 <BSP_MotorControl_Run>:
 * @note For unidirectionnal brush DC motor, direction parameter 
 * has no effect
 **********************************************************/
void BSP_MotorControl_Run(uint8_t deviceId, motorDir_t direction)
{
  if ((motorDrvHandle != 0)&&(motorDrvHandle->Run != 0))
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <BSP_MotorControl_Run+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	b113      	cbz	r3, 8001054 <BSP_MotorControl_Run+0xc>
 800104e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001050:	b103      	cbz	r3, 8001054 <BSP_MotorControl_Run+0xc>
  {
    motorDrvHandle->Run(deviceId, direction); 
 8001052:	4718      	bx	r3
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(21);
 8001054:	f640 0015 	movw	r0, #2069	; 0x815
 8001058:	f7ff bfa8 	b.w	8000fac <BSP_MotorControl_ErrorHandler>
 800105c:	2000038c 	.word	0x2000038c

08001060 <BSP_MotorControl_SetMaxSpeed>:
 * is executing a MOVE or GOTO command (but it can be used during a RUN command).
 **********************************************************/
bool BSP_MotorControl_SetMaxSpeed(uint8_t deviceId, uint16_t newMaxSpeed)
{                                                  
  bool status = FALSE;
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetMaxSpeed != 0))
 8001060:	4b07      	ldr	r3, [pc, #28]	; (8001080 <BSP_MotorControl_SetMaxSpeed+0x20>)
 8001062:	681b      	ldr	r3, [r3, #0]
{                                                  
 8001064:	b510      	push	{r4, lr}
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetMaxSpeed != 0))
 8001066:	b123      	cbz	r3, 8001072 <BSP_MotorControl_SetMaxSpeed+0x12>
 8001068:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800106a:	b113      	cbz	r3, 8001072 <BSP_MotorControl_SetMaxSpeed+0x12>
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(26);
  }     
  return (status);  
}                                                     
 800106c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    status = motorDrvHandle->SetMaxSpeed(deviceId, newMaxSpeed);
 8001070:	4718      	bx	r3
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(26);
 8001072:	f640 001a 	movw	r0, #2074	; 0x81a
 8001076:	f7ff ff99 	bl	8000fac <BSP_MotorControl_ErrorHandler>
}                                                     
 800107a:	2000      	movs	r0, #0
 800107c:	bd10      	pop	{r4, pc}
 800107e:	bf00      	nop
 8001080:	2000038c 	.word	0x2000038c

08001084 <BSP_MotorControl_CmdGetStatus>:
 * GetParam command (via the functions ReadStatusRegister or CmdGetParam).
 **********************************************************/
uint16_t BSP_MotorControl_CmdGetStatus(uint8_t deviceId)
{
  uint16_t status = 0;
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdGetStatus != 0))
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <BSP_MotorControl_CmdGetStatus+0x20>)
 8001086:	681b      	ldr	r3, [r3, #0]
{
 8001088:	b510      	push	{r4, lr}
  if ((motorDrvHandle != 0)&&(motorDrvHandle->CmdGetStatus != 0))
 800108a:	b12b      	cbz	r3, 8001098 <BSP_MotorControl_CmdGetStatus+0x14>
 800108c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001090:	b113      	cbz	r3, 8001098 <BSP_MotorControl_CmdGetStatus+0x14>
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
  }      
  return (status);
}
 8001092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    status = motorDrvHandle->CmdGetStatus(deviceId);
 8001096:	4718      	bx	r3
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(34);
 8001098:	f640 0022 	movw	r0, #2082	; 0x822
 800109c:	f7ff ff86 	bl	8000fac <BSP_MotorControl_ErrorHandler>
}
 80010a0:	2000      	movs	r0, #0
 80010a2:	bd10      	pop	{r4, pc}
 80010a4:	2000038c 	.word	0x2000038c

080010a8 <BSP_MotorControl_SetDualFullBridgeConfig>:
 * for Stspin250, 0 only as no dual brush DC configuration is supported
 * @retval None
 **********************************************************/
void BSP_MotorControl_SetDualFullBridgeConfig(uint8_t config)
{	
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetDualFullBridgeConfig != 0))
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <BSP_MotorControl_SetDualFullBridgeConfig+0x18>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	b11b      	cbz	r3, 80010b6 <BSP_MotorControl_SetDualFullBridgeConfig+0xe>
 80010ae:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80010b2:	b103      	cbz	r3, 80010b6 <BSP_MotorControl_SetDualFullBridgeConfig+0xe>
  {
    motorDrvHandle->SetDualFullBridgeConfig(config);
 80010b4:	4718      	bx	r3
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(65);
 80010b6:	f640 0041 	movw	r0, #2113	; 0x841
 80010ba:	f7ff bf77 	b.w	8000fac <BSP_MotorControl_ErrorHandler>
 80010be:	bf00      	nop
 80010c0:	2000038c 	.word	0x2000038c

080010c4 <BSP_MotorControl_SetBridgeInputPwmFreq>:
 * @param[in] newFreq in Hz up to 100000Hz
 * @retval None
 **********************************************************/
void BSP_MotorControl_SetBridgeInputPwmFreq(uint8_t bridgeId, uint32_t newFreq)
{	
  if ((motorDrvHandle != 0)&&(motorDrvHandle->SetBridgeInputPwmFreq != 0))
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <BSP_MotorControl_SetBridgeInputPwmFreq+0x18>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	b11b      	cbz	r3, 80010d2 <BSP_MotorControl_SetBridgeInputPwmFreq+0xe>
 80010ca:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80010ce:	b103      	cbz	r3, 80010d2 <BSP_MotorControl_SetBridgeInputPwmFreq+0xe>
  {
    motorDrvHandle->SetBridgeInputPwmFreq(bridgeId, newFreq);
 80010d0:	4718      	bx	r3
  }
  else
  {
    MOTOR_CONTROL_ERROR_UNDEFINED_FUNCTION(67);
 80010d2:	f640 0043 	movw	r0, #2115	; 0x843
 80010d6:	f7ff bf69 	b.w	8000fac <BSP_MotorControl_ErrorHandler>
 80010da:	bf00      	nop
 80010dc:	2000038c 	.word	0x2000038c

080010e0 <BSP_MotorControl_SetNbDevices>:
 * @retval TRUE if successfull, FALSE if failure, attempt 
 * to set a number of devices greater than MAX_NUMBER_OF_DEVICES
 **********************************************************/
bool BSP_MotorControl_SetNbDevices(uint16_t id, uint8_t nbDevices)
{
  MotorControlBoardId = id;
 80010e0:	4b26      	ldr	r3, [pc, #152]	; (800117c <BSP_MotorControl_SetNbDevices+0x9c>)
{
 80010e2:	b570      	push	{r4, r5, r6, lr}
  MotorControlBoardId = id;
 80010e4:	8018      	strh	r0, [r3, #0]
  bool status = FALSE;
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 80010e6:	f641 134a 	movw	r3, #6474	; 0x194a
 80010ea:	4298      	cmp	r0, r3
{
 80010ec:	460d      	mov	r5, r1
 80010ee:	4c24      	ldr	r4, [pc, #144]	; (8001180 <BSP_MotorControl_SetNbDevices+0xa0>)
  if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6474)
 80010f0:	d10c      	bne.n	800110c <BSP_MotorControl_SetNbDevices+0x2c>
  {
    motorDrvHandle = L6474_GetMotorHandle();
 80010f2:	f7ff ff4d 	bl	8000f90 <L6474_GetMotorHandle>
  }
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
  {
    motorDrvHandle = Powerstep01_GetMotorHandle();
 80010f6:	6020      	str	r0, [r4, #0]
  }  
  else
  {
    motorDrvHandle = 0;
  }
  if ((motorDrvHandle != 0)&&
 80010f8:	6823      	ldr	r3, [r4, #0]
 80010fa:	b3e3      	cbz	r3, 8001176 <BSP_MotorControl_SetNbDevices+0x96>
      (motorDrvHandle->SetNbDevices != 0)&&
 80010fc:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
  if ((motorDrvHandle != 0)&&
 8001100:	b3cb      	cbz	r3, 8001176 <BSP_MotorControl_SetNbDevices+0x96>
      (motorDrvHandle->SetNbDevices != 0)&&
 8001102:	b3c5      	cbz	r5, 8001176 <BSP_MotorControl_SetNbDevices+0x96>
      (nbDevices !=0))
  {
    status = motorDrvHandle->SetNbDevices(nbDevices);
 8001104:	4628      	mov	r0, r5
  }
  return (status);
}
 8001106:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    status = motorDrvHandle->SetNbDevices(nbDevices);
 800110a:	4718      	bx	r3
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_POWERSTEP01)
 800110c:	2801      	cmp	r0, #1
 800110e:	d102      	bne.n	8001116 <BSP_MotorControl_SetNbDevices+0x36>
    motorDrvHandle = Powerstep01_GetMotorHandle();
 8001110:	f7ff ff44 	bl	8000f9c <Powerstep01_GetMotorHandle>
 8001114:	e7ef      	b.n	80010f6 <BSP_MotorControl_SetNbDevices+0x16>
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6206)
 8001116:	f641 033e 	movw	r3, #6206	; 0x183e
 800111a:	4298      	cmp	r0, r3
 800111c:	d102      	bne.n	8001124 <BSP_MotorControl_SetNbDevices+0x44>
    motorDrvHandle = L6206_GetMotorHandle();
 800111e:	f7ff fb17 	bl	8000750 <L6206_GetMotorHandle>
 8001122:	e7e8      	b.n	80010f6 <BSP_MotorControl_SetNbDevices+0x16>
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_L6208)
 8001124:	f5b0 5fc2 	cmp.w	r0, #6208	; 0x1840
 8001128:	d102      	bne.n	8001130 <BSP_MotorControl_SetNbDevices+0x50>
    motorDrvHandle = L6208_GetMotorHandle();
 800112a:	f7ff ff39 	bl	8000fa0 <L6208_GetMotorHandle>
 800112e:	e7e2      	b.n	80010f6 <BSP_MotorControl_SetNbDevices+0x16>
  else if (id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN220)
 8001130:	28dc      	cmp	r0, #220	; 0xdc
 8001132:	d102      	bne.n	800113a <BSP_MotorControl_SetNbDevices+0x5a>
    motorDrvHandle = Stspin220_GetMotorHandle();
 8001134:	f7ff ff36 	bl	8000fa4 <Stspin220_GetMotorHandle>
 8001138:	e7dd      	b.n	80010f6 <BSP_MotorControl_SetNbDevices+0x16>
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6470) ||
 800113a:	f641 1346 	movw	r3, #6470	; 0x1946
 800113e:	4298      	cmp	r0, r3
 8001140:	d003      	beq.n	800114a <BSP_MotorControl_SetNbDevices+0x6a>
 8001142:	f641 1348 	movw	r3, #6472	; 0x1948
 8001146:	4298      	cmp	r0, r3
 8001148:	d102      	bne.n	8001150 <BSP_MotorControl_SetNbDevices+0x70>
    motorDrvHandle = l647x_GetMotorHandle();
 800114a:	f7ff ff23 	bl	8000f94 <l647x_GetMotorHandle>
 800114e:	e7d2      	b.n	80010f6 <BSP_MotorControl_SetNbDevices+0x16>
  else if ( (id == BSP_MOTOR_CONTROL_BOARD_ID_L6480) ||
 8001150:	f020 0302 	bic.w	r3, r0, #2
 8001154:	f641 1250 	movw	r2, #6480	; 0x1950
 8001158:	4293      	cmp	r3, r2
 800115a:	d102      	bne.n	8001162 <BSP_MotorControl_SetNbDevices+0x82>
    motorDrvHandle = l648x_GetMotorHandle();
 800115c:	f7ff ff1c 	bl	8000f98 <l648x_GetMotorHandle>
 8001160:	e7c9      	b.n	80010f6 <BSP_MotorControl_SetNbDevices+0x16>
  else if ((id == BSP_MOTOR_CONTROL_BOARD_ID_STSPIN240)||
 8001162:	28f0      	cmp	r0, #240	; 0xf0
 8001164:	d001      	beq.n	800116a <BSP_MotorControl_SetNbDevices+0x8a>
 8001166:	28fa      	cmp	r0, #250	; 0xfa
 8001168:	d102      	bne.n	8001170 <BSP_MotorControl_SetNbDevices+0x90>
    motorDrvHandle = Stspin240_250_GetMotorHandle();
 800116a:	f7ff ff1d 	bl	8000fa8 <Stspin240_250_GetMotorHandle>
 800116e:	e7c2      	b.n	80010f6 <BSP_MotorControl_SetNbDevices+0x16>
    motorDrvHandle = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	6023      	str	r3, [r4, #0]
 8001174:	e7c0      	b.n	80010f8 <BSP_MotorControl_SetNbDevices+0x18>
}
 8001176:	2000      	movs	r0, #0
 8001178:	bd70      	pop	{r4, r5, r6, pc}
 800117a:	bf00      	nop
 800117c:	2000038a 	.word	0x2000038a
 8001180:	2000038c 	.word	0x2000038c

08001184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001184:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_Init+0x30>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800118e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001196:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800119e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a0:	2003      	movs	r0, #3
 80011a2:	f000 f82f 	bl	8001204 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a6:	2000      	movs	r0, #0
 80011a8:	f002 fc18 	bl	80039dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ac:	f002 fb0c 	bl	80037c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80011b0:	2000      	movs	r0, #0
 80011b2:	bd08      	pop	{r3, pc}
 80011b4:	40023c00 	.word	0x40023c00

080011b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80011b8:	4a03      	ldr	r2, [pc, #12]	; (80011c8 <HAL_IncTick+0x10>)
 80011ba:	4b04      	ldr	r3, [pc, #16]	; (80011cc <HAL_IncTick+0x14>)
 80011bc:	6811      	ldr	r1, [r2, #0]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	440b      	add	r3, r1
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	2000446c 	.word	0x2000446c
 80011cc:	20000168 	.word	0x20000168

080011d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80011d0:	4b01      	ldr	r3, [pc, #4]	; (80011d8 <HAL_GetTick+0x8>)
 80011d2:	6818      	ldr	r0, [r3, #0]
}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	2000446c 	.word	0x2000446c

080011dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011dc:	b538      	push	{r3, r4, r5, lr}
 80011de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80011e0:	f7ff fff6 	bl	80011d0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e4:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80011e6:	bf1c      	itt	ne
 80011e8:	4b05      	ldrne	r3, [pc, #20]	; (8001200 <HAL_Delay+0x24>)
 80011ea:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80011ec:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80011ee:	bf18      	it	ne
 80011f0:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011f2:	f7ff ffed 	bl	80011d0 <HAL_GetTick>
 80011f6:	1b40      	subs	r0, r0, r5
 80011f8:	4284      	cmp	r4, r0
 80011fa:	d8fa      	bhi.n	80011f2 <HAL_Delay+0x16>
  {
  }
}
 80011fc:	bd38      	pop	{r3, r4, r5, pc}
 80011fe:	bf00      	nop
 8001200:	20000168 	.word	0x20000168

08001204 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001204:	4a07      	ldr	r2, [pc, #28]	; (8001224 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001206:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001208:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800120c:	041b      	lsls	r3, r3, #16
 800120e:	0c1b      	lsrs	r3, r3, #16
 8001210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001214:	0200      	lsls	r0, r0, #8
 8001216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800121a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800121e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001220:	60d3      	str	r3, [r2, #12]
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800122a:	b530      	push	{r4, r5, lr}
 800122c:	68dc      	ldr	r4, [r3, #12]
 800122e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001232:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001236:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001238:	2b04      	cmp	r3, #4
 800123a:	bf28      	it	cs
 800123c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	f04f 0501 	mov.w	r5, #1
 8001244:	fa05 f303 	lsl.w	r3, r5, r3
 8001248:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124c:	bf8c      	ite	hi
 800124e:	3c03      	subhi	r4, #3
 8001250:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001252:	4019      	ands	r1, r3
 8001254:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001256:	fa05 f404 	lsl.w	r4, r5, r4
 800125a:	3c01      	subs	r4, #1
 800125c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800125e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	ea42 0201 	orr.w	r2, r2, r1
 8001264:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001268:	bfaf      	iteee	ge
 800126a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126e:	f000 000f 	andlt.w	r0, r0, #15
 8001272:	4b06      	ldrlt	r3, [pc, #24]	; (800128c <HAL_NVIC_SetPriority+0x64>)
 8001274:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001276:	bfa5      	ittet	ge
 8001278:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800127c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001284:	bd30      	pop	{r4, r5, pc}
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00
 800128c:	e000ed14 	.word	0xe000ed14

08001290 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001290:	0942      	lsrs	r2, r0, #5
 8001292:	2301      	movs	r3, #1
 8001294:	f000 001f 	and.w	r0, r0, #31
 8001298:	fa03 f000 	lsl.w	r0, r3, r0
 800129c:	4b01      	ldr	r3, [pc, #4]	; (80012a4 <HAL_NVIC_EnableIRQ+0x14>)
 800129e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80012a2:	4770      	bx	lr
 80012a4:	e000e100 	.word	0xe000e100

080012a8 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80012a8:	0943      	lsrs	r3, r0, #5
 80012aa:	2201      	movs	r2, #1
 80012ac:	f000 001f 	and.w	r0, r0, #31
 80012b0:	fa02 f000 	lsl.w	r0, r2, r0
 80012b4:	3360      	adds	r3, #96	; 0x60
 80012b6:	4a02      	ldr	r2, [pc, #8]	; (80012c0 <HAL_NVIC_ClearPendingIRQ+0x18>)
 80012b8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000e100 	.word	0xe000e100

080012c4 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012c4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d003      	beq.n	80012d4 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80012d0:	2001      	movs	r0, #1
 80012d2:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012d4:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80012d6:	2305      	movs	r3, #5
 80012d8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80012dc:	6813      	ldr	r3, [r2, #0]
 80012de:	f023 0301 	bic.w	r3, r3, #1
 80012e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80012e4:	2000      	movs	r0, #0
}
 80012e6:	4770      	bx	lr

080012e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012ec:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ee:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f0:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8001490 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012f4:	4a64      	ldr	r2, [pc, #400]	; (8001488 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f6:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 80012f8:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fc:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fe:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001300:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001304:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8001308:	42b7      	cmp	r7, r6
 800130a:	f040 80ad 	bne.w	8001468 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800130e:	684c      	ldr	r4, [r1, #4]
 8001310:	f024 0a10 	bic.w	sl, r4, #16
 8001314:	f1ba 0f02 	cmp.w	sl, #2
 8001318:	d116      	bne.n	8001348 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 800131a:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800131e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001322:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001326:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800132a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800132e:	f04f 0e0f 	mov.w	lr, #15
 8001332:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001336:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800133a:	690d      	ldr	r5, [r1, #16]
 800133c:	fa05 f50b 	lsl.w	r5, r5, fp
 8001340:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001344:	f8cc 5020 	str.w	r5, [ip, #32]
 8001348:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800134c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800134e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001352:	fa05 f50c 	lsl.w	r5, r5, ip
 8001356:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001358:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800135c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001360:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001364:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001368:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800136c:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001370:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 8001372:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001376:	d815      	bhi.n	80013a4 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 8001378:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800137c:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001380:	68cd      	ldr	r5, [r1, #12]
 8001382:	fa05 fa0c 	lsl.w	sl, r5, ip
 8001386:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 800138a:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 800138e:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001392:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001396:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 800139a:	fa0e fe03 	lsl.w	lr, lr, r3
 800139e:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80013a2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80013a4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013a6:	9d00      	ldr	r5, [sp, #0]
 80013a8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013aa:	688f      	ldr	r7, [r1, #8]
 80013ac:	fa07 f70c 	lsl.w	r7, r7, ip
 80013b0:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80013b2:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013b4:	00e5      	lsls	r5, r4, #3
 80013b6:	d557      	bpl.n	8001468 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b8:	f04f 0b00 	mov.w	fp, #0
 80013bc:	f8cd b00c 	str.w	fp, [sp, #12]
 80013c0:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013c4:	4d31      	ldr	r5, [pc, #196]	; (800148c <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c6:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80013ca:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80013ce:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80013d2:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80013d6:	9703      	str	r7, [sp, #12]
 80013d8:	9f03      	ldr	r7, [sp, #12]
 80013da:	f023 0703 	bic.w	r7, r3, #3
 80013de:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80013e2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013e6:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80013ea:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013ee:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80013f2:	f04f 0e0f 	mov.w	lr, #15
 80013f6:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013fa:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013fc:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001400:	d039      	beq.n	8001476 <HAL_GPIO_Init+0x18e>
 8001402:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001406:	42a8      	cmp	r0, r5
 8001408:	d037      	beq.n	800147a <HAL_GPIO_Init+0x192>
 800140a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800140e:	42a8      	cmp	r0, r5
 8001410:	d035      	beq.n	800147e <HAL_GPIO_Init+0x196>
 8001412:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001416:	42a8      	cmp	r0, r5
 8001418:	d033      	beq.n	8001482 <HAL_GPIO_Init+0x19a>
 800141a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800141e:	42a8      	cmp	r0, r5
 8001420:	bf14      	ite	ne
 8001422:	2507      	movne	r5, #7
 8001424:	2504      	moveq	r5, #4
 8001426:	fa05 f50c 	lsl.w	r5, r5, ip
 800142a:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800142e:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001430:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001432:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001434:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001438:	bf0c      	ite	eq
 800143a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800143c:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800143e:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001440:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001442:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001446:	bf0c      	ite	eq
 8001448:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800144a:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800144c:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800144e:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001450:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001454:	bf0c      	ite	eq
 8001456:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001458:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800145a:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800145c:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800145e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001460:	bf54      	ite	pl
 8001462:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001464:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001466:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001468:	3301      	adds	r3, #1
 800146a:	2b10      	cmp	r3, #16
 800146c:	f47f af47 	bne.w	80012fe <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001470:	b005      	add	sp, #20
 8001472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001476:	465d      	mov	r5, fp
 8001478:	e7d5      	b.n	8001426 <HAL_GPIO_Init+0x13e>
 800147a:	2501      	movs	r5, #1
 800147c:	e7d3      	b.n	8001426 <HAL_GPIO_Init+0x13e>
 800147e:	2502      	movs	r5, #2
 8001480:	e7d1      	b.n	8001426 <HAL_GPIO_Init+0x13e>
 8001482:	2503      	movs	r5, #3
 8001484:	e7cf      	b.n	8001426 <HAL_GPIO_Init+0x13e>
 8001486:	bf00      	nop
 8001488:	40013c00 	.word	0x40013c00
 800148c:	40020000 	.word	0x40020000
 8001490:	40023800 	.word	0x40023800

08001494 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001498:	4c37      	ldr	r4, [pc, #220]	; (8001578 <HAL_GPIO_DeInit+0xe4>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 800149a:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800149c:	f04f 0a01 	mov.w	sl, #1
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80014a0:	f04f 080f 	mov.w	r8, #15
        EXTI->FTSR &= ~((uint32_t)iocurrent);
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014a4:	f04f 0b03 	mov.w	fp, #3
    ioposition = 0x01U << position;
 80014a8:	fa0a fe03 	lsl.w	lr, sl, r3
    iocurrent = (GPIO_Pin) & ioposition;
 80014ac:	ea0e 0201 	and.w	r2, lr, r1
    if(iocurrent == ioposition)
 80014b0:	4596      	cmp	lr, r2
 80014b2:	d153      	bne.n	800155c <HAL_GPIO_DeInit+0xc8>
 80014b4:	f023 0503 	bic.w	r5, r3, #3
 80014b8:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80014bc:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80014c0:	f003 0703 	and.w	r7, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2U];
 80014c4:	68ae      	ldr	r6, [r5, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80014c6:	00bf      	lsls	r7, r7, #2
 80014c8:	fa08 f907 	lsl.w	r9, r8, r7
 80014cc:	ea06 0c09 	and.w	ip, r6, r9
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80014d0:	4e2a      	ldr	r6, [pc, #168]	; (800157c <HAL_GPIO_DeInit+0xe8>)
 80014d2:	42b0      	cmp	r0, r6
 80014d4:	d047      	beq.n	8001566 <HAL_GPIO_DeInit+0xd2>
 80014d6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80014da:	42b0      	cmp	r0, r6
 80014dc:	d045      	beq.n	800156a <HAL_GPIO_DeInit+0xd6>
 80014de:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80014e2:	42b0      	cmp	r0, r6
 80014e4:	d043      	beq.n	800156e <HAL_GPIO_DeInit+0xda>
 80014e6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80014ea:	42b0      	cmp	r0, r6
 80014ec:	d041      	beq.n	8001572 <HAL_GPIO_DeInit+0xde>
 80014ee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80014f2:	42b0      	cmp	r0, r6
 80014f4:	bf0c      	ite	eq
 80014f6:	2604      	moveq	r6, #4
 80014f8:	2607      	movne	r6, #7
 80014fa:	40be      	lsls	r6, r7
 80014fc:	45b4      	cmp	ip, r6
 80014fe:	d110      	bne.n	8001522 <HAL_GPIO_DeInit+0x8e>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001500:	68ae      	ldr	r6, [r5, #8]
 8001502:	ea26 0609 	bic.w	r6, r6, r9
 8001506:	60ae      	str	r6, [r5, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001508:	6825      	ldr	r5, [r4, #0]
 800150a:	43d2      	mvns	r2, r2
 800150c:	4015      	ands	r5, r2
 800150e:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001510:	6865      	ldr	r5, [r4, #4]
 8001512:	4015      	ands	r5, r2
 8001514:	6065      	str	r5, [r4, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001516:	68a5      	ldr	r5, [r4, #8]
 8001518:	4015      	ands	r5, r2
 800151a:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800151c:	68e5      	ldr	r5, [r4, #12]
 800151e:	402a      	ands	r2, r5
 8001520:	60e2      	str	r2, [r4, #12]
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001522:	005a      	lsls	r2, r3, #1
 8001524:	6805      	ldr	r5, [r0, #0]
 8001526:	fa0b f202 	lsl.w	r2, fp, r2
 800152a:	43d2      	mvns	r2, r2

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800152c:	08de      	lsrs	r6, r3, #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800152e:	4015      	ands	r5, r2
 8001530:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8001534:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001536:	f003 0507 	and.w	r5, r3, #7
 800153a:	6a37      	ldr	r7, [r6, #32]
 800153c:	00ad      	lsls	r5, r5, #2
 800153e:	fa08 f505 	lsl.w	r5, r8, r5
 8001542:	ea27 0505 	bic.w	r5, r7, r5
 8001546:	6235      	str	r5, [r6, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001548:	6885      	ldr	r5, [r0, #8]
 800154a:	4015      	ands	r5, r2
 800154c:	6085      	str	r5, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800154e:	6845      	ldr	r5, [r0, #4]
 8001550:	ea25 050e 	bic.w	r5, r5, lr
 8001554:	6045      	str	r5, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001556:	68c5      	ldr	r5, [r0, #12]
 8001558:	402a      	ands	r2, r5
 800155a:	60c2      	str	r2, [r0, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800155c:	3301      	adds	r3, #1
 800155e:	2b10      	cmp	r3, #16
 8001560:	d1a2      	bne.n	80014a8 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8001562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001566:	2600      	movs	r6, #0
 8001568:	e7c7      	b.n	80014fa <HAL_GPIO_DeInit+0x66>
 800156a:	2601      	movs	r6, #1
 800156c:	e7c5      	b.n	80014fa <HAL_GPIO_DeInit+0x66>
 800156e:	2602      	movs	r6, #2
 8001570:	e7c3      	b.n	80014fa <HAL_GPIO_DeInit+0x66>
 8001572:	2603      	movs	r6, #3
 8001574:	e7c1      	b.n	80014fa <HAL_GPIO_DeInit+0x66>
 8001576:	bf00      	nop
 8001578:	40013c00 	.word	0x40013c00
 800157c:	40020000 	.word	0x40020000

08001580 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001580:	6903      	ldr	r3, [r0, #16]
 8001582:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001584:	bf14      	ite	ne
 8001586:	2001      	movne	r0, #1
 8001588:	2000      	moveq	r0, #0
 800158a:	4770      	bx	lr

0800158c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800158c:	b10a      	cbz	r2, 8001592 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800158e:	6181      	str	r1, [r0, #24]
 8001590:	4770      	bx	lr
 8001592:	0409      	lsls	r1, r1, #16
 8001594:	e7fb      	b.n	800158e <HAL_GPIO_WritePin+0x2>
	...

08001598 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001598:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800159a:	4b04      	ldr	r3, [pc, #16]	; (80015ac <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800159c:	6959      	ldr	r1, [r3, #20]
 800159e:	4201      	tst	r1, r0
 80015a0:	d002      	beq.n	80015a8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015a2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015a4:	f002 fa08 	bl	80039b8 <HAL_GPIO_EXTI_Callback>
 80015a8:	bd08      	pop	{r3, pc}
 80015aa:	bf00      	nop
 80015ac:	40013c00 	.word	0x40013c00

080015b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b4:	4604      	mov	r4, r0
 80015b6:	b918      	cbnz	r0, 80015c0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80015b8:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80015ba:	b002      	add	sp, #8
 80015bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c0:	6803      	ldr	r3, [r0, #0]
 80015c2:	07dd      	lsls	r5, r3, #31
 80015c4:	d410      	bmi.n	80015e8 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015c6:	6823      	ldr	r3, [r4, #0]
 80015c8:	0798      	lsls	r0, r3, #30
 80015ca:	d458      	bmi.n	800167e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015cc:	6823      	ldr	r3, [r4, #0]
 80015ce:	071a      	lsls	r2, r3, #28
 80015d0:	f100 809a 	bmi.w	8001708 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d4:	6823      	ldr	r3, [r4, #0]
 80015d6:	075b      	lsls	r3, r3, #29
 80015d8:	f100 80b8 	bmi.w	800174c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015dc:	69a2      	ldr	r2, [r4, #24]
 80015de:	2a00      	cmp	r2, #0
 80015e0:	f040 8119 	bne.w	8001816 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80015e4:	2000      	movs	r0, #0
 80015e6:	e7e8      	b.n	80015ba <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015e8:	4ba6      	ldr	r3, [pc, #664]	; (8001884 <HAL_RCC_OscConfig+0x2d4>)
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	f002 020c 	and.w	r2, r2, #12
 80015f0:	2a04      	cmp	r2, #4
 80015f2:	d007      	beq.n	8001604 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015fa:	2a08      	cmp	r2, #8
 80015fc:	d10a      	bne.n	8001614 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	0259      	lsls	r1, r3, #9
 8001602:	d507      	bpl.n	8001614 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001604:	4b9f      	ldr	r3, [pc, #636]	; (8001884 <HAL_RCC_OscConfig+0x2d4>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	039a      	lsls	r2, r3, #14
 800160a:	d5dc      	bpl.n	80015c6 <HAL_RCC_OscConfig+0x16>
 800160c:	6863      	ldr	r3, [r4, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1d9      	bne.n	80015c6 <HAL_RCC_OscConfig+0x16>
 8001612:	e7d1      	b.n	80015b8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001614:	6863      	ldr	r3, [r4, #4]
 8001616:	4d9b      	ldr	r5, [pc, #620]	; (8001884 <HAL_RCC_OscConfig+0x2d4>)
 8001618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800161c:	d111      	bne.n	8001642 <HAL_RCC_OscConfig+0x92>
 800161e:	682b      	ldr	r3, [r5, #0]
 8001620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001624:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001626:	f7ff fdd3 	bl	80011d0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162a:	4d96      	ldr	r5, [pc, #600]	; (8001884 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800162c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162e:	682b      	ldr	r3, [r5, #0]
 8001630:	039b      	lsls	r3, r3, #14
 8001632:	d4c8      	bmi.n	80015c6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001634:	f7ff fdcc 	bl	80011d0 <HAL_GetTick>
 8001638:	1b80      	subs	r0, r0, r6
 800163a:	2864      	cmp	r0, #100	; 0x64
 800163c:	d9f7      	bls.n	800162e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800163e:	2003      	movs	r0, #3
 8001640:	e7bb      	b.n	80015ba <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001642:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001646:	d104      	bne.n	8001652 <HAL_RCC_OscConfig+0xa2>
 8001648:	682b      	ldr	r3, [r5, #0]
 800164a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800164e:	602b      	str	r3, [r5, #0]
 8001650:	e7e5      	b.n	800161e <HAL_RCC_OscConfig+0x6e>
 8001652:	682a      	ldr	r2, [r5, #0]
 8001654:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001658:	602a      	str	r2, [r5, #0]
 800165a:	682a      	ldr	r2, [r5, #0]
 800165c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001660:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1df      	bne.n	8001626 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001666:	f7ff fdb3 	bl	80011d0 <HAL_GetTick>
 800166a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166c:	682b      	ldr	r3, [r5, #0]
 800166e:	039f      	lsls	r7, r3, #14
 8001670:	d5a9      	bpl.n	80015c6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001672:	f7ff fdad 	bl	80011d0 <HAL_GetTick>
 8001676:	1b80      	subs	r0, r0, r6
 8001678:	2864      	cmp	r0, #100	; 0x64
 800167a:	d9f7      	bls.n	800166c <HAL_RCC_OscConfig+0xbc>
 800167c:	e7df      	b.n	800163e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800167e:	4b81      	ldr	r3, [pc, #516]	; (8001884 <HAL_RCC_OscConfig+0x2d4>)
 8001680:	689a      	ldr	r2, [r3, #8]
 8001682:	f012 0f0c 	tst.w	r2, #12
 8001686:	d007      	beq.n	8001698 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800168e:	2a08      	cmp	r2, #8
 8001690:	d111      	bne.n	80016b6 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	025e      	lsls	r6, r3, #9
 8001696:	d40e      	bmi.n	80016b6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001698:	4b7a      	ldr	r3, [pc, #488]	; (8001884 <HAL_RCC_OscConfig+0x2d4>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	0795      	lsls	r5, r2, #30
 800169e:	d502      	bpl.n	80016a6 <HAL_RCC_OscConfig+0xf6>
 80016a0:	68e2      	ldr	r2, [r4, #12]
 80016a2:	2a01      	cmp	r2, #1
 80016a4:	d188      	bne.n	80015b8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	6921      	ldr	r1, [r4, #16]
 80016aa:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80016ae:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80016b2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b4:	e78a      	b.n	80015cc <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016b6:	68e2      	ldr	r2, [r4, #12]
 80016b8:	4b73      	ldr	r3, [pc, #460]	; (8001888 <HAL_RCC_OscConfig+0x2d8>)
 80016ba:	b1b2      	cbz	r2, 80016ea <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80016bc:	2201      	movs	r2, #1
 80016be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016c0:	f7ff fd86 	bl	80011d0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c4:	4d6f      	ldr	r5, [pc, #444]	; (8001884 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80016c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c8:	682b      	ldr	r3, [r5, #0]
 80016ca:	0798      	lsls	r0, r3, #30
 80016cc:	d507      	bpl.n	80016de <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ce:	682b      	ldr	r3, [r5, #0]
 80016d0:	6922      	ldr	r2, [r4, #16]
 80016d2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80016d6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80016da:	602b      	str	r3, [r5, #0]
 80016dc:	e776      	b.n	80015cc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016de:	f7ff fd77 	bl	80011d0 <HAL_GetTick>
 80016e2:	1b80      	subs	r0, r0, r6
 80016e4:	2802      	cmp	r0, #2
 80016e6:	d9ef      	bls.n	80016c8 <HAL_RCC_OscConfig+0x118>
 80016e8:	e7a9      	b.n	800163e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80016ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80016ec:	f7ff fd70 	bl	80011d0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f0:	4d64      	ldr	r5, [pc, #400]	; (8001884 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80016f2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f4:	682b      	ldr	r3, [r5, #0]
 80016f6:	0799      	lsls	r1, r3, #30
 80016f8:	f57f af68 	bpl.w	80015cc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016fc:	f7ff fd68 	bl	80011d0 <HAL_GetTick>
 8001700:	1b80      	subs	r0, r0, r6
 8001702:	2802      	cmp	r0, #2
 8001704:	d9f6      	bls.n	80016f4 <HAL_RCC_OscConfig+0x144>
 8001706:	e79a      	b.n	800163e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001708:	6962      	ldr	r2, [r4, #20]
 800170a:	4b60      	ldr	r3, [pc, #384]	; (800188c <HAL_RCC_OscConfig+0x2dc>)
 800170c:	b17a      	cbz	r2, 800172e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800170e:	2201      	movs	r2, #1
 8001710:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001712:	f7ff fd5d 	bl	80011d0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001716:	4d5b      	ldr	r5, [pc, #364]	; (8001884 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001718:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800171c:	079f      	lsls	r7, r3, #30
 800171e:	f53f af59 	bmi.w	80015d4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001722:	f7ff fd55 	bl	80011d0 <HAL_GetTick>
 8001726:	1b80      	subs	r0, r0, r6
 8001728:	2802      	cmp	r0, #2
 800172a:	d9f6      	bls.n	800171a <HAL_RCC_OscConfig+0x16a>
 800172c:	e787      	b.n	800163e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800172e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001730:	f7ff fd4e 	bl	80011d0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001734:	4d53      	ldr	r5, [pc, #332]	; (8001884 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001736:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001738:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800173a:	0798      	lsls	r0, r3, #30
 800173c:	f57f af4a 	bpl.w	80015d4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001740:	f7ff fd46 	bl	80011d0 <HAL_GetTick>
 8001744:	1b80      	subs	r0, r0, r6
 8001746:	2802      	cmp	r0, #2
 8001748:	d9f6      	bls.n	8001738 <HAL_RCC_OscConfig+0x188>
 800174a:	e778      	b.n	800163e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800174c:	4b4d      	ldr	r3, [pc, #308]	; (8001884 <HAL_RCC_OscConfig+0x2d4>)
 800174e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001750:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001754:	d128      	bne.n	80017a8 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	9201      	str	r2, [sp, #4]
 8001758:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800175a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800175e:	641a      	str	r2, [r3, #64]	; 0x40
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	9301      	str	r3, [sp, #4]
 8001768:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800176a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176c:	4d48      	ldr	r5, [pc, #288]	; (8001890 <HAL_RCC_OscConfig+0x2e0>)
 800176e:	682b      	ldr	r3, [r5, #0]
 8001770:	05d9      	lsls	r1, r3, #23
 8001772:	d51b      	bpl.n	80017ac <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001774:	68a3      	ldr	r3, [r4, #8]
 8001776:	4d43      	ldr	r5, [pc, #268]	; (8001884 <HAL_RCC_OscConfig+0x2d4>)
 8001778:	2b01      	cmp	r3, #1
 800177a:	d127      	bne.n	80017cc <HAL_RCC_OscConfig+0x21c>
 800177c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001784:	f7ff fd24 	bl	80011d0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001788:	4d3e      	ldr	r5, [pc, #248]	; (8001884 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800178a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800178c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001790:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001792:	079b      	lsls	r3, r3, #30
 8001794:	d539      	bpl.n	800180a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001796:	2e00      	cmp	r6, #0
 8001798:	f43f af20 	beq.w	80015dc <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800179c:	4a39      	ldr	r2, [pc, #228]	; (8001884 <HAL_RCC_OscConfig+0x2d4>)
 800179e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80017a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017a4:	6413      	str	r3, [r2, #64]	; 0x40
 80017a6:	e719      	b.n	80015dc <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80017a8:	2600      	movs	r6, #0
 80017aa:	e7df      	b.n	800176c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ac:	682b      	ldr	r3, [r5, #0]
 80017ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80017b4:	f7ff fd0c 	bl	80011d0 <HAL_GetTick>
 80017b8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ba:	682b      	ldr	r3, [r5, #0]
 80017bc:	05da      	lsls	r2, r3, #23
 80017be:	d4d9      	bmi.n	8001774 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c0:	f7ff fd06 	bl	80011d0 <HAL_GetTick>
 80017c4:	1bc0      	subs	r0, r0, r7
 80017c6:	2802      	cmp	r0, #2
 80017c8:	d9f7      	bls.n	80017ba <HAL_RCC_OscConfig+0x20a>
 80017ca:	e738      	b.n	800163e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017cc:	2b05      	cmp	r3, #5
 80017ce:	d104      	bne.n	80017da <HAL_RCC_OscConfig+0x22a>
 80017d0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80017d2:	f043 0304 	orr.w	r3, r3, #4
 80017d6:	672b      	str	r3, [r5, #112]	; 0x70
 80017d8:	e7d0      	b.n	800177c <HAL_RCC_OscConfig+0x1cc>
 80017da:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80017dc:	f022 0201 	bic.w	r2, r2, #1
 80017e0:	672a      	str	r2, [r5, #112]	; 0x70
 80017e2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80017e4:	f022 0204 	bic.w	r2, r2, #4
 80017e8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1ca      	bne.n	8001784 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80017ee:	f7ff fcef 	bl	80011d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017f2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80017f6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80017fa:	0798      	lsls	r0, r3, #30
 80017fc:	d5cb      	bpl.n	8001796 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017fe:	f7ff fce7 	bl	80011d0 <HAL_GetTick>
 8001802:	1bc0      	subs	r0, r0, r7
 8001804:	4540      	cmp	r0, r8
 8001806:	d9f7      	bls.n	80017f8 <HAL_RCC_OscConfig+0x248>
 8001808:	e719      	b.n	800163e <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800180a:	f7ff fce1 	bl	80011d0 <HAL_GetTick>
 800180e:	1bc0      	subs	r0, r0, r7
 8001810:	4540      	cmp	r0, r8
 8001812:	d9bd      	bls.n	8001790 <HAL_RCC_OscConfig+0x1e0>
 8001814:	e713      	b.n	800163e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001816:	4d1b      	ldr	r5, [pc, #108]	; (8001884 <HAL_RCC_OscConfig+0x2d4>)
 8001818:	68ab      	ldr	r3, [r5, #8]
 800181a:	f003 030c 	and.w	r3, r3, #12
 800181e:	2b08      	cmp	r3, #8
 8001820:	f43f aeca 	beq.w	80015b8 <HAL_RCC_OscConfig+0x8>
 8001824:	4e1b      	ldr	r6, [pc, #108]	; (8001894 <HAL_RCC_OscConfig+0x2e4>)
 8001826:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001828:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800182a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800182c:	d134      	bne.n	8001898 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 800182e:	f7ff fccf 	bl	80011d0 <HAL_GetTick>
 8001832:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001834:	682b      	ldr	r3, [r5, #0]
 8001836:	0199      	lsls	r1, r3, #6
 8001838:	d41e      	bmi.n	8001878 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800183a:	6a22      	ldr	r2, [r4, #32]
 800183c:	69e3      	ldr	r3, [r4, #28]
 800183e:	4313      	orrs	r3, r2
 8001840:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001842:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001846:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001848:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800184c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184e:	4c0d      	ldr	r4, [pc, #52]	; (8001884 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001850:	0852      	lsrs	r2, r2, #1
 8001852:	3a01      	subs	r2, #1
 8001854:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001858:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800185a:	2301      	movs	r3, #1
 800185c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800185e:	f7ff fcb7 	bl	80011d0 <HAL_GetTick>
 8001862:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001864:	6823      	ldr	r3, [r4, #0]
 8001866:	019a      	lsls	r2, r3, #6
 8001868:	f53f aebc 	bmi.w	80015e4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800186c:	f7ff fcb0 	bl	80011d0 <HAL_GetTick>
 8001870:	1b40      	subs	r0, r0, r5
 8001872:	2802      	cmp	r0, #2
 8001874:	d9f6      	bls.n	8001864 <HAL_RCC_OscConfig+0x2b4>
 8001876:	e6e2      	b.n	800163e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff fcaa 	bl	80011d0 <HAL_GetTick>
 800187c:	1bc0      	subs	r0, r0, r7
 800187e:	2802      	cmp	r0, #2
 8001880:	d9d8      	bls.n	8001834 <HAL_RCC_OscConfig+0x284>
 8001882:	e6dc      	b.n	800163e <HAL_RCC_OscConfig+0x8e>
 8001884:	40023800 	.word	0x40023800
 8001888:	42470000 	.word	0x42470000
 800188c:	42470e80 	.word	0x42470e80
 8001890:	40007000 	.word	0x40007000
 8001894:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001898:	f7ff fc9a 	bl	80011d0 <HAL_GetTick>
 800189c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189e:	682b      	ldr	r3, [r5, #0]
 80018a0:	019b      	lsls	r3, r3, #6
 80018a2:	f57f ae9f 	bpl.w	80015e4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a6:	f7ff fc93 	bl	80011d0 <HAL_GetTick>
 80018aa:	1b00      	subs	r0, r0, r4
 80018ac:	2802      	cmp	r0, #2
 80018ae:	d9f6      	bls.n	800189e <HAL_RCC_OscConfig+0x2ee>
 80018b0:	e6c5      	b.n	800163e <HAL_RCC_OscConfig+0x8e>
 80018b2:	bf00      	nop

080018b4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018b4:	4913      	ldr	r1, [pc, #76]	; (8001904 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80018b6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018b8:	688b      	ldr	r3, [r1, #8]
 80018ba:	f003 030c 	and.w	r3, r3, #12
 80018be:	2b04      	cmp	r3, #4
 80018c0:	d003      	beq.n	80018ca <HAL_RCC_GetSysClockFreq+0x16>
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d003      	beq.n	80018ce <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018c6:	4810      	ldr	r0, [pc, #64]	; (8001908 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80018c8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80018ca:	4810      	ldr	r0, [pc, #64]	; (800190c <HAL_RCC_GetSysClockFreq+0x58>)
 80018cc:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018ce:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018d0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018d4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d8:	bf14      	ite	ne
 80018da:	480c      	ldrne	r0, [pc, #48]	; (800190c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018dc:	480a      	ldreq	r0, [pc, #40]	; (8001908 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018de:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80018e2:	bf18      	it	ne
 80018e4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018e6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ea:	fba1 0100 	umull	r0, r1, r1, r0
 80018ee:	f7fe fc77 	bl	80001e0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018f2:	4b04      	ldr	r3, [pc, #16]	; (8001904 <HAL_RCC_GetSysClockFreq+0x50>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80018fa:	3301      	adds	r3, #1
 80018fc:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80018fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8001902:	bd08      	pop	{r3, pc}
 8001904:	40023800 	.word	0x40023800
 8001908:	00f42400 	.word	0x00f42400
 800190c:	007a1200 	.word	0x007a1200

08001910 <HAL_RCC_ClockConfig>:
{
 8001910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001914:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001916:	4604      	mov	r4, r0
 8001918:	b910      	cbnz	r0, 8001920 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800191a:	2001      	movs	r0, #1
 800191c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001920:	4b44      	ldr	r3, [pc, #272]	; (8001a34 <HAL_RCC_ClockConfig+0x124>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	f002 020f 	and.w	r2, r2, #15
 8001928:	428a      	cmp	r2, r1
 800192a:	d328      	bcc.n	800197e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800192c:	6821      	ldr	r1, [r4, #0]
 800192e:	078f      	lsls	r7, r1, #30
 8001930:	d42d      	bmi.n	800198e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001932:	07c8      	lsls	r0, r1, #31
 8001934:	d440      	bmi.n	80019b8 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001936:	4b3f      	ldr	r3, [pc, #252]	; (8001a34 <HAL_RCC_ClockConfig+0x124>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	f002 020f 	and.w	r2, r2, #15
 800193e:	4295      	cmp	r5, r2
 8001940:	d366      	bcc.n	8001a10 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001942:	6822      	ldr	r2, [r4, #0]
 8001944:	0751      	lsls	r1, r2, #29
 8001946:	d46c      	bmi.n	8001a22 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001948:	0713      	lsls	r3, r2, #28
 800194a:	d507      	bpl.n	800195c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800194c:	4a3a      	ldr	r2, [pc, #232]	; (8001a38 <HAL_RCC_ClockConfig+0x128>)
 800194e:	6921      	ldr	r1, [r4, #16]
 8001950:	6893      	ldr	r3, [r2, #8]
 8001952:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001956:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800195a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800195c:	f7ff ffaa 	bl	80018b4 <HAL_RCC_GetSysClockFreq>
 8001960:	4b35      	ldr	r3, [pc, #212]	; (8001a38 <HAL_RCC_ClockConfig+0x128>)
 8001962:	4a36      	ldr	r2, [pc, #216]	; (8001a3c <HAL_RCC_ClockConfig+0x12c>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800196a:	5cd3      	ldrb	r3, [r2, r3]
 800196c:	40d8      	lsrs	r0, r3
 800196e:	4b34      	ldr	r3, [pc, #208]	; (8001a40 <HAL_RCC_ClockConfig+0x130>)
 8001970:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001972:	2000      	movs	r0, #0
 8001974:	f002 f832 	bl	80039dc <HAL_InitTick>
  return HAL_OK;
 8001978:	2000      	movs	r0, #0
 800197a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197e:	b2ca      	uxtb	r2, r1
 8001980:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 030f 	and.w	r3, r3, #15
 8001988:	4299      	cmp	r1, r3
 800198a:	d1c6      	bne.n	800191a <HAL_RCC_ClockConfig+0xa>
 800198c:	e7ce      	b.n	800192c <HAL_RCC_ClockConfig+0x1c>
 800198e:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001990:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001994:	bf1e      	ittt	ne
 8001996:	689a      	ldrne	r2, [r3, #8]
 8001998:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800199c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800199e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019a0:	bf42      	ittt	mi
 80019a2:	689a      	ldrmi	r2, [r3, #8]
 80019a4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80019a8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	68a0      	ldr	r0, [r4, #8]
 80019ae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80019b2:	4302      	orrs	r2, r0
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	e7bc      	b.n	8001932 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b8:	6862      	ldr	r2, [r4, #4]
 80019ba:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <HAL_RCC_ClockConfig+0x128>)
 80019bc:	2a01      	cmp	r2, #1
 80019be:	d11d      	bne.n	80019fc <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c6:	d0a8      	beq.n	800191a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019c8:	4e1b      	ldr	r6, [pc, #108]	; (8001a38 <HAL_RCC_ClockConfig+0x128>)
 80019ca:	68b3      	ldr	r3, [r6, #8]
 80019cc:	f023 0303 	bic.w	r3, r3, #3
 80019d0:	4313      	orrs	r3, r2
 80019d2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80019d4:	f7ff fbfc 	bl	80011d0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80019dc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019de:	68b3      	ldr	r3, [r6, #8]
 80019e0:	6862      	ldr	r2, [r4, #4]
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80019ea:	d0a4      	beq.n	8001936 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ec:	f7ff fbf0 	bl	80011d0 <HAL_GetTick>
 80019f0:	1bc0      	subs	r0, r0, r7
 80019f2:	4540      	cmp	r0, r8
 80019f4:	d9f3      	bls.n	80019de <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80019f6:	2003      	movs	r0, #3
}
 80019f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019fc:	1e91      	subs	r1, r2, #2
 80019fe:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a00:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a02:	d802      	bhi.n	8001a0a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a04:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001a08:	e7dd      	b.n	80019c6 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0a:	f013 0f02 	tst.w	r3, #2
 8001a0e:	e7da      	b.n	80019c6 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a10:	b2ea      	uxtb	r2, r5
 8001a12:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	429d      	cmp	r5, r3
 8001a1c:	f47f af7d 	bne.w	800191a <HAL_RCC_ClockConfig+0xa>
 8001a20:	e78f      	b.n	8001942 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a22:	4905      	ldr	r1, [pc, #20]	; (8001a38 <HAL_RCC_ClockConfig+0x128>)
 8001a24:	68e0      	ldr	r0, [r4, #12]
 8001a26:	688b      	ldr	r3, [r1, #8]
 8001a28:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001a2c:	4303      	orrs	r3, r0
 8001a2e:	608b      	str	r3, [r1, #8]
 8001a30:	e78a      	b.n	8001948 <HAL_RCC_ClockConfig+0x38>
 8001a32:	bf00      	nop
 8001a34:	40023c00 	.word	0x40023c00
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	08003da4 	.word	0x08003da4
 8001a40:	20000198 	.word	0x20000198

08001a44 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001a46:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001a4e:	5cd3      	ldrb	r3, [r2, r3]
 8001a50:	4a03      	ldr	r2, [pc, #12]	; (8001a60 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a52:	6810      	ldr	r0, [r2, #0]
}
 8001a54:	40d8      	lsrs	r0, r3
 8001a56:	4770      	bx	lr
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	08003db4 	.word	0x08003db4
 8001a60:	20000198 	.word	0x20000198

08001a64 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a64:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001a66:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001a6e:	5cd3      	ldrb	r3, [r2, r3]
 8001a70:	4a03      	ldr	r2, [pc, #12]	; (8001a80 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a72:	6810      	ldr	r0, [r2, #0]
}
 8001a74:	40d8      	lsrs	r0, r3
 8001a76:	4770      	bx	lr
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	08003db4 	.word	0x08003db4
 8001a80:	20000198 	.word	0x20000198

08001a84 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a84:	230f      	movs	r3, #15
 8001a86:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_RCC_GetClockConfig+0x34>)
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	f002 0203 	and.w	r2, r2, #3
 8001a90:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001a98:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001aa0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	08db      	lsrs	r3, r3, #3
 8001aa6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001aaa:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <HAL_RCC_GetClockConfig+0x38>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 030f 	and.w	r3, r3, #15
 8001ab4:	600b      	str	r3, [r1, #0]
 8001ab6:	4770      	bx	lr
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40023c00 	.word	0x40023c00

08001ac0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ac0:	6a03      	ldr	r3, [r0, #32]
 8001ac2:	f023 0301 	bic.w	r3, r3, #1
 8001ac6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ac8:	6a03      	ldr	r3, [r0, #32]
{
 8001aca:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001acc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ace:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ad0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ad2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001ad6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ad8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001ada:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001ade:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001ae0:	4d0a      	ldr	r5, [pc, #40]	; (8001b0c <TIM_OC1_SetConfig+0x4c>)
 8001ae2:	42a8      	cmp	r0, r5
 8001ae4:	d10b      	bne.n	8001afe <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ae6:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ae8:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001aea:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001aee:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8001af0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001af2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001af6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001af8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001afc:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001afe:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b00:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001b02:	684a      	ldr	r2, [r1, #4]
 8001b04:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b06:	6203      	str	r3, [r0, #32]
 8001b08:	bd70      	pop	{r4, r5, r6, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40010000 	.word	0x40010000

08001b10 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001b10:	6a03      	ldr	r3, [r0, #32]
 8001b12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b16:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b18:	6a03      	ldr	r3, [r0, #32]
{
 8001b1a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b1c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b1e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001b20:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001b22:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001b26:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001b28:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001b2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001b2e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001b32:	4d0b      	ldr	r5, [pc, #44]	; (8001b60 <TIM_OC3_SetConfig+0x50>)
 8001b34:	42a8      	cmp	r0, r5
 8001b36:	d10d      	bne.n	8001b54 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001b38:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001b3a:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001b3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001b40:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001b44:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001b46:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001b4a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001b4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001b50:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b54:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001b56:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001b58:	684a      	ldr	r2, [r1, #4]
 8001b5a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b5c:	6203      	str	r3, [r0, #32]
 8001b5e:	bd70      	pop	{r4, r5, r6, pc}
 8001b60:	40010000 	.word	0x40010000

08001b64 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001b64:	6a03      	ldr	r3, [r0, #32]
 8001b66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b6a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b6c:	6a03      	ldr	r3, [r0, #32]
{
 8001b6e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b70:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b72:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b74:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001b76:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b7a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001b7e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001b80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001b84:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b88:	4d06      	ldr	r5, [pc, #24]	; (8001ba4 <TIM_OC4_SetConfig+0x40>)
 8001b8a:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001b8c:	bf02      	ittt	eq
 8001b8e:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001b90:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001b94:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b98:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001b9a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001b9c:	684a      	ldr	r2, [r1, #4]
 8001b9e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ba0:	6203      	str	r3, [r0, #32]
 8001ba2:	bd30      	pop	{r4, r5, pc}
 8001ba4:	40010000 	.word	0x40010000

08001ba8 <HAL_TIM_Base_MspInit>:
 8001ba8:	4770      	bx	lr

08001baa <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001baa:	6803      	ldr	r3, [r0, #0]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	f042 0201 	orr.w	r2, r2, #1
 8001bb2:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bba:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001bbc:	bf1e      	ittt	ne
 8001bbe:	681a      	ldrne	r2, [r3, #0]
 8001bc0:	f042 0201 	orrne.w	r2, r2, #1
 8001bc4:	601a      	strne	r2, [r3, #0]
}
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	4770      	bx	lr

08001bca <HAL_TIM_PWM_DeInit>:
  htim->State = HAL_TIM_STATE_BUSY;
 8001bca:	2302      	movs	r3, #2
{
 8001bcc:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8001bce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 8001bd2:	6803      	ldr	r3, [r0, #0]
 8001bd4:	6a19      	ldr	r1, [r3, #32]
 8001bd6:	f241 1211 	movw	r2, #4369	; 0x1111
 8001bda:	4211      	tst	r1, r2
{
 8001bdc:	4604      	mov	r4, r0
  __HAL_TIM_DISABLE(htim);
 8001bde:	d108      	bne.n	8001bf2 <HAL_TIM_PWM_DeInit+0x28>
 8001be0:	6a19      	ldr	r1, [r3, #32]
 8001be2:	f240 4244 	movw	r2, #1092	; 0x444
 8001be6:	4211      	tst	r1, r2
 8001be8:	bf02      	ittt	eq
 8001bea:	681a      	ldreq	r2, [r3, #0]
 8001bec:	f022 0201 	biceq.w	r2, r2, #1
 8001bf0:	601a      	streq	r2, [r3, #0]
  HAL_TIM_PWM_MspDeInit(htim);
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f001 feb6 	bl	8003964 <HAL_TIM_PWM_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001bfe:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001c02:	bd10      	pop	{r4, pc}

08001c04 <HAL_TIM_OC_DelayElapsedCallback>:
 8001c04:	4770      	bx	lr

08001c06 <HAL_TIM_IC_CaptureCallback>:
 8001c06:	4770      	bx	lr

08001c08 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001c08:	4770      	bx	lr

08001c0a <HAL_TIM_TriggerCallback>:
 8001c0a:	4770      	bx	lr

08001c0c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c0c:	6803      	ldr	r3, [r0, #0]
 8001c0e:	691a      	ldr	r2, [r3, #16]
 8001c10:	0791      	lsls	r1, r2, #30
{
 8001c12:	b510      	push	{r4, lr}
 8001c14:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c16:	d50e      	bpl.n	8001c36 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	0792      	lsls	r2, r2, #30
 8001c1c:	d50b      	bpl.n	8001c36 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c1e:	f06f 0202 	mvn.w	r2, #2
 8001c22:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c24:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c26:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c28:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c2a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c2c:	d077      	beq.n	8001d1e <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001c2e:	f7ff ffea 	bl	8001c06 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c32:	2300      	movs	r3, #0
 8001c34:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c36:	6823      	ldr	r3, [r4, #0]
 8001c38:	691a      	ldr	r2, [r3, #16]
 8001c3a:	0750      	lsls	r0, r2, #29
 8001c3c:	d510      	bpl.n	8001c60 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	0751      	lsls	r1, r2, #29
 8001c42:	d50d      	bpl.n	8001c60 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c44:	f06f 0204 	mvn.w	r2, #4
 8001c48:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c4a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c4c:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c4e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c52:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001c54:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c56:	d068      	beq.n	8001d2a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c58:	f7ff ffd5 	bl	8001c06 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c60:	6823      	ldr	r3, [r4, #0]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	0712      	lsls	r2, r2, #28
 8001c66:	d50f      	bpl.n	8001c88 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	0710      	lsls	r0, r2, #28
 8001c6c:	d50c      	bpl.n	8001c88 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c6e:	f06f 0208 	mvn.w	r2, #8
 8001c72:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c74:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c76:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c78:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c7a:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001c7c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c7e:	d05a      	beq.n	8001d36 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c80:	f7ff ffc1 	bl	8001c06 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c84:	2300      	movs	r3, #0
 8001c86:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c88:	6823      	ldr	r3, [r4, #0]
 8001c8a:	691a      	ldr	r2, [r3, #16]
 8001c8c:	06d2      	lsls	r2, r2, #27
 8001c8e:	d510      	bpl.n	8001cb2 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	06d0      	lsls	r0, r2, #27
 8001c94:	d50d      	bpl.n	8001cb2 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c96:	f06f 0210 	mvn.w	r2, #16
 8001c9a:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c9c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c9e:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ca0:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ca4:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001ca6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ca8:	d04b      	beq.n	8001d42 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001caa:	f7ff ffac 	bl	8001c06 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cb2:	6823      	ldr	r3, [r4, #0]
 8001cb4:	691a      	ldr	r2, [r3, #16]
 8001cb6:	07d1      	lsls	r1, r2, #31
 8001cb8:	d508      	bpl.n	8001ccc <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cba:	68da      	ldr	r2, [r3, #12]
 8001cbc:	07d2      	lsls	r2, r2, #31
 8001cbe:	d505      	bpl.n	8001ccc <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cc0:	f06f 0201 	mvn.w	r2, #1
 8001cc4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	f001 fd5e 	bl	8003788 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ccc:	6823      	ldr	r3, [r4, #0]
 8001cce:	691a      	ldr	r2, [r3, #16]
 8001cd0:	0610      	lsls	r0, r2, #24
 8001cd2:	d508      	bpl.n	8001ce6 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	0611      	lsls	r1, r2, #24
 8001cd8:	d505      	bpl.n	8001ce6 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cda:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cde:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	f000 f9bc 	bl	800205e <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ce6:	6823      	ldr	r3, [r4, #0]
 8001ce8:	691a      	ldr	r2, [r3, #16]
 8001cea:	0652      	lsls	r2, r2, #25
 8001cec:	d508      	bpl.n	8001d00 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	0650      	lsls	r0, r2, #25
 8001cf2:	d505      	bpl.n	8001d00 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cf8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	f7ff ff85 	bl	8001c0a <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d00:	6823      	ldr	r3, [r4, #0]
 8001d02:	691a      	ldr	r2, [r3, #16]
 8001d04:	0691      	lsls	r1, r2, #26
 8001d06:	d522      	bpl.n	8001d4e <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	0692      	lsls	r2, r2, #26
 8001d0c:	d51f      	bpl.n	8001d4e <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d0e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8001d12:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d14:	611a      	str	r2, [r3, #16]
}
 8001d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001d1a:	f000 b99f 	b.w	800205c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1e:	f7ff ff71 	bl	8001c04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d22:	4620      	mov	r0, r4
 8001d24:	f7ff ff70 	bl	8001c08 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d28:	e783      	b.n	8001c32 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2a:	f7ff ff6b 	bl	8001c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d2e:	4620      	mov	r0, r4
 8001d30:	f7ff ff6a 	bl	8001c08 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d34:	e792      	b.n	8001c5c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d36:	f7ff ff65 	bl	8001c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	f7ff ff64 	bl	8001c08 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d40:	e7a0      	b.n	8001c84 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d42:	f7ff ff5f 	bl	8001c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d46:	4620      	mov	r0, r4
 8001d48:	f7ff ff5e 	bl	8001c08 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d4c:	e7af      	b.n	8001cae <HAL_TIM_IRQHandler+0xa2>
 8001d4e:	bd10      	pop	{r4, pc}

08001d50 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d50:	4a24      	ldr	r2, [pc, #144]	; (8001de4 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8001d52:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d54:	4290      	cmp	r0, r2
 8001d56:	d00e      	beq.n	8001d76 <TIM_Base_SetConfig+0x26>
 8001d58:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d5c:	d00b      	beq.n	8001d76 <TIM_Base_SetConfig+0x26>
 8001d5e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001d62:	4290      	cmp	r0, r2
 8001d64:	d007      	beq.n	8001d76 <TIM_Base_SetConfig+0x26>
 8001d66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d6a:	4290      	cmp	r0, r2
 8001d6c:	d003      	beq.n	8001d76 <TIM_Base_SetConfig+0x26>
 8001d6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d72:	4290      	cmp	r0, r2
 8001d74:	d115      	bne.n	8001da2 <TIM_Base_SetConfig+0x52>
    tmpcr1 |= Structure->CounterMode;
 8001d76:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001d7c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d7e:	4a19      	ldr	r2, [pc, #100]	; (8001de4 <TIM_Base_SetConfig+0x94>)
 8001d80:	4290      	cmp	r0, r2
 8001d82:	d019      	beq.n	8001db8 <TIM_Base_SetConfig+0x68>
 8001d84:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d88:	d016      	beq.n	8001db8 <TIM_Base_SetConfig+0x68>
 8001d8a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001d8e:	4290      	cmp	r0, r2
 8001d90:	d012      	beq.n	8001db8 <TIM_Base_SetConfig+0x68>
 8001d92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d96:	4290      	cmp	r0, r2
 8001d98:	d00e      	beq.n	8001db8 <TIM_Base_SetConfig+0x68>
 8001d9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d9e:	4290      	cmp	r0, r2
 8001da0:	d00a      	beq.n	8001db8 <TIM_Base_SetConfig+0x68>
 8001da2:	4a11      	ldr	r2, [pc, #68]	; (8001de8 <TIM_Base_SetConfig+0x98>)
 8001da4:	4290      	cmp	r0, r2
 8001da6:	d007      	beq.n	8001db8 <TIM_Base_SetConfig+0x68>
 8001da8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dac:	4290      	cmp	r0, r2
 8001dae:	d003      	beq.n	8001db8 <TIM_Base_SetConfig+0x68>
 8001db0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001db4:	4290      	cmp	r0, r2
 8001db6:	d103      	bne.n	8001dc0 <TIM_Base_SetConfig+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001db8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dbe:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dc0:	694a      	ldr	r2, [r1, #20]
 8001dc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dc6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001dc8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dca:	688b      	ldr	r3, [r1, #8]
 8001dcc:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001dce:	680b      	ldr	r3, [r1, #0]
 8001dd0:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dd2:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <TIM_Base_SetConfig+0x94>)
 8001dd4:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001dd6:	bf04      	itt	eq
 8001dd8:	690b      	ldreq	r3, [r1, #16]
 8001dda:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	6143      	str	r3, [r0, #20]
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40010000 	.word	0x40010000
 8001de8:	40014000 	.word	0x40014000

08001dec <HAL_TIM_Base_Init>:
{
 8001dec:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001dee:	4604      	mov	r4, r0
 8001df0:	b1a0      	cbz	r0, 8001e1c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001df2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001df6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001dfa:	b91b      	cbnz	r3, 8001e04 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001dfc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001e00:	f7ff fed2 	bl	8001ba8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001e04:	2302      	movs	r3, #2
 8001e06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e0a:	6820      	ldr	r0, [r4, #0]
 8001e0c:	1d21      	adds	r1, r4, #4
 8001e0e:	f7ff ff9f 	bl	8001d50 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001e12:	2301      	movs	r3, #1
 8001e14:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001e18:	2000      	movs	r0, #0
 8001e1a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e1c:	2001      	movs	r0, #1
}
 8001e1e:	bd10      	pop	{r4, pc}

08001e20 <HAL_TIM_PWM_Init>:
{
 8001e20:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001e22:	4604      	mov	r4, r0
 8001e24:	b1a0      	cbz	r0, 8001e50 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001e26:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e2a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e2e:	b91b      	cbnz	r3, 8001e38 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001e30:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001e34:	f001 fd26 	bl	8003884 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e3e:	6820      	ldr	r0, [r4, #0]
 8001e40:	1d21      	adds	r1, r4, #4
 8001e42:	f7ff ff85 	bl	8001d50 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001e46:	2301      	movs	r3, #1
 8001e48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e50:	2001      	movs	r0, #1
}
 8001e52:	bd10      	pop	{r4, pc}

08001e54 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e54:	6a03      	ldr	r3, [r0, #32]
 8001e56:	f023 0310 	bic.w	r3, r3, #16
 8001e5a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001e5c:	6a03      	ldr	r3, [r0, #32]
{
 8001e5e:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8001e60:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001e62:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e64:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e66:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e6a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e6e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001e70:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e74:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001e78:	4d0b      	ldr	r5, [pc, #44]	; (8001ea8 <TIM_OC2_SetConfig+0x54>)
 8001e7a:	42a8      	cmp	r0, r5
 8001e7c:	d10d      	bne.n	8001e9a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e7e:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e80:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e86:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001e8a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e8c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e90:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e96:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001e9a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001e9c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001e9e:	684a      	ldr	r2, [r1, #4]
 8001ea0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001ea2:	6203      	str	r3, [r0, #32]
 8001ea4:	bd70      	pop	{r4, r5, r6, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40010000 	.word	0x40010000

08001eac <HAL_TIM_PWM_ConfigChannel>:
{
 8001eac:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001eae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001eb2:	2b01      	cmp	r3, #1
{
 8001eb4:	4604      	mov	r4, r0
 8001eb6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001eba:	d025      	beq.n	8001f08 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8001ec6:	2a0c      	cmp	r2, #12
 8001ec8:	d818      	bhi.n	8001efc <HAL_TIM_PWM_ConfigChannel+0x50>
 8001eca:	e8df f002 	tbb	[pc, r2]
 8001ece:	1707      	.short	0x1707
 8001ed0:	171e1717 	.word	0x171e1717
 8001ed4:	172f1717 	.word	0x172f1717
 8001ed8:	1717      	.short	0x1717
 8001eda:	40          	.byte	0x40
 8001edb:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001edc:	6820      	ldr	r0, [r4, #0]
 8001ede:	f7ff fdef 	bl	8001ac0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ee2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ee4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ee6:	699a      	ldr	r2, [r3, #24]
 8001ee8:	f042 0208 	orr.w	r2, r2, #8
 8001eec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001eee:	699a      	ldr	r2, [r3, #24]
 8001ef0:	f022 0204 	bic.w	r2, r2, #4
 8001ef4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ef6:	699a      	ldr	r2, [r3, #24]
 8001ef8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001efa:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001efc:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001efe:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001f00:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001f04:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001f08:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f0a:	6820      	ldr	r0, [r4, #0]
 8001f0c:	f7ff ffa2 	bl	8001e54 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f10:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f12:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f14:	699a      	ldr	r2, [r3, #24]
 8001f16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f1c:	699a      	ldr	r2, [r3, #24]
 8001f1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f24:	699a      	ldr	r2, [r3, #24]
 8001f26:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f2a:	e7e6      	b.n	8001efa <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f2c:	6820      	ldr	r0, [r4, #0]
 8001f2e:	f7ff fdef 	bl	8001b10 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f32:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f34:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f36:	69da      	ldr	r2, [r3, #28]
 8001f38:	f042 0208 	orr.w	r2, r2, #8
 8001f3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f3e:	69da      	ldr	r2, [r3, #28]
 8001f40:	f022 0204 	bic.w	r2, r2, #4
 8001f44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f46:	69da      	ldr	r2, [r3, #28]
 8001f48:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f4a:	61da      	str	r2, [r3, #28]
      break;
 8001f4c:	e7d6      	b.n	8001efc <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f4e:	6820      	ldr	r0, [r4, #0]
 8001f50:	f7ff fe08 	bl	8001b64 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f54:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f56:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f58:	69da      	ldr	r2, [r3, #28]
 8001f5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f5e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f60:	69da      	ldr	r2, [r3, #28]
 8001f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f66:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f68:	69da      	ldr	r2, [r3, #28]
 8001f6a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f6e:	e7ec      	b.n	8001f4a <HAL_TIM_PWM_ConfigChannel+0x9e>

08001f70 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001f70:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001f72:	f001 011f 	and.w	r1, r1, #31
{
 8001f76:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001f78:	2401      	movs	r4, #1
 8001f7a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001f7c:	ea23 0304 	bic.w	r3, r3, r4
 8001f80:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001f82:	6a03      	ldr	r3, [r0, #32]
 8001f84:	408a      	lsls	r2, r1
 8001f86:	431a      	orrs	r2, r3
 8001f88:	6202      	str	r2, [r0, #32]
 8001f8a:	bd10      	pop	{r4, pc}

08001f8c <HAL_TIM_PWM_Start>:
{
 8001f8c:	b510      	push	{r4, lr}
 8001f8e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f90:	2201      	movs	r2, #1
 8001f92:	6800      	ldr	r0, [r0, #0]
 8001f94:	f7ff ffec 	bl	8001f70 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f98:	6823      	ldr	r3, [r4, #0]
 8001f9a:	4a09      	ldr	r2, [pc, #36]	; (8001fc0 <HAL_TIM_PWM_Start+0x34>)
 8001f9c:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001f9e:	bf02      	ittt	eq
 8001fa0:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001fa2:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001fa6:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fae:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001fb0:	bf1e      	ittt	ne
 8001fb2:	681a      	ldrne	r2, [r3, #0]
 8001fb4:	f042 0201 	orrne.w	r2, r2, #1
 8001fb8:	601a      	strne	r2, [r3, #0]
}
 8001fba:	2000      	movs	r0, #0
 8001fbc:	bd10      	pop	{r4, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40010000 	.word	0x40010000

08001fc4 <HAL_TIM_PWM_Stop>:
{
 8001fc4:	b510      	push	{r4, lr}
 8001fc6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	6800      	ldr	r0, [r0, #0]
 8001fcc:	f7ff ffd0 	bl	8001f70 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001fd0:	6823      	ldr	r3, [r4, #0]
 8001fd2:	4a12      	ldr	r2, [pc, #72]	; (800201c <HAL_TIM_PWM_Stop+0x58>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d10d      	bne.n	8001ff4 <HAL_TIM_PWM_Stop+0x30>
    __HAL_TIM_MOE_DISABLE(htim);
 8001fd8:	6a19      	ldr	r1, [r3, #32]
 8001fda:	f241 1211 	movw	r2, #4369	; 0x1111
 8001fde:	4211      	tst	r1, r2
 8001fe0:	d108      	bne.n	8001ff4 <HAL_TIM_PWM_Stop+0x30>
 8001fe2:	6a19      	ldr	r1, [r3, #32]
 8001fe4:	f240 4244 	movw	r2, #1092	; 0x444
 8001fe8:	4211      	tst	r1, r2
 8001fea:	bf02      	ittt	eq
 8001fec:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001fee:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 8001ff2:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8001ff4:	6a19      	ldr	r1, [r3, #32]
 8001ff6:	f241 1211 	movw	r2, #4369	; 0x1111
 8001ffa:	4211      	tst	r1, r2
 8001ffc:	d108      	bne.n	8002010 <HAL_TIM_PWM_Stop+0x4c>
 8001ffe:	6a19      	ldr	r1, [r3, #32]
 8002000:	f240 4244 	movw	r2, #1092	; 0x444
 8002004:	4211      	tst	r1, r2
 8002006:	bf02      	ittt	eq
 8002008:	681a      	ldreq	r2, [r3, #0]
 800200a:	f022 0201 	biceq.w	r2, r2, #1
 800200e:	601a      	streq	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002010:	2301      	movs	r3, #1
 8002012:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002016:	2000      	movs	r0, #0
 8002018:	bd10      	pop	{r4, pc}
 800201a:	bf00      	nop
 800201c:	40010000 	.word	0x40010000

08002020 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002020:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002024:	2b01      	cmp	r3, #1
{
 8002026:	b530      	push	{r4, r5, lr}
 8002028:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800202c:	d014      	beq.n	8002058 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800202e:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002030:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002034:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002036:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002038:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800203a:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 800203c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002040:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002044:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002046:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002048:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800204a:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800204c:	2301      	movs	r3, #1
 800204e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002052:	2300      	movs	r3, #0
 8002054:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002058:	4618      	mov	r0, r3

  return HAL_OK;
}
 800205a:	bd30      	pop	{r4, r5, pc}

0800205c <HAL_TIMEx_CommutCallback>:
 800205c:	4770      	bx	lr

0800205e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800205e:	4770      	bx	lr

08002060 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002060:	6803      	ldr	r3, [r0, #0]
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002068:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800206a:	695a      	ldr	r2, [r3, #20]
 800206c:	f022 0201 	bic.w	r2, r2, #1
 8002070:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002072:	2320      	movs	r3, #32
 8002074:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002078:	4770      	bx	lr
	...

0800207c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800207c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002080:	6806      	ldr	r6, [r0, #0]
 8002082:	68c2      	ldr	r2, [r0, #12]
 8002084:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002086:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002088:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800208c:	4313      	orrs	r3, r2
 800208e:	6133      	str	r3, [r6, #16]
{
 8002090:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002092:	6883      	ldr	r3, [r0, #8]
 8002094:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002096:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002098:	4303      	orrs	r3, r0
 800209a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800209c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020a0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80020a2:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020a6:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 80020a8:	4313      	orrs	r3, r2
 80020aa:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020ac:	6973      	ldr	r3, [r6, #20]
 80020ae:	69a2      	ldr	r2, [r4, #24]
 80020b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020b4:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020b6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020ba:	6173      	str	r3, [r6, #20]
 80020bc:	4b7a      	ldr	r3, [pc, #488]	; (80022a8 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020be:	d17c      	bne.n	80021ba <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020c0:	429e      	cmp	r6, r3
 80020c2:	d003      	beq.n	80020cc <UART_SetConfig+0x50>
 80020c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020c8:	429e      	cmp	r6, r3
 80020ca:	d144      	bne.n	8002156 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80020cc:	f7ff fcca 	bl	8001a64 <HAL_RCC_GetPCLK2Freq>
 80020d0:	2519      	movs	r5, #25
 80020d2:	fb05 f300 	mul.w	r3, r5, r0
 80020d6:	6860      	ldr	r0, [r4, #4]
 80020d8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80020dc:	0040      	lsls	r0, r0, #1
 80020de:	fbb3 f3f0 	udiv	r3, r3, r0
 80020e2:	fbb3 f3f9 	udiv	r3, r3, r9
 80020e6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80020ea:	f7ff fcbb 	bl	8001a64 <HAL_RCC_GetPCLK2Freq>
 80020ee:	6863      	ldr	r3, [r4, #4]
 80020f0:	4368      	muls	r0, r5
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	fbb0 f7f3 	udiv	r7, r0, r3
 80020f8:	f7ff fcb4 	bl	8001a64 <HAL_RCC_GetPCLK2Freq>
 80020fc:	6863      	ldr	r3, [r4, #4]
 80020fe:	4368      	muls	r0, r5
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fbb0 f3f3 	udiv	r3, r0, r3
 8002106:	fbb3 f3f9 	udiv	r3, r3, r9
 800210a:	fb09 7313 	mls	r3, r9, r3, r7
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	3332      	adds	r3, #50	; 0x32
 8002112:	fbb3 f3f9 	udiv	r3, r3, r9
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800211c:	f7ff fca2 	bl	8001a64 <HAL_RCC_GetPCLK2Freq>
 8002120:	6862      	ldr	r2, [r4, #4]
 8002122:	4368      	muls	r0, r5
 8002124:	0052      	lsls	r2, r2, #1
 8002126:	fbb0 faf2 	udiv	sl, r0, r2
 800212a:	f7ff fc9b 	bl	8001a64 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800212e:	6863      	ldr	r3, [r4, #4]
 8002130:	4368      	muls	r0, r5
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	fbb0 f3f3 	udiv	r3, r0, r3
 8002138:	fbb3 f3f9 	udiv	r3, r3, r9
 800213c:	fb09 a313 	mls	r3, r9, r3, sl
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	3332      	adds	r3, #50	; 0x32
 8002144:	fbb3 f3f9 	udiv	r3, r3, r9
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800214e:	443b      	add	r3, r7
 8002150:	60b3      	str	r3, [r6, #8]
 8002152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002156:	f7ff fc75 	bl	8001a44 <HAL_RCC_GetPCLK1Freq>
 800215a:	2519      	movs	r5, #25
 800215c:	fb05 f300 	mul.w	r3, r5, r0
 8002160:	6860      	ldr	r0, [r4, #4]
 8002162:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002166:	0040      	lsls	r0, r0, #1
 8002168:	fbb3 f3f0 	udiv	r3, r3, r0
 800216c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002170:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002174:	f7ff fc66 	bl	8001a44 <HAL_RCC_GetPCLK1Freq>
 8002178:	6863      	ldr	r3, [r4, #4]
 800217a:	4368      	muls	r0, r5
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	fbb0 f7f3 	udiv	r7, r0, r3
 8002182:	f7ff fc5f 	bl	8001a44 <HAL_RCC_GetPCLK1Freq>
 8002186:	6863      	ldr	r3, [r4, #4]
 8002188:	4368      	muls	r0, r5
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002190:	fbb3 f3f9 	udiv	r3, r3, r9
 8002194:	fb09 7313 	mls	r3, r9, r3, r7
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	3332      	adds	r3, #50	; 0x32
 800219c:	fbb3 f3f9 	udiv	r3, r3, r9
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80021a6:	f7ff fc4d 	bl	8001a44 <HAL_RCC_GetPCLK1Freq>
 80021aa:	6862      	ldr	r2, [r4, #4]
 80021ac:	4368      	muls	r0, r5
 80021ae:	0052      	lsls	r2, r2, #1
 80021b0:	fbb0 faf2 	udiv	sl, r0, r2
 80021b4:	f7ff fc46 	bl	8001a44 <HAL_RCC_GetPCLK1Freq>
 80021b8:	e7b9      	b.n	800212e <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021ba:	429e      	cmp	r6, r3
 80021bc:	d002      	beq.n	80021c4 <UART_SetConfig+0x148>
 80021be:	4b3b      	ldr	r3, [pc, #236]	; (80022ac <UART_SetConfig+0x230>)
 80021c0:	429e      	cmp	r6, r3
 80021c2:	d140      	bne.n	8002246 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80021c4:	f7ff fc4e 	bl	8001a64 <HAL_RCC_GetPCLK2Freq>
 80021c8:	6867      	ldr	r7, [r4, #4]
 80021ca:	2519      	movs	r5, #25
 80021cc:	f04f 0964 	mov.w	r9, #100	; 0x64
 80021d0:	fb05 f300 	mul.w	r3, r5, r0
 80021d4:	00bf      	lsls	r7, r7, #2
 80021d6:	fbb3 f3f7 	udiv	r3, r3, r7
 80021da:	fbb3 f3f9 	udiv	r3, r3, r9
 80021de:	011f      	lsls	r7, r3, #4
 80021e0:	f7ff fc40 	bl	8001a64 <HAL_RCC_GetPCLK2Freq>
 80021e4:	6863      	ldr	r3, [r4, #4]
 80021e6:	4368      	muls	r0, r5
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	fbb0 f8f3 	udiv	r8, r0, r3
 80021ee:	f7ff fc39 	bl	8001a64 <HAL_RCC_GetPCLK2Freq>
 80021f2:	6863      	ldr	r3, [r4, #4]
 80021f4:	4368      	muls	r0, r5
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80021fc:	fbb3 f3f9 	udiv	r3, r3, r9
 8002200:	fb09 8313 	mls	r3, r9, r3, r8
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	3332      	adds	r3, #50	; 0x32
 8002208:	fbb3 f3f9 	udiv	r3, r3, r9
 800220c:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002210:	f7ff fc28 	bl	8001a64 <HAL_RCC_GetPCLK2Freq>
 8002214:	6862      	ldr	r2, [r4, #4]
 8002216:	4368      	muls	r0, r5
 8002218:	0092      	lsls	r2, r2, #2
 800221a:	fbb0 faf2 	udiv	sl, r0, r2
 800221e:	f7ff fc21 	bl	8001a64 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002222:	6863      	ldr	r3, [r4, #4]
 8002224:	4368      	muls	r0, r5
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	fbb0 f3f3 	udiv	r3, r0, r3
 800222c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002230:	fb09 a313 	mls	r3, r9, r3, sl
 8002234:	011b      	lsls	r3, r3, #4
 8002236:	3332      	adds	r3, #50	; 0x32
 8002238:	fbb3 f3f9 	udiv	r3, r3, r9
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	ea43 0308 	orr.w	r3, r3, r8
 8002244:	e783      	b.n	800214e <UART_SetConfig+0xd2>
 8002246:	f7ff fbfd 	bl	8001a44 <HAL_RCC_GetPCLK1Freq>
 800224a:	6867      	ldr	r7, [r4, #4]
 800224c:	2519      	movs	r5, #25
 800224e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002252:	fb05 f300 	mul.w	r3, r5, r0
 8002256:	00bf      	lsls	r7, r7, #2
 8002258:	fbb3 f3f7 	udiv	r3, r3, r7
 800225c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002260:	011f      	lsls	r7, r3, #4
 8002262:	f7ff fbef 	bl	8001a44 <HAL_RCC_GetPCLK1Freq>
 8002266:	6863      	ldr	r3, [r4, #4]
 8002268:	4368      	muls	r0, r5
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	fbb0 f8f3 	udiv	r8, r0, r3
 8002270:	f7ff fbe8 	bl	8001a44 <HAL_RCC_GetPCLK1Freq>
 8002274:	6863      	ldr	r3, [r4, #4]
 8002276:	4368      	muls	r0, r5
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	fbb0 f3f3 	udiv	r3, r0, r3
 800227e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002282:	fb09 8313 	mls	r3, r9, r3, r8
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	3332      	adds	r3, #50	; 0x32
 800228a:	fbb3 f3f9 	udiv	r3, r3, r9
 800228e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002292:	f7ff fbd7 	bl	8001a44 <HAL_RCC_GetPCLK1Freq>
 8002296:	6862      	ldr	r2, [r4, #4]
 8002298:	4368      	muls	r0, r5
 800229a:	0092      	lsls	r2, r2, #2
 800229c:	fbb0 faf2 	udiv	sl, r0, r2
 80022a0:	f7ff fbd0 	bl	8001a44 <HAL_RCC_GetPCLK1Freq>
 80022a4:	e7bd      	b.n	8002222 <UART_SetConfig+0x1a6>
 80022a6:	bf00      	nop
 80022a8:	40011000 	.word	0x40011000
 80022ac:	40011400 	.word	0x40011400

080022b0 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80022b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b2:	4604      	mov	r4, r0
 80022b4:	460e      	mov	r6, r1
 80022b6:	4617      	mov	r7, r2
 80022b8:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022ba:	6821      	ldr	r1, [r4, #0]
 80022bc:	680b      	ldr	r3, [r1, #0]
 80022be:	ea36 0303 	bics.w	r3, r6, r3
 80022c2:	d101      	bne.n	80022c8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80022c4:	2000      	movs	r0, #0
}
 80022c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80022c8:	1c6b      	adds	r3, r5, #1
 80022ca:	d0f7      	beq.n	80022bc <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022cc:	b995      	cbnz	r5, 80022f4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022ce:	6823      	ldr	r3, [r4, #0]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80022d6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	f022 0201 	bic.w	r2, r2, #1
 80022de:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80022e0:	2320      	movs	r3, #32
 80022e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80022e6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80022ea:	2300      	movs	r3, #0
 80022ec:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80022f0:	2003      	movs	r0, #3
 80022f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022f4:	f7fe ff6c 	bl	80011d0 <HAL_GetTick>
 80022f8:	1bc0      	subs	r0, r0, r7
 80022fa:	4285      	cmp	r5, r0
 80022fc:	d2dd      	bcs.n	80022ba <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80022fe:	e7e6      	b.n	80022ce <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002300 <HAL_UART_Init>:
{
 8002300:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002302:	4604      	mov	r4, r0
 8002304:	b340      	cbz	r0, 8002358 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002306:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800230a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800230e:	b91b      	cbnz	r3, 8002318 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002310:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002314:	f001 fa7a 	bl	800380c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002318:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800231a:	2324      	movs	r3, #36	; 0x24
 800231c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002320:	68d3      	ldr	r3, [r2, #12]
 8002322:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002326:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002328:	4620      	mov	r0, r4
 800232a:	f7ff fea7 	bl	800207c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800232e:	6823      	ldr	r3, [r4, #0]
 8002330:	691a      	ldr	r2, [r3, #16]
 8002332:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002336:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800233e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002346:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002348:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800234a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800234c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800234e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002352:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002356:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002358:	2001      	movs	r0, #1
}
 800235a:	bd10      	pop	{r4, pc}

0800235c <HAL_UART_Transmit>:
{
 800235c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002360:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002362:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002366:	2b20      	cmp	r3, #32
{
 8002368:	4604      	mov	r4, r0
 800236a:	460d      	mov	r5, r1
 800236c:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800236e:	d14f      	bne.n	8002410 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8002370:	2900      	cmp	r1, #0
 8002372:	d04a      	beq.n	800240a <HAL_UART_Transmit+0xae>
 8002374:	2a00      	cmp	r2, #0
 8002376:	d048      	beq.n	800240a <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8002378:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800237c:	2b01      	cmp	r3, #1
 800237e:	d047      	beq.n	8002410 <HAL_UART_Transmit+0xb4>
 8002380:	2301      	movs	r3, #1
 8002382:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002386:	2300      	movs	r3, #0
 8002388:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800238a:	2321      	movs	r3, #33	; 0x21
 800238c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002390:	f7fe ff1e 	bl	80011d0 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002394:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8002398:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800239a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800239e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	b96b      	cbnz	r3, 80023c0 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023a4:	463b      	mov	r3, r7
 80023a6:	4632      	mov	r2, r6
 80023a8:	2140      	movs	r1, #64	; 0x40
 80023aa:	4620      	mov	r0, r4
 80023ac:	f7ff ff80 	bl	80022b0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80023b0:	b9b0      	cbnz	r0, 80023e0 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 80023b2:	2320      	movs	r3, #32
 80023b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80023b8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80023bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80023c0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80023c2:	3b01      	subs	r3, #1
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80023c8:	68a3      	ldr	r3, [r4, #8]
 80023ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023ce:	4632      	mov	r2, r6
 80023d0:	463b      	mov	r3, r7
 80023d2:	f04f 0180 	mov.w	r1, #128	; 0x80
 80023d6:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80023d8:	d10e      	bne.n	80023f8 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023da:	f7ff ff69 	bl	80022b0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80023de:	b110      	cbz	r0, 80023e6 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80023e0:	2003      	movs	r0, #3
 80023e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80023e6:	882b      	ldrh	r3, [r5, #0]
 80023e8:	6822      	ldr	r2, [r4, #0]
 80023ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ee:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80023f0:	6923      	ldr	r3, [r4, #16]
 80023f2:	b943      	cbnz	r3, 8002406 <HAL_UART_Transmit+0xaa>
          pData += 2U;
 80023f4:	3502      	adds	r5, #2
 80023f6:	e7d2      	b.n	800239e <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023f8:	f7ff ff5a 	bl	80022b0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80023fc:	2800      	cmp	r0, #0
 80023fe:	d1ef      	bne.n	80023e0 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002400:	6823      	ldr	r3, [r4, #0]
 8002402:	782a      	ldrb	r2, [r5, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	3501      	adds	r5, #1
 8002408:	e7c9      	b.n	800239e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800240a:	2001      	movs	r0, #1
 800240c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002410:	2002      	movs	r0, #2
}
 8002412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002416 <HAL_UART_Receive>:
{
 8002416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800241a:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800241c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002420:	2b20      	cmp	r3, #32
{
 8002422:	4604      	mov	r4, r0
 8002424:	460d      	mov	r5, r1
 8002426:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002428:	d152      	bne.n	80024d0 <HAL_UART_Receive+0xba>
    if ((pData == NULL) || (Size == 0U))
 800242a:	2900      	cmp	r1, #0
 800242c:	d04d      	beq.n	80024ca <HAL_UART_Receive+0xb4>
 800242e:	2a00      	cmp	r2, #0
 8002430:	d04b      	beq.n	80024ca <HAL_UART_Receive+0xb4>
    __HAL_LOCK(huart);
 8002432:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002436:	2b01      	cmp	r3, #1
 8002438:	d04a      	beq.n	80024d0 <HAL_UART_Receive+0xba>
 800243a:	2301      	movs	r3, #1
 800243c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002440:	2300      	movs	r3, #0
 8002442:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002444:	2322      	movs	r3, #34	; 0x22
 8002446:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 800244a:	f7fe fec1 	bl	80011d0 <HAL_GetTick>
    huart->RxXferSize = Size;
 800244e:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 8002452:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 8002454:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002458:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 800245a:	b280      	uxth	r0, r0
 800245c:	b930      	cbnz	r0, 800246c <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 800245e:	2320      	movs	r3, #32
 8002460:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 8002464:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 800246c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800246e:	3b01      	subs	r3, #1
 8002470:	b29b      	uxth	r3, r3
 8002472:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002474:	68a3      	ldr	r3, [r4, #8]
 8002476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800247a:	4632      	mov	r2, r6
 800247c:	463b      	mov	r3, r7
 800247e:	f04f 0120 	mov.w	r1, #32
 8002482:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002484:	d112      	bne.n	80024ac <HAL_UART_Receive+0x96>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002486:	f7ff ff13 	bl	80022b0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800248a:	b110      	cbz	r0, 8002492 <HAL_UART_Receive+0x7c>
          return HAL_TIMEOUT;
 800248c:	2003      	movs	r0, #3
 800248e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002492:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002494:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002496:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002498:	b922      	cbnz	r2, 80024a4 <HAL_UART_Receive+0x8e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800249a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800249e:	f825 3b02 	strh.w	r3, [r5], #2
 80024a2:	e7d9      	b.n	8002458 <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	f825 3b01 	strh.w	r3, [r5], #1
 80024aa:	e7d5      	b.n	8002458 <HAL_UART_Receive+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80024ac:	f7ff ff00 	bl	80022b0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80024b0:	2800      	cmp	r0, #0
 80024b2:	d1eb      	bne.n	800248c <HAL_UART_Receive+0x76>
 80024b4:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80024b6:	6921      	ldr	r1, [r4, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	1c6a      	adds	r2, r5, #1
        if (huart->Init.Parity == UART_PARITY_NONE)
 80024bc:	b911      	cbnz	r1, 80024c4 <HAL_UART_Receive+0xae>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80024be:	702b      	strb	r3, [r5, #0]
 80024c0:	4615      	mov	r5, r2
 80024c2:	e7c9      	b.n	8002458 <HAL_UART_Receive+0x42>
 80024c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024c8:	e7f9      	b.n	80024be <HAL_UART_Receive+0xa8>
      return  HAL_ERROR;
 80024ca:	2001      	movs	r0, #1
 80024cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80024d0:	2002      	movs	r0, #2
}
 80024d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080024d6 <HAL_UART_TxCpltCallback>:
 80024d6:	4770      	bx	lr

080024d8 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80024d8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80024dc:	2b22      	cmp	r3, #34	; 0x22
{
 80024de:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80024e0:	d136      	bne.n	8002550 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024e2:	6883      	ldr	r3, [r0, #8]
 80024e4:	6901      	ldr	r1, [r0, #16]
 80024e6:	6802      	ldr	r2, [r0, #0]
 80024e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80024ee:	d123      	bne.n	8002538 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024f0:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80024f2:	b9e9      	cbnz	r1, 8002530 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024f8:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80024fc:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80024fe:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002500:	3c01      	subs	r4, #1
 8002502:	b2a4      	uxth	r4, r4
 8002504:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002506:	b98c      	cbnz	r4, 800252c <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002508:	6803      	ldr	r3, [r0, #0]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	f022 0220 	bic.w	r2, r2, #32
 8002510:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002518:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800251a:	695a      	ldr	r2, [r3, #20]
 800251c:	f022 0201 	bic.w	r2, r2, #1
 8002520:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002522:	2320      	movs	r3, #32
 8002524:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002528:	f001 f916 	bl	8003758 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 800252c:	2000      	movs	r0, #0
}
 800252e:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	f823 2b01 	strh.w	r2, [r3], #1
 8002536:	e7e1      	b.n	80024fc <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002538:	b921      	cbnz	r1, 8002544 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800253a:	1c59      	adds	r1, r3, #1
 800253c:	6852      	ldr	r2, [r2, #4]
 800253e:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002540:	701a      	strb	r2, [r3, #0]
 8002542:	e7dc      	b.n	80024fe <UART_Receive_IT+0x26>
 8002544:	6852      	ldr	r2, [r2, #4]
 8002546:	1c59      	adds	r1, r3, #1
 8002548:	6281      	str	r1, [r0, #40]	; 0x28
 800254a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800254e:	e7f7      	b.n	8002540 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8002550:	2002      	movs	r0, #2
 8002552:	bd10      	pop	{r4, pc}

08002554 <HAL_UART_ErrorCallback>:
 8002554:	4770      	bx	lr
	...

08002558 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002558:	6803      	ldr	r3, [r0, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800255c:	68d9      	ldr	r1, [r3, #12]
{
 800255e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002560:	0716      	lsls	r6, r2, #28
{
 8002562:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002564:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8002566:	d107      	bne.n	8002578 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002568:	0696      	lsls	r6, r2, #26
 800256a:	d55a      	bpl.n	8002622 <HAL_UART_IRQHandler+0xca>
 800256c:	068d      	lsls	r5, r1, #26
 800256e:	d558      	bpl.n	8002622 <HAL_UART_IRQHandler+0xca>
}
 8002570:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002574:	f7ff bfb0 	b.w	80024d8 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002578:	f015 0501 	ands.w	r5, r5, #1
 800257c:	d102      	bne.n	8002584 <HAL_UART_IRQHandler+0x2c>
 800257e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002582:	d04e      	beq.n	8002622 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002584:	07d3      	lsls	r3, r2, #31
 8002586:	d505      	bpl.n	8002594 <HAL_UART_IRQHandler+0x3c>
 8002588:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800258a:	bf42      	ittt	mi
 800258c:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800258e:	f043 0301 	orrmi.w	r3, r3, #1
 8002592:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002594:	0750      	lsls	r0, r2, #29
 8002596:	d504      	bpl.n	80025a2 <HAL_UART_IRQHandler+0x4a>
 8002598:	b11d      	cbz	r5, 80025a2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800259a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800259c:	f043 0302 	orr.w	r3, r3, #2
 80025a0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025a2:	0793      	lsls	r3, r2, #30
 80025a4:	d504      	bpl.n	80025b0 <HAL_UART_IRQHandler+0x58>
 80025a6:	b11d      	cbz	r5, 80025b0 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025aa:	f043 0304 	orr.w	r3, r3, #4
 80025ae:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025b0:	0716      	lsls	r6, r2, #28
 80025b2:	d504      	bpl.n	80025be <HAL_UART_IRQHandler+0x66>
 80025b4:	b11d      	cbz	r5, 80025be <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025b8:	f043 0308 	orr.w	r3, r3, #8
 80025bc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d066      	beq.n	8002692 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025c4:	0695      	lsls	r5, r2, #26
 80025c6:	d504      	bpl.n	80025d2 <HAL_UART_IRQHandler+0x7a>
 80025c8:	0688      	lsls	r0, r1, #26
 80025ca:	d502      	bpl.n	80025d2 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 80025cc:	4620      	mov	r0, r4
 80025ce:	f7ff ff83 	bl	80024d8 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025d6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80025d8:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 80025da:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025dc:	d402      	bmi.n	80025e4 <HAL_UART_IRQHandler+0x8c>
 80025de:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80025e2:	d01a      	beq.n	800261a <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 80025e4:	f7ff fd3c 	bl	8002060 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e8:	6823      	ldr	r3, [r4, #0]
 80025ea:	695a      	ldr	r2, [r3, #20]
 80025ec:	0652      	lsls	r2, r2, #25
 80025ee:	d510      	bpl.n	8002612 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025f0:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80025f2:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025f8:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80025fa:	b150      	cbz	r0, 8002612 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025fc:	4b25      	ldr	r3, [pc, #148]	; (8002694 <HAL_UART_IRQHandler+0x13c>)
 80025fe:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002600:	f7fe fe60 	bl	80012c4 <HAL_DMA_Abort_IT>
 8002604:	2800      	cmp	r0, #0
 8002606:	d044      	beq.n	8002692 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002608:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800260a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800260e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002610:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002612:	4620      	mov	r0, r4
 8002614:	f7ff ff9e 	bl	8002554 <HAL_UART_ErrorCallback>
 8002618:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800261a:	f7ff ff9b 	bl	8002554 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800261e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002620:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002622:	0616      	lsls	r6, r2, #24
 8002624:	d527      	bpl.n	8002676 <HAL_UART_IRQHandler+0x11e>
 8002626:	060d      	lsls	r5, r1, #24
 8002628:	d525      	bpl.n	8002676 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800262a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800262e:	2a21      	cmp	r2, #33	; 0x21
 8002630:	d12f      	bne.n	8002692 <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002632:	68a2      	ldr	r2, [r4, #8]
 8002634:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002638:	6a22      	ldr	r2, [r4, #32]
 800263a:	d117      	bne.n	800266c <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800263c:	8811      	ldrh	r1, [r2, #0]
 800263e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002642:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002644:	6921      	ldr	r1, [r4, #16]
 8002646:	b979      	cbnz	r1, 8002668 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8002648:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800264a:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800264c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800264e:	3a01      	subs	r2, #1
 8002650:	b292      	uxth	r2, r2
 8002652:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002654:	b9ea      	cbnz	r2, 8002692 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800265c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002668:	3201      	adds	r2, #1
 800266a:	e7ee      	b.n	800264a <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800266c:	1c51      	adds	r1, r2, #1
 800266e:	6221      	str	r1, [r4, #32]
 8002670:	7812      	ldrb	r2, [r2, #0]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	e7ea      	b.n	800264c <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002676:	0650      	lsls	r0, r2, #25
 8002678:	d50b      	bpl.n	8002692 <HAL_UART_IRQHandler+0x13a>
 800267a:	064a      	lsls	r2, r1, #25
 800267c:	d509      	bpl.n	8002692 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002684:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002686:	2320      	movs	r3, #32
 8002688:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800268c:	4620      	mov	r0, r4
 800268e:	f7ff ff22 	bl	80024d6 <HAL_UART_TxCpltCallback>
 8002692:	bd70      	pop	{r4, r5, r6, pc}
 8002694:	08002699 	.word	0x08002699

08002698 <UART_DMAAbortOnError>:
{
 8002698:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800269a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 800269c:	2300      	movs	r3, #0
 800269e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80026a0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80026a2:	f7ff ff57 	bl	8002554 <HAL_UART_ErrorCallback>
 80026a6:	bd08      	pop	{r3, pc}

080026a8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80026a8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80026aa:	f000 fca9 	bl	8003000 <vTaskStartScheduler>
  
  return osOK;
}
 80026ae:	2000      	movs	r0, #0
 80026b0:	bd08      	pop	{r3, pc}

080026b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80026b2:	b570      	push	{r4, r5, r6, lr}
 80026b4:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80026b6:	6946      	ldr	r6, [r0, #20]
 80026b8:	692a      	ldr	r2, [r5, #16]
 80026ba:	6840      	ldr	r0, [r0, #4]
 80026bc:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 80026c0:	460b      	mov	r3, r1
 80026c2:	b086      	sub	sp, #24
 80026c4:	6829      	ldr	r1, [r5, #0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80026c6:	b176      	cbz	r6, 80026e6 <osThreadCreate+0x34>
 80026c8:	69ad      	ldr	r5, [r5, #24]
 80026ca:	b165      	cbz	r5, 80026e6 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 80026cc:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80026ce:	bf14      	ite	ne
 80026d0:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80026d2:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026d4:	9502      	str	r5, [sp, #8]
 80026d6:	e88d 0050 	stmia.w	sp, {r4, r6}
 80026da:	f000 fc2d 	bl	8002f38 <xTaskCreateStatic>
 80026de:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80026e0:	9805      	ldr	r0, [sp, #20]
}
 80026e2:	b006      	add	sp, #24
 80026e4:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 80026e6:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80026e8:	bf14      	ite	ne
 80026ea:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80026ec:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026ee:	ad05      	add	r5, sp, #20
 80026f0:	b292      	uxth	r2, r2
 80026f2:	e88d 0030 	stmia.w	sp, {r4, r5}
 80026f6:	f000 fc56 	bl	8002fa6 <xTaskCreate>
 80026fa:	2801      	cmp	r0, #1
 80026fc:	d0f0      	beq.n	80026e0 <osThreadCreate+0x2e>
      return NULL;
 80026fe:	2000      	movs	r0, #0
 8002700:	e7ef      	b.n	80026e2 <osThreadCreate+0x30>

08002702 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002702:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002704:	2800      	cmp	r0, #0
 8002706:	bf08      	it	eq
 8002708:	2001      	moveq	r0, #1
 800270a:	f000 fdc1 	bl	8003290 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800270e:	2000      	movs	r0, #0
 8002710:	bd08      	pop	{r3, pc}

08002712 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002712:	f100 0308 	add.w	r3, r0, #8
 8002716:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800271c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800271e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002720:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002722:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002724:	6003      	str	r3, [r0, #0]
 8002726:	4770      	bx	lr

08002728 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002728:	2300      	movs	r3, #0
 800272a:	6103      	str	r3, [r0, #16]
 800272c:	4770      	bx	lr

0800272e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800272e:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002730:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800273a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800273c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800273e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002740:	3301      	adds	r3, #1
 8002742:	6003      	str	r3, [r0, #0]
 8002744:	4770      	bx	lr

08002746 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002746:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002748:	1c53      	adds	r3, r2, #1
{
 800274a:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 800274c:	d10a      	bne.n	8002764 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800274e:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002754:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002756:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002758:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800275a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800275c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800275e:	3301      	adds	r3, #1
 8002760:	6003      	str	r3, [r0, #0]
 8002762:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002764:	f100 0308 	add.w	r3, r0, #8
 8002768:	685c      	ldr	r4, [r3, #4]
 800276a:	6825      	ldr	r5, [r4, #0]
 800276c:	42aa      	cmp	r2, r5
 800276e:	d3ef      	bcc.n	8002750 <vListInsert+0xa>
 8002770:	4623      	mov	r3, r4
 8002772:	e7f9      	b.n	8002768 <vListInsert+0x22>

08002774 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002774:	6841      	ldr	r1, [r0, #4]
 8002776:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002778:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800277a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800277c:	6882      	ldr	r2, [r0, #8]
 800277e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002780:	6859      	ldr	r1, [r3, #4]
 8002782:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002784:	bf08      	it	eq
 8002786:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002788:	2200      	movs	r2, #0
 800278a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	3a01      	subs	r2, #1
 8002790:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002792:	6818      	ldr	r0, [r3, #0]
}
 8002794:	4770      	bx	lr
	...

08002798 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002798:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800279e:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <prvTaskExitError+0x3c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	3301      	adds	r3, #1
 80027a4:	d008      	beq.n	80027b8 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80027a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027aa:	f383 8811 	msr	BASEPRI, r3
 80027ae:	f3bf 8f6f 	isb	sy
 80027b2:	f3bf 8f4f 	dsb	sy
 80027b6:	e7fe      	b.n	80027b6 <prvTaskExitError+0x1e>
 80027b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027bc:	f383 8811 	msr	BASEPRI, r3
 80027c0:	f3bf 8f6f 	isb	sy
 80027c4:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80027c8:	9b01      	ldr	r3, [sp, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0fc      	beq.n	80027c8 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80027ce:	b002      	add	sp, #8
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	2000016c 	.word	0x2000016c

080027d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80027d8:	4808      	ldr	r0, [pc, #32]	; (80027fc <prvPortStartFirstTask+0x24>)
 80027da:	6800      	ldr	r0, [r0, #0]
 80027dc:	6800      	ldr	r0, [r0, #0]
 80027de:	f380 8808 	msr	MSP, r0
 80027e2:	f04f 0000 	mov.w	r0, #0
 80027e6:	f380 8814 	msr	CONTROL, r0
 80027ea:	b662      	cpsie	i
 80027ec:	b661      	cpsie	f
 80027ee:	f3bf 8f4f 	dsb	sy
 80027f2:	f3bf 8f6f 	isb	sy
 80027f6:	df00      	svc	0
 80027f8:	bf00      	nop
 80027fa:	0000      	.short	0x0000
 80027fc:	e000ed08 	.word	0xe000ed08

08002800 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002800:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002810 <vPortEnableVFP+0x10>
 8002804:	6801      	ldr	r1, [r0, #0]
 8002806:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800280a:	6001      	str	r1, [r0, #0]
 800280c:	4770      	bx	lr
 800280e:	0000      	.short	0x0000
 8002810:	e000ed88 	.word	0xe000ed88

08002814 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002814:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002818:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800281c:	4b07      	ldr	r3, [pc, #28]	; (800283c <pxPortInitialiseStack+0x28>)
 800281e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002822:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002826:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800282a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800282e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002832:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8002836:	3844      	subs	r0, #68	; 0x44
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	08002799 	.word	0x08002799

08002840 <SVC_Handler>:
	__asm volatile (
 8002840:	4b07      	ldr	r3, [pc, #28]	; (8002860 <pxCurrentTCBConst2>)
 8002842:	6819      	ldr	r1, [r3, #0]
 8002844:	6808      	ldr	r0, [r1, #0]
 8002846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800284a:	f380 8809 	msr	PSP, r0
 800284e:	f3bf 8f6f 	isb	sy
 8002852:	f04f 0000 	mov.w	r0, #0
 8002856:	f380 8811 	msr	BASEPRI, r0
 800285a:	4770      	bx	lr
 800285c:	f3af 8000 	nop.w

08002860 <pxCurrentTCBConst2>:
 8002860:	20003fb0 	.word	0x20003fb0

08002864 <vPortEnterCritical>:
 8002864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002868:	f383 8811 	msr	BASEPRI, r3
 800286c:	f3bf 8f6f 	isb	sy
 8002870:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002874:	4a0a      	ldr	r2, [pc, #40]	; (80028a0 <vPortEnterCritical+0x3c>)
 8002876:	6813      	ldr	r3, [r2, #0]
 8002878:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800287a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800287c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800287e:	d10d      	bne.n	800289c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <vPortEnterCritical+0x40>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002888:	d008      	beq.n	800289c <vPortEnterCritical+0x38>
 800288a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288e:	f383 8811 	msr	BASEPRI, r3
 8002892:	f3bf 8f6f 	isb	sy
 8002896:	f3bf 8f4f 	dsb	sy
 800289a:	e7fe      	b.n	800289a <vPortEnterCritical+0x36>
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	2000016c 	.word	0x2000016c
 80028a4:	e000ed04 	.word	0xe000ed04

080028a8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80028a8:	4a08      	ldr	r2, [pc, #32]	; (80028cc <vPortExitCritical+0x24>)
 80028aa:	6813      	ldr	r3, [r2, #0]
 80028ac:	b943      	cbnz	r3, 80028c0 <vPortExitCritical+0x18>
 80028ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b2:	f383 8811 	msr	BASEPRI, r3
 80028b6:	f3bf 8f6f 	isb	sy
 80028ba:	f3bf 8f4f 	dsb	sy
 80028be:	e7fe      	b.n	80028be <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80028c0:	3b01      	subs	r3, #1
 80028c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80028c4:	b90b      	cbnz	r3, 80028ca <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80028c6:	f383 8811 	msr	BASEPRI, r3
 80028ca:	4770      	bx	lr
 80028cc:	2000016c 	.word	0x2000016c

080028d0 <PendSV_Handler>:
	__asm volatile
 80028d0:	f3ef 8009 	mrs	r0, PSP
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	4b15      	ldr	r3, [pc, #84]	; (8002930 <pxCurrentTCBConst>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	f01e 0f10 	tst.w	lr, #16
 80028e0:	bf08      	it	eq
 80028e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80028e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028ea:	6010      	str	r0, [r2, #0]
 80028ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80028f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80028f4:	f380 8811 	msr	BASEPRI, r0
 80028f8:	f3bf 8f4f 	dsb	sy
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	f000 fcea 	bl	80032d8 <vTaskSwitchContext>
 8002904:	f04f 0000 	mov.w	r0, #0
 8002908:	f380 8811 	msr	BASEPRI, r0
 800290c:	bc09      	pop	{r0, r3}
 800290e:	6819      	ldr	r1, [r3, #0]
 8002910:	6808      	ldr	r0, [r1, #0]
 8002912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002916:	f01e 0f10 	tst.w	lr, #16
 800291a:	bf08      	it	eq
 800291c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002920:	f380 8809 	msr	PSP, r0
 8002924:	f3bf 8f6f 	isb	sy
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	f3af 8000 	nop.w

08002930 <pxCurrentTCBConst>:
 8002930:	20003fb0 	.word	0x20003fb0

08002934 <SysTick_Handler>:
{
 8002934:	b508      	push	{r3, lr}
	__asm volatile
 8002936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293a:	f383 8811 	msr	BASEPRI, r3
 800293e:	f3bf 8f6f 	isb	sy
 8002942:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002946:	f000 fb99 	bl	800307c <xTaskIncrementTick>
 800294a:	b118      	cbz	r0, 8002954 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800294c:	4b03      	ldr	r3, [pc, #12]	; (800295c <SysTick_Handler+0x28>)
 800294e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002952:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002954:	2300      	movs	r3, #0
 8002956:	f383 8811 	msr	BASEPRI, r3
 800295a:	bd08      	pop	{r3, pc}
 800295c:	e000ed04 	.word	0xe000ed04

08002960 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002960:	4a08      	ldr	r2, [pc, #32]	; (8002984 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002962:	4909      	ldr	r1, [pc, #36]	; (8002988 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002964:	2300      	movs	r3, #0
 8002966:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002968:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800296a:	4b08      	ldr	r3, [pc, #32]	; (800298c <vPortSetupTimerInterrupt+0x2c>)
 800296c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	fbb3 f3f1 	udiv	r3, r3, r1
 8002976:	4906      	ldr	r1, [pc, #24]	; (8002990 <vPortSetupTimerInterrupt+0x30>)
 8002978:	3b01      	subs	r3, #1
 800297a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800297c:	2307      	movs	r3, #7
 800297e:	6013      	str	r3, [r2, #0]
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	e000e010 	.word	0xe000e010
 8002988:	e000e018 	.word	0xe000e018
 800298c:	20000198 	.word	0x20000198
 8002990:	e000e014 	.word	0xe000e014

08002994 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002994:	4b39      	ldr	r3, [pc, #228]	; (8002a7c <xPortStartScheduler+0xe8>)
 8002996:	4a3a      	ldr	r2, [pc, #232]	; (8002a80 <xPortStartScheduler+0xec>)
{
 8002998:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800299a:	6819      	ldr	r1, [r3, #0]
 800299c:	4291      	cmp	r1, r2
 800299e:	d108      	bne.n	80029b2 <xPortStartScheduler+0x1e>
	__asm volatile
 80029a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a4:	f383 8811 	msr	BASEPRI, r3
 80029a8:	f3bf 8f6f 	isb	sy
 80029ac:	f3bf 8f4f 	dsb	sy
 80029b0:	e7fe      	b.n	80029b0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b33      	ldr	r3, [pc, #204]	; (8002a84 <xPortStartScheduler+0xf0>)
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d108      	bne.n	80029cc <xPortStartScheduler+0x38>
 80029ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029be:	f383 8811 	msr	BASEPRI, r3
 80029c2:	f3bf 8f6f 	isb	sy
 80029c6:	f3bf 8f4f 	dsb	sy
 80029ca:	e7fe      	b.n	80029ca <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80029cc:	4b2e      	ldr	r3, [pc, #184]	; (8002a88 <xPortStartScheduler+0xf4>)
 80029ce:	781a      	ldrb	r2, [r3, #0]
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80029d4:	22ff      	movs	r2, #255	; 0xff
 80029d6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80029d8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80029da:	4a2c      	ldr	r2, [pc, #176]	; (8002a8c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80029e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80029e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029ea:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80029ec:	4b28      	ldr	r3, [pc, #160]	; (8002a90 <xPortStartScheduler+0xfc>)
 80029ee:	2207      	movs	r2, #7
 80029f0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80029f2:	2100      	movs	r1, #0
 80029f4:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80029f8:	0600      	lsls	r0, r0, #24
 80029fa:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
 80029fe:	d40d      	bmi.n	8002a1c <xPortStartScheduler+0x88>
 8002a00:	b101      	cbz	r1, 8002a04 <xPortStartScheduler+0x70>
 8002a02:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	2a03      	cmp	r2, #3
 8002a08:	d011      	beq.n	8002a2e <xPortStartScheduler+0x9a>
 8002a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0e:	f383 8811 	msr	BASEPRI, r3
 8002a12:	f3bf 8f6f 	isb	sy
 8002a16:	f3bf 8f4f 	dsb	sy
 8002a1a:	e7fe      	b.n	8002a1a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002a1c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002a20:	0052      	lsls	r2, r2, #1
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	f88d 2003 	strb.w	r2, [sp, #3]
 8002a28:	2101      	movs	r1, #1
 8002a2a:	4622      	mov	r2, r4
 8002a2c:	e7e2      	b.n	80029f4 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002a2e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002a30:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002a34:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002a36:	9b01      	ldr	r3, [sp, #4]
 8002a38:	4a13      	ldr	r2, [pc, #76]	; (8002a88 <xPortStartScheduler+0xf4>)
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002a3e:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <xPortStartScheduler+0x100>)
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002a46:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002a4e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002a50:	f7ff ff86 	bl	8002960 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002a54:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <xPortStartScheduler+0x104>)
 8002a56:	2400      	movs	r4, #0
 8002a58:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8002a5a:	f7ff fed1 	bl	8002800 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002a5e:	4a0f      	ldr	r2, [pc, #60]	; (8002a9c <xPortStartScheduler+0x108>)
 8002a60:	6813      	ldr	r3, [r2, #0]
 8002a62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002a66:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002a68:	f7ff feb6 	bl	80027d8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8002a6c:	f000 fc34 	bl	80032d8 <vTaskSwitchContext>
	prvTaskExitError();
 8002a70:	f7ff fe92 	bl	8002798 <prvTaskExitError>
}
 8002a74:	4620      	mov	r0, r4
 8002a76:	b002      	add	sp, #8
 8002a78:	bd10      	pop	{r4, pc}
 8002a7a:	bf00      	nop
 8002a7c:	e000ed00 	.word	0xe000ed00
 8002a80:	410fc271 	.word	0x410fc271
 8002a84:	410fc270 	.word	0x410fc270
 8002a88:	e000e400 	.word	0xe000e400
 8002a8c:	20000390 	.word	0x20000390
 8002a90:	20000394 	.word	0x20000394
 8002a94:	e000ed20 	.word	0xe000ed20
 8002a98:	2000016c 	.word	0x2000016c
 8002a9c:	e000ef34 	.word	0xe000ef34

08002aa0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002aa0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002aa2:	4b0f      	ldr	r3, [pc, #60]	; (8002ae0 <prvInsertBlockIntoFreeList+0x40>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	4282      	cmp	r2, r0
 8002aa8:	d318      	bcc.n	8002adc <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002aaa:	685c      	ldr	r4, [r3, #4]
 8002aac:	1919      	adds	r1, r3, r4
 8002aae:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002ab0:	bf01      	itttt	eq
 8002ab2:	6841      	ldreq	r1, [r0, #4]
 8002ab4:	4618      	moveq	r0, r3
 8002ab6:	1909      	addeq	r1, r1, r4
 8002ab8:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002aba:	6844      	ldr	r4, [r0, #4]
 8002abc:	1901      	adds	r1, r0, r4
 8002abe:	428a      	cmp	r2, r1
 8002ac0:	d107      	bne.n	8002ad2 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002ac2:	4908      	ldr	r1, [pc, #32]	; (8002ae4 <prvInsertBlockIntoFreeList+0x44>)
 8002ac4:	6809      	ldr	r1, [r1, #0]
 8002ac6:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002ac8:	bf1f      	itttt	ne
 8002aca:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002acc:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002ace:	1909      	addne	r1, r1, r4
 8002ad0:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002ad2:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002ad4:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002ad6:	bf18      	it	ne
 8002ad8:	6018      	strne	r0, [r3, #0]
 8002ada:	bd10      	pop	{r4, pc}
 8002adc:	4613      	mov	r3, r2
 8002ade:	e7e1      	b.n	8002aa4 <prvInsertBlockIntoFreeList+0x4>
 8002ae0:	20003fa8 	.word	0x20003fa8
 8002ae4:	20000398 	.word	0x20000398

08002ae8 <pvPortMalloc>:
{
 8002ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002aec:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002aee:	f000 fabd 	bl	800306c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002af2:	493e      	ldr	r1, [pc, #248]	; (8002bec <pvPortMalloc+0x104>)
 8002af4:	4d3e      	ldr	r5, [pc, #248]	; (8002bf0 <pvPortMalloc+0x108>)
 8002af6:	680b      	ldr	r3, [r1, #0]
 8002af8:	bb0b      	cbnz	r3, 8002b3e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8002afa:	4a3e      	ldr	r2, [pc, #248]	; (8002bf4 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002afc:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002afe:	bf1f      	itttt	ne
 8002b00:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002b02:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002b06:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8002b0a:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002b0c:	bf14      	ite	ne
 8002b0e:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002b10:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002b14:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8002b16:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002b18:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002b1c:	4e36      	ldr	r6, [pc, #216]	; (8002bf8 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8002b1e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002b20:	2000      	movs	r0, #0
 8002b22:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002b24:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8002b26:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002b28:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002b2a:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002b2c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002b2e:	4b33      	ldr	r3, [pc, #204]	; (8002bfc <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002b30:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002b32:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002b34:	4b32      	ldr	r3, [pc, #200]	; (8002c00 <pvPortMalloc+0x118>)
 8002b36:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002b38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002b3c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002b3e:	682f      	ldr	r7, [r5, #0]
 8002b40:	4227      	tst	r7, r4
 8002b42:	d116      	bne.n	8002b72 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8002b44:	2c00      	cmp	r4, #0
 8002b46:	d041      	beq.n	8002bcc <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8002b48:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002b4c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002b4e:	bf1c      	itt	ne
 8002b50:	f023 0307 	bicne.w	r3, r3, #7
 8002b54:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002b56:	b163      	cbz	r3, 8002b72 <pvPortMalloc+0x8a>
 8002b58:	4a29      	ldr	r2, [pc, #164]	; (8002c00 <pvPortMalloc+0x118>)
 8002b5a:	6816      	ldr	r6, [r2, #0]
 8002b5c:	42b3      	cmp	r3, r6
 8002b5e:	4690      	mov	r8, r2
 8002b60:	d807      	bhi.n	8002b72 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8002b62:	4a25      	ldr	r2, [pc, #148]	; (8002bf8 <pvPortMalloc+0x110>)
 8002b64:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b66:	6868      	ldr	r0, [r5, #4]
 8002b68:	4283      	cmp	r3, r0
 8002b6a:	d804      	bhi.n	8002b76 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8002b6c:	6809      	ldr	r1, [r1, #0]
 8002b6e:	428d      	cmp	r5, r1
 8002b70:	d107      	bne.n	8002b82 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8002b72:	2400      	movs	r4, #0
 8002b74:	e02a      	b.n	8002bcc <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b76:	682c      	ldr	r4, [r5, #0]
 8002b78:	2c00      	cmp	r4, #0
 8002b7a:	d0f7      	beq.n	8002b6c <pvPortMalloc+0x84>
 8002b7c:	462a      	mov	r2, r5
 8002b7e:	4625      	mov	r5, r4
 8002b80:	e7f1      	b.n	8002b66 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002b82:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002b84:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002b86:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002b88:	1ac2      	subs	r2, r0, r3
 8002b8a:	2a10      	cmp	r2, #16
 8002b8c:	d90f      	bls.n	8002bae <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002b8e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b90:	0741      	lsls	r1, r0, #29
 8002b92:	d008      	beq.n	8002ba6 <pvPortMalloc+0xbe>
 8002b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b98:	f383 8811 	msr	BASEPRI, r3
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	e7fe      	b.n	8002ba4 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002ba6:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002ba8:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002baa:	f7ff ff79 	bl	8002aa0 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002bae:	4913      	ldr	r1, [pc, #76]	; (8002bfc <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002bb0:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002bb2:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002bb4:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002bb6:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002bb8:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8002bba:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002bbe:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002bc2:	bf38      	it	cc
 8002bc4:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002bc6:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002bc8:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002bca:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002bcc:	f000 fae8 	bl	80031a0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002bd0:	0763      	lsls	r3, r4, #29
 8002bd2:	d008      	beq.n	8002be6 <pvPortMalloc+0xfe>
 8002bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd8:	f383 8811 	msr	BASEPRI, r3
 8002bdc:	f3bf 8f6f 	isb	sy
 8002be0:	f3bf 8f4f 	dsb	sy
 8002be4:	e7fe      	b.n	8002be4 <pvPortMalloc+0xfc>
}
 8002be6:	4620      	mov	r0, r4
 8002be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bec:	20000398 	.word	0x20000398
 8002bf0:	20003f9c 	.word	0x20003f9c
 8002bf4:	2000039c 	.word	0x2000039c
 8002bf8:	20003fa8 	.word	0x20003fa8
 8002bfc:	20003fa4 	.word	0x20003fa4
 8002c00:	20003fa0 	.word	0x20003fa0

08002c04 <vPortFree>:
{
 8002c04:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002c06:	4604      	mov	r4, r0
 8002c08:	b370      	cbz	r0, 8002c68 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002c0a:	4a18      	ldr	r2, [pc, #96]	; (8002c6c <vPortFree+0x68>)
 8002c0c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002c10:	6812      	ldr	r2, [r2, #0]
 8002c12:	4213      	tst	r3, r2
 8002c14:	d108      	bne.n	8002c28 <vPortFree+0x24>
 8002c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1a:	f383 8811 	msr	BASEPRI, r3
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	f3bf 8f4f 	dsb	sy
 8002c26:	e7fe      	b.n	8002c26 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002c28:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002c2c:	b141      	cbz	r1, 8002c40 <vPortFree+0x3c>
 8002c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c32:	f383 8811 	msr	BASEPRI, r3
 8002c36:	f3bf 8f6f 	isb	sy
 8002c3a:	f3bf 8f4f 	dsb	sy
 8002c3e:	e7fe      	b.n	8002c3e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002c40:	ea23 0302 	bic.w	r3, r3, r2
 8002c44:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002c48:	f000 fa10 	bl	800306c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002c4c:	4a08      	ldr	r2, [pc, #32]	; (8002c70 <vPortFree+0x6c>)
 8002c4e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002c52:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002c54:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002c58:	440b      	add	r3, r1
 8002c5a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002c5c:	f7ff ff20 	bl	8002aa0 <prvInsertBlockIntoFreeList>
}
 8002c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002c64:	f000 ba9c 	b.w	80031a0 <xTaskResumeAll>
 8002c68:	bd10      	pop	{r4, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20003f9c 	.word	0x20003f9c
 8002c70:	20003fa0 	.word	0x20003fa0

08002c74 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c78:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002c7a:	f7ff fdf3 	bl	8002864 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002c7e:	4b2d      	ldr	r3, [pc, #180]	; (8002d34 <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8002c80:	4c2d      	ldr	r4, [pc, #180]	; (8002d38 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	4f2d      	ldr	r7, [pc, #180]	; (8002d3c <prvAddNewTaskToReadyList+0xc8>)
 8002c86:	3201      	adds	r2, #1
 8002c88:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002c8a:	6825      	ldr	r5, [r4, #0]
 8002c8c:	2d00      	cmp	r5, #0
 8002c8e:	d145      	bne.n	8002d1c <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002c90:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d11c      	bne.n	8002cd2 <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c98:	1978      	adds	r0, r7, r5
 8002c9a:	3514      	adds	r5, #20
 8002c9c:	f7ff fd39 	bl	8002712 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ca0:	2d8c      	cmp	r5, #140	; 0x8c
 8002ca2:	d1f9      	bne.n	8002c98 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002ca4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8002d68 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8002ca8:	4d25      	ldr	r5, [pc, #148]	; (8002d40 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 8002caa:	4640      	mov	r0, r8
 8002cac:	f7ff fd31 	bl	8002712 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002cb0:	4628      	mov	r0, r5
 8002cb2:	f7ff fd2e 	bl	8002712 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002cb6:	4823      	ldr	r0, [pc, #140]	; (8002d44 <prvAddNewTaskToReadyList+0xd0>)
 8002cb8:	f7ff fd2b 	bl	8002712 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002cbc:	4822      	ldr	r0, [pc, #136]	; (8002d48 <prvAddNewTaskToReadyList+0xd4>)
 8002cbe:	f7ff fd28 	bl	8002712 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002cc2:	4822      	ldr	r0, [pc, #136]	; (8002d4c <prvAddNewTaskToReadyList+0xd8>)
 8002cc4:	f7ff fd25 	bl	8002712 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002cc8:	4b21      	ldr	r3, [pc, #132]	; (8002d50 <prvAddNewTaskToReadyList+0xdc>)
 8002cca:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002cce:	4b21      	ldr	r3, [pc, #132]	; (8002d54 <prvAddNewTaskToReadyList+0xe0>)
 8002cd0:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8002cd2:	4a21      	ldr	r2, [pc, #132]	; (8002d58 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 8002cd4:	4921      	ldr	r1, [pc, #132]	; (8002d5c <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8002cd6:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002cd8:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002cda:	3301      	adds	r3, #1
 8002cdc:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002cde:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	4093      	lsls	r3, r2
 8002ce4:	4303      	orrs	r3, r0
 8002ce6:	2014      	movs	r0, #20
 8002ce8:	600b      	str	r3, [r1, #0]
 8002cea:	fb00 7002 	mla	r0, r0, r2, r7
 8002cee:	1d31      	adds	r1, r6, #4
 8002cf0:	f7ff fd1d 	bl	800272e <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002cf4:	f7ff fdd8 	bl	80028a8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002cf8:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <prvAddNewTaskToReadyList+0xec>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	b163      	cbz	r3, 8002d18 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002cfe:	6823      	ldr	r3, [r4, #0]
 8002d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d02:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d207      	bcs.n	8002d18 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8002d08:	4b16      	ldr	r3, [pc, #88]	; (8002d64 <prvAddNewTaskToReadyList+0xf0>)
 8002d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	f3bf 8f4f 	dsb	sy
 8002d14:	f3bf 8f6f 	isb	sy
 8002d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8002d1c:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <prvAddNewTaskToReadyList+0xec>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1d6      	bne.n	8002cd2 <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d24:	6823      	ldr	r3, [r4, #0]
 8002d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d28:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8002d2a:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002d2c:	bf98      	it	ls
 8002d2e:	6026      	strls	r6, [r4, #0]
 8002d30:	e7cf      	b.n	8002cd2 <prvAddNewTaskToReadyList+0x5e>
 8002d32:	bf00      	nop
 8002d34:	20004048 	.word	0x20004048
 8002d38:	20003fb0 	.word	0x20003fb0
 8002d3c:	20003fbc 	.word	0x20003fbc
 8002d40:	20004074 	.word	0x20004074
 8002d44:	20004090 	.word	0x20004090
 8002d48:	200040bc 	.word	0x200040bc
 8002d4c:	200040a8 	.word	0x200040a8
 8002d50:	20003fb4 	.word	0x20003fb4
 8002d54:	20003fb8 	.word	0x20003fb8
 8002d58:	20004058 	.word	0x20004058
 8002d5c:	2000405c 	.word	0x2000405c
 8002d60:	200040a4 	.word	0x200040a4
 8002d64:	e000ed04 	.word	0xe000ed04
 8002d68:	20004060 	.word	0x20004060

08002d6c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d6c:	4a06      	ldr	r2, [pc, #24]	; (8002d88 <prvResetNextTaskUnblockTime+0x1c>)
 8002d6e:	6813      	ldr	r3, [r2, #0]
 8002d70:	6819      	ldr	r1, [r3, #0]
 8002d72:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <prvResetNextTaskUnblockTime+0x20>)
 8002d74:	b919      	cbnz	r1, 8002d7e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002d76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d7e:	6812      	ldr	r2, [r2, #0]
 8002d80:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002d82:	68d2      	ldr	r2, [r2, #12]
 8002d84:	6852      	ldr	r2, [r2, #4]
 8002d86:	e7f8      	b.n	8002d7a <prvResetNextTaskUnblockTime+0xe>
 8002d88:	20003fb4 	.word	0x20003fb4
 8002d8c:	20004088 	.word	0x20004088

08002d90 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d94:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002d96:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002d9a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8002d9c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002da0:	3a01      	subs	r2, #1
 8002da2:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002da6:	469a      	mov	sl, r3
 8002da8:	4681      	mov	r9, r0
 8002daa:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002dac:	f026 0607 	bic.w	r6, r6, #7
 8002db0:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8002db4:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002db6:	7858      	ldrb	r0, [r3, #1]
 8002db8:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8002dbc:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8002dc0:	b108      	cbz	r0, 8002dc6 <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dc2:	428b      	cmp	r3, r1
 8002dc4:	d1f7      	bne.n	8002db6 <prvInitialiseNewTask.isra.2+0x26>
 8002dc6:	9d08      	ldr	r5, [sp, #32]
 8002dc8:	2d06      	cmp	r5, #6
 8002dca:	bf28      	it	cs
 8002dcc:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002dce:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 8002dd0:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002dd2:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002dd4:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002dd6:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8002dda:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ddc:	f7ff fca4 	bl	8002728 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002de0:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002de4:	f104 0018 	add.w	r0, r4, #24
 8002de8:	f7ff fc9e 	bl	8002728 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002dec:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002dee:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002df0:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002df2:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002df4:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002df8:	4652      	mov	r2, sl
 8002dfa:	4649      	mov	r1, r9
 8002dfc:	4630      	mov	r0, r6
 8002dfe:	f7ff fd09 	bl	8002814 <pxPortInitialiseStack>
 8002e02:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002e04:	f1b8 0f00 	cmp.w	r8, #0
 8002e08:	d001      	beq.n	8002e0e <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e0a:	f8c8 4000 	str.w	r4, [r8]
 8002e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002e12 <prvDeleteTCB>:
	{
 8002e12:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002e14:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8002e18:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002e1a:	b93b      	cbnz	r3, 8002e2c <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8002e1c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002e1e:	f7ff fef1 	bl	8002c04 <vPortFree>
				vPortFree( pxTCB );
 8002e22:	4620      	mov	r0, r4
	}
 8002e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8002e28:	f7ff beec 	b.w	8002c04 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d0f9      	beq.n	8002e24 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d008      	beq.n	8002e46 <prvDeleteTCB+0x34>
 8002e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e38:	f383 8811 	msr	BASEPRI, r3
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	e7fe      	b.n	8002e44 <prvDeleteTCB+0x32>
 8002e46:	bd10      	pop	{r4, pc}

08002e48 <prvIdleTask>:
{
 8002e48:	b580      	push	{r7, lr}
				taskYIELD();
 8002e4a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8002ea8 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002e4e:	4f12      	ldr	r7, [pc, #72]	; (8002e98 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e50:	4c12      	ldr	r4, [pc, #72]	; (8002e9c <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8002e52:	4d13      	ldr	r5, [pc, #76]	; (8002ea0 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e54:	6823      	ldr	r3, [r4, #0]
 8002e56:	b963      	cbnz	r3, 8002e72 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002e58:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <prvIdleTask+0x5c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d9f8      	bls.n	8002e52 <prvIdleTask+0xa>
				taskYIELD();
 8002e60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002e64:	f8c8 3000 	str.w	r3, [r8]
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	e7ee      	b.n	8002e50 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8002e72:	f7ff fcf7 	bl	8002864 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e7a:	1d30      	adds	r0, r6, #4
 8002e7c:	f7ff fc7a 	bl	8002774 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002e80:	682b      	ldr	r3, [r5, #0]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002e86:	6823      	ldr	r3, [r4, #0]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8002e8c:	f7ff fd0c 	bl	80028a8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8002e90:	4630      	mov	r0, r6
 8002e92:	f7ff ffbe 	bl	8002e12 <prvDeleteTCB>
 8002e96:	e7dd      	b.n	8002e54 <prvIdleTask+0xc>
 8002e98:	200040bc 	.word	0x200040bc
 8002e9c:	2000404c 	.word	0x2000404c
 8002ea0:	20004048 	.word	0x20004048
 8002ea4:	20003fbc 	.word	0x20003fbc
 8002ea8:	e000ed04 	.word	0xe000ed04

08002eac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002eae:	4b1b      	ldr	r3, [pc, #108]	; (8002f1c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002eb0:	4e1b      	ldr	r6, [pc, #108]	; (8002f20 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8002eb2:	681d      	ldr	r5, [r3, #0]
{
 8002eb4:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002eb6:	6830      	ldr	r0, [r6, #0]
 8002eb8:	3004      	adds	r0, #4
{
 8002eba:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ebc:	f7ff fc5a 	bl	8002774 <uxListRemove>
 8002ec0:	4633      	mov	r3, r6
 8002ec2:	b940      	cbnz	r0, 8002ed6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002ec4:	6831      	ldr	r1, [r6, #0]
 8002ec6:	4e17      	ldr	r6, [pc, #92]	; (8002f24 <prvAddCurrentTaskToDelayedList+0x78>)
 8002ec8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002eca:	6832      	ldr	r2, [r6, #0]
 8002ecc:	2001      	movs	r0, #1
 8002ece:	4088      	lsls	r0, r1
 8002ed0:	ea22 0200 	bic.w	r2, r2, r0
 8002ed4:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002ed6:	1c62      	adds	r2, r4, #1
 8002ed8:	d107      	bne.n	8002eea <prvAddCurrentTaskToDelayedList+0x3e>
 8002eda:	b137      	cbz	r7, 8002eea <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002edc:	6819      	ldr	r1, [r3, #0]
 8002ede:	4812      	ldr	r0, [pc, #72]	; (8002f28 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002ee0:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002ee2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ee6:	f7ff bc22 	b.w	800272e <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002eea:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002eec:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8002eee:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002ef0:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002ef2:	d907      	bls.n	8002f04 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ef4:	4a0d      	ldr	r2, [pc, #52]	; (8002f2c <prvAddCurrentTaskToDelayedList+0x80>)
 8002ef6:	6810      	ldr	r0, [r2, #0]
 8002ef8:	6819      	ldr	r1, [r3, #0]
}
 8002efa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002efe:	3104      	adds	r1, #4
 8002f00:	f7ff bc21 	b.w	8002746 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f04:	4a0a      	ldr	r2, [pc, #40]	; (8002f30 <prvAddCurrentTaskToDelayedList+0x84>)
 8002f06:	6810      	ldr	r0, [r2, #0]
 8002f08:	6819      	ldr	r1, [r3, #0]
 8002f0a:	3104      	adds	r1, #4
 8002f0c:	f7ff fc1b 	bl	8002746 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002f10:	4b08      	ldr	r3, [pc, #32]	; (8002f34 <prvAddCurrentTaskToDelayedList+0x88>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8002f16:	bf38      	it	cc
 8002f18:	601c      	strcc	r4, [r3, #0]
 8002f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f1c:	200040d0 	.word	0x200040d0
 8002f20:	20003fb0 	.word	0x20003fb0
 8002f24:	2000405c 	.word	0x2000405c
 8002f28:	200040a8 	.word	0x200040a8
 8002f2c:	20003fb8 	.word	0x20003fb8
 8002f30:	20003fb4 	.word	0x20003fb4
 8002f34:	20004088 	.word	0x20004088

08002f38 <xTaskCreateStatic>:
	{
 8002f38:	b570      	push	{r4, r5, r6, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002f3e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8002f40:	b945      	cbnz	r5, 8002f54 <xTaskCreateStatic+0x1c>
 8002f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f46:	f383 8811 	msr	BASEPRI, r3
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	e7fe      	b.n	8002f52 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8002f54:	b944      	cbnz	r4, 8002f68 <xTaskCreateStatic+0x30>
 8002f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5a:	f383 8811 	msr	BASEPRI, r3
 8002f5e:	f3bf 8f6f 	isb	sy
 8002f62:	f3bf 8f4f 	dsb	sy
 8002f66:	e7fe      	b.n	8002f66 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8002f68:	2654      	movs	r6, #84	; 0x54
 8002f6a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002f6c:	9e04      	ldr	r6, [sp, #16]
 8002f6e:	2e54      	cmp	r6, #84	; 0x54
 8002f70:	d008      	beq.n	8002f84 <xTaskCreateStatic+0x4c>
 8002f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f76:	f383 8811 	msr	BASEPRI, r3
 8002f7a:	f3bf 8f6f 	isb	sy
 8002f7e:	f3bf 8f4f 	dsb	sy
 8002f82:	e7fe      	b.n	8002f82 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002f84:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002f86:	2502      	movs	r5, #2
 8002f88:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002f8c:	ad05      	add	r5, sp, #20
 8002f8e:	9501      	str	r5, [sp, #4]
 8002f90:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002f92:	9402      	str	r4, [sp, #8]
 8002f94:	9500      	str	r5, [sp, #0]
 8002f96:	f7ff fefb 	bl	8002d90 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	f7ff fe6a 	bl	8002c74 <prvAddNewTaskToReadyList>
	}
 8002fa0:	9805      	ldr	r0, [sp, #20]
 8002fa2:	b006      	add	sp, #24
 8002fa4:	bd70      	pop	{r4, r5, r6, pc}

08002fa6 <xTaskCreate>:
	{
 8002fa6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002faa:	4607      	mov	r7, r0
 8002fac:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fae:	0090      	lsls	r0, r2, #2
	{
 8002fb0:	4688      	mov	r8, r1
 8002fb2:	4616      	mov	r6, r2
 8002fb4:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fb6:	f7ff fd97 	bl	8002ae8 <pvPortMalloc>
			if( pxStack != NULL )
 8002fba:	4605      	mov	r5, r0
 8002fbc:	b1e8      	cbz	r0, 8002ffa <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002fbe:	2054      	movs	r0, #84	; 0x54
 8002fc0:	f7ff fd92 	bl	8002ae8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002fc4:	4604      	mov	r4, r0
 8002fc6:	b1a8      	cbz	r0, 8002ff4 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002fce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8002fd0:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002fd2:	9301      	str	r3, [sp, #4]
 8002fd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002fd6:	9002      	str	r0, [sp, #8]
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	4632      	mov	r2, r6
 8002fdc:	464b      	mov	r3, r9
 8002fde:	4641      	mov	r1, r8
 8002fe0:	4638      	mov	r0, r7
 8002fe2:	f7ff fed5 	bl	8002d90 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	f7ff fe44 	bl	8002c74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002fec:	2001      	movs	r0, #1
	}
 8002fee:	b005      	add	sp, #20
 8002ff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8002ff4:	4628      	mov	r0, r5
 8002ff6:	f7ff fe05 	bl	8002c04 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ffa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8002ffe:	e7f6      	b.n	8002fee <xTaskCreate+0x48>

08003000 <vTaskStartScheduler>:
{
 8003000:	b510      	push	{r4, lr}
 8003002:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003004:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003006:	aa07      	add	r2, sp, #28
 8003008:	a906      	add	r1, sp, #24
 800300a:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800300c:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800300e:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003010:	f000 f99c 	bl	800334c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003014:	9b05      	ldr	r3, [sp, #20]
 8003016:	9302      	str	r3, [sp, #8]
 8003018:	9b06      	ldr	r3, [sp, #24]
 800301a:	9301      	str	r3, [sp, #4]
 800301c:	9400      	str	r4, [sp, #0]
 800301e:	4623      	mov	r3, r4
 8003020:	9a07      	ldr	r2, [sp, #28]
 8003022:	490d      	ldr	r1, [pc, #52]	; (8003058 <vTaskStartScheduler+0x58>)
 8003024:	480d      	ldr	r0, [pc, #52]	; (800305c <vTaskStartScheduler+0x5c>)
 8003026:	f7ff ff87 	bl	8002f38 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800302a:	b190      	cbz	r0, 8003052 <vTaskStartScheduler+0x52>
 800302c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003030:	f383 8811 	msr	BASEPRI, r3
 8003034:	f3bf 8f6f 	isb	sy
 8003038:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800303c:	4b08      	ldr	r3, [pc, #32]	; (8003060 <vTaskStartScheduler+0x60>)
 800303e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003042:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003044:	4b07      	ldr	r3, [pc, #28]	; (8003064 <vTaskStartScheduler+0x64>)
 8003046:	2201      	movs	r2, #1
 8003048:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800304a:	4b07      	ldr	r3, [pc, #28]	; (8003068 <vTaskStartScheduler+0x68>)
 800304c:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800304e:	f7ff fca1 	bl	8002994 <xPortStartScheduler>
}
 8003052:	b008      	add	sp, #32
 8003054:	bd10      	pop	{r4, pc}
 8003056:	bf00      	nop
 8003058:	08003d71 	.word	0x08003d71
 800305c:	08002e49 	.word	0x08002e49
 8003060:	20004088 	.word	0x20004088
 8003064:	200040a4 	.word	0x200040a4
 8003068:	200040d0 	.word	0x200040d0

0800306c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800306c:	4a02      	ldr	r2, [pc, #8]	; (8003078 <vTaskSuspendAll+0xc>)
 800306e:	6813      	ldr	r3, [r2, #0]
 8003070:	3301      	adds	r3, #1
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	20004054 	.word	0x20004054

0800307c <xTaskIncrementTick>:
{
 800307c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003080:	4b3c      	ldr	r3, [pc, #240]	; (8003174 <xTaskIncrementTick+0xf8>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d153      	bne.n	8003130 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003088:	4b3b      	ldr	r3, [pc, #236]	; (8003178 <xTaskIncrementTick+0xfc>)
 800308a:	681c      	ldr	r4, [r3, #0]
 800308c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800308e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003090:	b9bc      	cbnz	r4, 80030c2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003092:	4b3a      	ldr	r3, [pc, #232]	; (800317c <xTaskIncrementTick+0x100>)
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	b142      	cbz	r2, 80030ac <xTaskIncrementTick+0x30>
 800309a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309e:	f383 8811 	msr	BASEPRI, r3
 80030a2:	f3bf 8f6f 	isb	sy
 80030a6:	f3bf 8f4f 	dsb	sy
 80030aa:	e7fe      	b.n	80030aa <xTaskIncrementTick+0x2e>
 80030ac:	4a34      	ldr	r2, [pc, #208]	; (8003180 <xTaskIncrementTick+0x104>)
 80030ae:	6819      	ldr	r1, [r3, #0]
 80030b0:	6810      	ldr	r0, [r2, #0]
 80030b2:	6018      	str	r0, [r3, #0]
 80030b4:	6011      	str	r1, [r2, #0]
 80030b6:	4a33      	ldr	r2, [pc, #204]	; (8003184 <xTaskIncrementTick+0x108>)
 80030b8:	6813      	ldr	r3, [r2, #0]
 80030ba:	3301      	adds	r3, #1
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	f7ff fe55 	bl	8002d6c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80030c2:	4d31      	ldr	r5, [pc, #196]	; (8003188 <xTaskIncrementTick+0x10c>)
 80030c4:	4f31      	ldr	r7, [pc, #196]	; (800318c <xTaskIncrementTick+0x110>)
 80030c6:	682b      	ldr	r3, [r5, #0]
 80030c8:	429c      	cmp	r4, r3
 80030ca:	f04f 0b00 	mov.w	fp, #0
 80030ce:	d33e      	bcc.n	800314e <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030d0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800317c <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80030d4:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800319c <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030d8:	f8d8 2000 	ldr.w	r2, [r8]
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	bb72      	cbnz	r2, 800313e <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030e4:	602a      	str	r2, [r5, #0]
					break;
 80030e6:	e032      	b.n	800314e <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030e8:	f106 0a04 	add.w	sl, r6, #4
 80030ec:	4650      	mov	r0, sl
 80030ee:	f7ff fb41 	bl	8002774 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80030f2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80030f4:	b119      	cbz	r1, 80030fe <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030f6:	f106 0018 	add.w	r0, r6, #24
 80030fa:	f7ff fb3b 	bl	8002774 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030fe:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003100:	f8d9 3000 	ldr.w	r3, [r9]
 8003104:	2201      	movs	r2, #1
 8003106:	fa02 f100 	lsl.w	r1, r2, r0
 800310a:	4319      	orrs	r1, r3
 800310c:	4b20      	ldr	r3, [pc, #128]	; (8003190 <xTaskIncrementTick+0x114>)
 800310e:	f8c9 1000 	str.w	r1, [r9]
 8003112:	f04f 0e14 	mov.w	lr, #20
 8003116:	4651      	mov	r1, sl
 8003118:	fb0e 3000 	mla	r0, lr, r0, r3
 800311c:	f7ff fb07 	bl	800272e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003120:	6838      	ldr	r0, [r7, #0]
 8003122:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8003124:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8003126:	4291      	cmp	r1, r2
 8003128:	bf28      	it	cs
 800312a:	f04f 0b01 	movcs.w	fp, #1
 800312e:	e7d3      	b.n	80030d8 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8003130:	4a18      	ldr	r2, [pc, #96]	; (8003194 <xTaskIncrementTick+0x118>)
 8003132:	6813      	ldr	r3, [r2, #0]
 8003134:	3301      	adds	r3, #1
 8003136:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8003138:	f04f 0b00 	mov.w	fp, #0
 800313c:	e011      	b.n	8003162 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800313e:	f8d8 2000 	ldr.w	r2, [r8]
 8003142:	68d2      	ldr	r2, [r2, #12]
 8003144:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003146:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003148:	428c      	cmp	r4, r1
 800314a:	d2cd      	bcs.n	80030e8 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 800314c:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <xTaskIncrementTick+0x114>)
 8003152:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003154:	2214      	movs	r2, #20
 8003156:	434a      	muls	r2, r1
 8003158:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800315a:	2a02      	cmp	r2, #2
 800315c:	bf28      	it	cs
 800315e:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8003162:	4a0d      	ldr	r2, [pc, #52]	; (8003198 <xTaskIncrementTick+0x11c>)
 8003164:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8003166:	2a00      	cmp	r2, #0
 8003168:	bf18      	it	ne
 800316a:	f04f 0b01 	movne.w	fp, #1
}
 800316e:	4658      	mov	r0, fp
 8003170:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003174:	20004054 	.word	0x20004054
 8003178:	200040d0 	.word	0x200040d0
 800317c:	20003fb4 	.word	0x20003fb4
 8003180:	20003fb8 	.word	0x20003fb8
 8003184:	2000408c 	.word	0x2000408c
 8003188:	20004088 	.word	0x20004088
 800318c:	20003fb0 	.word	0x20003fb0
 8003190:	20003fbc 	.word	0x20003fbc
 8003194:	20004050 	.word	0x20004050
 8003198:	200040d4 	.word	0x200040d4
 800319c:	2000405c 	.word	0x2000405c

080031a0 <xTaskResumeAll>:
{
 80031a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80031a4:	4c31      	ldr	r4, [pc, #196]	; (800326c <xTaskResumeAll+0xcc>)
 80031a6:	6823      	ldr	r3, [r4, #0]
 80031a8:	b943      	cbnz	r3, 80031bc <xTaskResumeAll+0x1c>
 80031aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ae:	f383 8811 	msr	BASEPRI, r3
 80031b2:	f3bf 8f6f 	isb	sy
 80031b6:	f3bf 8f4f 	dsb	sy
 80031ba:	e7fe      	b.n	80031ba <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80031bc:	f7ff fb52 	bl	8002864 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80031c0:	6823      	ldr	r3, [r4, #0]
 80031c2:	3b01      	subs	r3, #1
 80031c4:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031c6:	6824      	ldr	r4, [r4, #0]
 80031c8:	b12c      	cbz	r4, 80031d6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80031ca:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80031cc:	f7ff fb6c 	bl	80028a8 <vPortExitCritical>
}
 80031d0:	4620      	mov	r0, r4
 80031d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031d6:	4b26      	ldr	r3, [pc, #152]	; (8003270 <xTaskResumeAll+0xd0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f5      	beq.n	80031ca <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031de:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8003288 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 80031e2:	4f24      	ldr	r7, [pc, #144]	; (8003274 <xTaskResumeAll+0xd4>)
 80031e4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800328c <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031e8:	f8d9 3000 	ldr.w	r3, [r9]
 80031ec:	b9e3      	cbnz	r3, 8003228 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 80031ee:	b10c      	cbz	r4, 80031f4 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 80031f0:	f7ff fdbc 	bl	8002d6c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80031f4:	4d20      	ldr	r5, [pc, #128]	; (8003278 <xTaskResumeAll+0xd8>)
 80031f6:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80031f8:	b144      	cbz	r4, 800320c <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 80031fa:	4e20      	ldr	r6, [pc, #128]	; (800327c <xTaskResumeAll+0xdc>)
 80031fc:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80031fe:	f7ff ff3d 	bl	800307c <xTaskIncrementTick>
 8003202:	b100      	cbz	r0, 8003206 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8003204:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003206:	3c01      	subs	r4, #1
 8003208:	d1f9      	bne.n	80031fe <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 800320a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800320c:	4b1b      	ldr	r3, [pc, #108]	; (800327c <xTaskResumeAll+0xdc>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0da      	beq.n	80031ca <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8003214:	4b1a      	ldr	r3, [pc, #104]	; (8003280 <xTaskResumeAll+0xe0>)
 8003216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	f3bf 8f4f 	dsb	sy
 8003220:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003224:	2401      	movs	r4, #1
 8003226:	e7d1      	b.n	80031cc <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003228:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800322c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800322e:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003230:	f104 0018 	add.w	r0, r4, #24
 8003234:	f7ff fa9e 	bl	8002774 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003238:	4630      	mov	r0, r6
 800323a:	f7ff fa9b 	bl	8002774 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800323e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003240:	6839      	ldr	r1, [r7, #0]
 8003242:	2501      	movs	r5, #1
 8003244:	fa05 f302 	lsl.w	r3, r5, r2
 8003248:	2014      	movs	r0, #20
 800324a:	430b      	orrs	r3, r1
 800324c:	fb00 8002 	mla	r0, r0, r2, r8
 8003250:	4631      	mov	r1, r6
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	f7ff fa6b 	bl	800272e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003258:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <xTaskResumeAll+0xe4>)
 800325a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8003262:	bf24      	itt	cs
 8003264:	4b05      	ldrcs	r3, [pc, #20]	; (800327c <xTaskResumeAll+0xdc>)
 8003266:	601d      	strcs	r5, [r3, #0]
 8003268:	e7be      	b.n	80031e8 <xTaskResumeAll+0x48>
 800326a:	bf00      	nop
 800326c:	20004054 	.word	0x20004054
 8003270:	20004048 	.word	0x20004048
 8003274:	2000405c 	.word	0x2000405c
 8003278:	20004050 	.word	0x20004050
 800327c:	200040d4 	.word	0x200040d4
 8003280:	e000ed04 	.word	0xe000ed04
 8003284:	20003fb0 	.word	0x20003fb0
 8003288:	20004090 	.word	0x20004090
 800328c:	20003fbc 	.word	0x20003fbc

08003290 <vTaskDelay>:
	{
 8003290:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003292:	b940      	cbnz	r0, 80032a6 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8003294:	4b0e      	ldr	r3, [pc, #56]	; (80032d0 <vTaskDelay+0x40>)
 8003296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	f3bf 8f6f 	isb	sy
 80032a4:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80032a6:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <vTaskDelay+0x44>)
 80032a8:	6819      	ldr	r1, [r3, #0]
 80032aa:	b141      	cbz	r1, 80032be <vTaskDelay+0x2e>
 80032ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b0:	f383 8811 	msr	BASEPRI, r3
 80032b4:	f3bf 8f6f 	isb	sy
 80032b8:	f3bf 8f4f 	dsb	sy
 80032bc:	e7fe      	b.n	80032bc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80032be:	f7ff fed5 	bl	800306c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80032c2:	f7ff fdf3 	bl	8002eac <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80032c6:	f7ff ff6b 	bl	80031a0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80032ca:	2800      	cmp	r0, #0
 80032cc:	d0e2      	beq.n	8003294 <vTaskDelay+0x4>
 80032ce:	bd08      	pop	{r3, pc}
 80032d0:	e000ed04 	.word	0xe000ed04
 80032d4:	20004054 	.word	0x20004054

080032d8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032d8:	4b17      	ldr	r3, [pc, #92]	; (8003338 <vTaskSwitchContext+0x60>)
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	4b17      	ldr	r3, [pc, #92]	; (800333c <vTaskSwitchContext+0x64>)
{
 80032de:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032e0:	b112      	cbz	r2, 80032e8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80032e2:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80032e8:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80032ea:	4b15      	ldr	r3, [pc, #84]	; (8003340 <vTaskSwitchContext+0x68>)
 80032ec:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032ee:	fab3 f383 	clz	r3, r3
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	f1c3 031f 	rsb	r3, r3, #31
 80032f8:	2214      	movs	r2, #20
 80032fa:	4912      	ldr	r1, [pc, #72]	; (8003344 <vTaskSwitchContext+0x6c>)
 80032fc:	435a      	muls	r2, r3
 80032fe:	1888      	adds	r0, r1, r2
 8003300:	588c      	ldr	r4, [r1, r2]
 8003302:	b944      	cbnz	r4, 8003316 <vTaskSwitchContext+0x3e>
	__asm volatile
 8003304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003308:	f383 8811 	msr	BASEPRI, r3
 800330c:	f3bf 8f6f 	isb	sy
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	e7fe      	b.n	8003314 <vTaskSwitchContext+0x3c>
 8003316:	6844      	ldr	r4, [r0, #4]
 8003318:	3208      	adds	r2, #8
 800331a:	6864      	ldr	r4, [r4, #4]
 800331c:	6044      	str	r4, [r0, #4]
 800331e:	440a      	add	r2, r1
 8003320:	4294      	cmp	r4, r2
 8003322:	bf04      	itt	eq
 8003324:	6862      	ldreq	r2, [r4, #4]
 8003326:	6042      	streq	r2, [r0, #4]
 8003328:	2214      	movs	r2, #20
 800332a:	fb02 1303 	mla	r3, r2, r3, r1
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	4b05      	ldr	r3, [pc, #20]	; (8003348 <vTaskSwitchContext+0x70>)
 8003334:	e7d6      	b.n	80032e4 <vTaskSwitchContext+0xc>
 8003336:	bf00      	nop
 8003338:	20004054 	.word	0x20004054
 800333c:	200040d4 	.word	0x200040d4
 8003340:	2000405c 	.word	0x2000405c
 8003344:	20003fbc 	.word	0x20003fbc
 8003348:	20003fb0 	.word	0x20003fb0

0800334c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800334c:	4b03      	ldr	r3, [pc, #12]	; (800335c <vApplicationGetIdleTaskMemory+0x10>)
 800334e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003350:	4b03      	ldr	r3, [pc, #12]	; (8003360 <vApplicationGetIdleTaskMemory+0x14>)
 8003352:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003354:	2380      	movs	r3, #128	; 0x80
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	200042d8 	.word	0x200042d8
 8003360:	200040d8 	.word	0x200040d8

08003364 <Error_Handler>:
//}

void Error_Handler(uint16_t error)
{
  /* Backup error number */
  gLastError = error;
 8003364:	4b01      	ldr	r3, [pc, #4]	; (800336c <Error_Handler+0x8>)
 8003366:	8018      	strh	r0, [r3, #0]
 8003368:	e7fe      	b.n	8003368 <Error_Handler+0x4>
 800336a:	bf00      	nop
 800336c:	2000432e 	.word	0x2000432e

08003370 <ledOnOff>:
{
 8003370:	b510      	push	{r4, lr}
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003372:	4c0a      	ldr	r4, [pc, #40]	; (800339c <ledOnOff+0x2c>)
 8003374:	2200      	movs	r2, #0
 8003376:	2120      	movs	r1, #32
 8003378:	4620      	mov	r0, r4
 800337a:	f7fe f907 	bl	800158c <HAL_GPIO_WritePin>
		vTaskDelay(xDelay);
 800337e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003382:	f7ff ff85 	bl	8003290 <vTaskDelay>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8003386:	4620      	mov	r0, r4
 8003388:	2201      	movs	r2, #1
 800338a:	2120      	movs	r1, #32
 800338c:	f7fe f8fe 	bl	800158c <HAL_GPIO_WritePin>
		vTaskDelay(xDelay);
 8003390:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003394:	f7ff ff7c 	bl	8003290 <vTaskDelay>
 8003398:	e7ec      	b.n	8003374 <ledOnOff+0x4>
 800339a:	bf00      	nop
 800339c:	40020000 	.word	0x40020000

080033a0 <motorOnOff>:
{
 80033a0:	b570      	push	{r4, r5, r6, lr}
		if (motorOn) {
 80033a2:	4e13      	ldr	r6, [pc, #76]	; (80033f0 <motorOnOff+0x50>)
			if (speed_setting > 100) {
 80033a4:	4d13      	ldr	r5, [pc, #76]	; (80033f4 <motorOnOff+0x54>)
		if (motorOn) {
 80033a6:	8834      	ldrh	r4, [r6, #0]
 80033a8:	b224      	sxth	r4, r4
 80033aa:	b1bc      	cbz	r4, 80033dc <motorOnOff+0x3c>
			if (speed_setting > 100) {
 80033ac:	682b      	ldr	r3, [r5, #0]
 80033ae:	2b64      	cmp	r3, #100	; 0x64
				max_speed = (uint16_t)speed_setting;
 80033b0:	bfd4      	ite	le
 80033b2:	6829      	ldrle	r1, [r5, #0]
 80033b4:	2164      	movgt	r1, #100	; 0x64
			BSP_MotorControl_SetMaxSpeed(0, max_speed);
 80033b6:	b289      	uxth	r1, r1
 80033b8:	2000      	movs	r0, #0
 80033ba:	f7fd fe51 	bl	8001060 <BSP_MotorControl_SetMaxSpeed>
			vTaskDelay(commandDelay);
 80033be:	2064      	movs	r0, #100	; 0x64
 80033c0:	f7ff ff66 	bl	8003290 <vTaskDelay>
			BSP_MotorControl_Run(0, FORWARD);
 80033c4:	2101      	movs	r1, #1
 80033c6:	2000      	movs	r0, #0
			BSP_MotorControl_Run(0, FORWARD);
 80033c8:	f7fd fe3e 	bl	8001048 <BSP_MotorControl_Run>
			vTaskDelay(commandDelay);
 80033cc:	2064      	movs	r0, #100	; 0x64
 80033ce:	f7ff ff5f 	bl	8003290 <vTaskDelay>
		vTaskDelay(loopDelay);
 80033d2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80033d6:	f7ff ff5b 	bl	8003290 <vTaskDelay>
		if (motorOn) {
 80033da:	e7e4      	b.n	80033a6 <motorOnOff+0x6>
			BSP_MotorControl_SetMaxSpeed(0, 0);
 80033dc:	4621      	mov	r1, r4
 80033de:	4620      	mov	r0, r4
 80033e0:	f7fd fe3e 	bl	8001060 <BSP_MotorControl_SetMaxSpeed>
			vTaskDelay(commandDelay);
 80033e4:	2064      	movs	r0, #100	; 0x64
 80033e6:	f7ff ff53 	bl	8003290 <vTaskDelay>
			BSP_MotorControl_Run(0, FORWARD);
 80033ea:	2101      	movs	r1, #1
 80033ec:	4620      	mov	r0, r4
 80033ee:	e7eb      	b.n	80033c8 <motorOnOff+0x28>
 80033f0:	20004330 	.word	0x20004330
 80033f4:	20004338 	.word	0x20004338

080033f8 <rec_bytes>:
{
 80033f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
		ret_value = HAL_UART_Receive(&huart2,
 80033fa:	4c14      	ldr	r4, [pc, #80]	; (800344c <rec_bytes+0x54>)
			HAL_UART_Transmit(&huart2,
 80033fc:	4d14      	ldr	r5, [pc, #80]	; (8003450 <rec_bytes+0x58>)
			speed_setting = atoi((const char *)rec_buff);
 80033fe:	4e15      	ldr	r6, [pc, #84]	; (8003454 <rec_bytes+0x5c>)
		ret_value = HAL_UART_Receive(&huart2,
 8003400:	4812      	ldr	r0, [pc, #72]	; (800344c <rec_bytes+0x54>)
 8003402:	2204      	movs	r2, #4
 8003404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003408:	eb0d 0102 	add.w	r1, sp, r2
 800340c:	f7ff f803 	bl	8002416 <HAL_UART_Receive>
		if (ret_value == HAL_OK) {
 8003410:	b998      	cbnz	r0, 800343a <rec_bytes+0x42>
			speed_setting = atoi((const char *)rec_buff);
 8003412:	a801      	add	r0, sp, #4
 8003414:	f000 fba3 	bl	8003b5e <atoi>
 8003418:	6030      	str	r0, [r6, #0]
			vTaskDelay(xDelay);
 800341a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800341e:	f7ff ff37 	bl	8003290 <vTaskDelay>
			HAL_UART_Transmit(&huart2,
 8003422:	2204      	movs	r2, #4
 8003424:	230a      	movs	r3, #10
 8003426:	eb0d 0102 	add.w	r1, sp, r2
			HAL_UART_Transmit(&huart2,
 800342a:	4620      	mov	r0, r4
 800342c:	f7fe ff96 	bl	800235c <HAL_UART_Transmit>
			vTaskDelay(xDelay);
 8003430:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003434:	f7ff ff2c 	bl	8003290 <vTaskDelay>
 8003438:	e7e2      	b.n	8003400 <rec_bytes+0x8>
			vTaskDelay(xDelay);
 800343a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800343e:	f7ff ff27 	bl	8003290 <vTaskDelay>
			HAL_UART_Transmit(&huart2,
 8003442:	230a      	movs	r3, #10
 8003444:	2204      	movs	r2, #4
 8003446:	4629      	mov	r1, r5
 8003448:	e7ef      	b.n	800342a <rec_bytes+0x32>
 800344a:	bf00      	nop
 800344c:	20004474 	.word	0x20004474
 8003450:	08003d93 	.word	0x08003d93
 8003454:	20004338 	.word	0x20004338

08003458 <StartDefaultTask>:
{
 8003458:	b508      	push	{r3, lr}
    osDelay(1);
 800345a:	2001      	movs	r0, #1
 800345c:	f7ff f951 	bl	8002702 <osDelay>
 8003460:	e7fb      	b.n	800345a <StartDefaultTask+0x2>
	...

08003464 <MyFlagInterruptHandler>:
  * @brief  This function is the User handler for the flag interrupt
  * @param  None
  * @retval None
  */
void MyFlagInterruptHandler(void)
{
 8003464:	b508      	push	{r3, lr}
  /* Code to be customised */
  /************************/
  /* Get the state of bridge A */
  uint16_t bridgeState  = BSP_MotorControl_CmdGetStatus(0);
 8003466:	2000      	movs	r0, #0
 8003468:	f7fd fe0c 	bl	8001084 <BSP_MotorControl_CmdGetStatus>

  if (bridgeState == 0)
 800346c:	b940      	cbnz	r0, 8003480 <MyFlagInterruptHandler+0x1c>
  {
    if (BSP_MotorControl_GetDeviceState(0) != INACTIVE)
 800346e:	f7fd fdd9 	bl	8001024 <BSP_MotorControl_GetDeviceState>
 8003472:	2808      	cmp	r0, #8
 8003474:	d004      	beq.n	8003480 <MyFlagInterruptHandler+0x1c>
  gLastError = error;
 8003476:	4b03      	ldr	r3, [pc, #12]	; (8003484 <MyFlagInterruptHandler+0x20>)
 8003478:	f64b 22d0 	movw	r2, #47824	; 0xbad0
 800347c:	801a      	strh	r2, [r3, #0]
 800347e:	e7fe      	b.n	800347e <MyFlagInterruptHandler+0x1a>
 8003480:	bd08      	pop	{r3, pc}
 8003482:	bf00      	nop
 8003484:	2000432e 	.word	0x2000432e

08003488 <SystemClock_Config>:
{
 8003488:	b570      	push	{r4, r5, r6, lr}
 800348a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800348c:	2230      	movs	r2, #48	; 0x30
 800348e:	2100      	movs	r1, #0
 8003490:	a808      	add	r0, sp, #32
 8003492:	f000 fb8d 	bl	8003bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003496:	2214      	movs	r2, #20
 8003498:	2100      	movs	r1, #0
 800349a:	a803      	add	r0, sp, #12
 800349c:	f000 fb88 	bl	8003bb0 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80034a0:	2600      	movs	r6, #0
 80034a2:	4b21      	ldr	r3, [pc, #132]	; (8003528 <SystemClock_Config+0xa0>)
 80034a4:	9601      	str	r6, [sp, #4]
 80034a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80034ac:	641a      	str	r2, [r3, #64]	; 0x40
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80034b0:	4a1e      	ldr	r2, [pc, #120]	; (800352c <SystemClock_Config+0xa4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80034b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b6:	9301      	str	r3, [sp, #4]
 80034b8:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80034ba:	9602      	str	r6, [sp, #8]
 80034bc:	6813      	ldr	r3, [r2, #0]
 80034be:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80034c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034c6:	6013      	str	r3, [r2, #0]
 80034c8:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80034ca:	960f      	str	r6, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80034cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80034d0:	9302      	str	r3, [sp, #8]
 80034d2:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034d4:	2301      	movs	r3, #1
 80034d6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80034d8:	2310      	movs	r3, #16
 80034da:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 80034dc:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80034de:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80034e2:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80034e4:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80034e6:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80034e8:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034ea:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80034ec:	2307      	movs	r3, #7
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80034ee:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034f0:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80034f2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034f4:	f7fe f85c 	bl	80015b0 <HAL_RCC_OscConfig>
 80034f8:	4604      	mov	r4, r0
 80034fa:	b110      	cbz	r0, 8003502 <SystemClock_Config+0x7a>
  gLastError = error;
 80034fc:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <SystemClock_Config+0xa8>)
 80034fe:	801e      	strh	r6, [r3, #0]
 8003500:	e7fe      	b.n	8003500 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003502:	230f      	movs	r3, #15
 8003504:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003506:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800350c:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800350e:	4629      	mov	r1, r5
 8003510:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003512:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003514:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003516:	f7fe f9fb 	bl	8001910 <HAL_RCC_ClockConfig>
 800351a:	b110      	cbz	r0, 8003522 <SystemClock_Config+0x9a>
  gLastError = error;
 800351c:	4b04      	ldr	r3, [pc, #16]	; (8003530 <SystemClock_Config+0xa8>)
 800351e:	801c      	strh	r4, [r3, #0]
 8003520:	e7fe      	b.n	8003520 <SystemClock_Config+0x98>
}
 8003522:	b014      	add	sp, #80	; 0x50
 8003524:	bd70      	pop	{r4, r5, r6, pc}
 8003526:	bf00      	nop
 8003528:	40023800 	.word	0x40023800
 800352c:	40007000 	.word	0x40007000
 8003530:	2000432e 	.word	0x2000432e

08003534 <main>:
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 8003538:	f7fd fe24 	bl	8001184 <HAL_Init>
  SystemClock_Config();
 800353c:	f7ff ffa4 	bl	8003488 <SystemClock_Config>
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8003540:	2101      	movs	r1, #1
 8003542:	2000      	movs	r0, #0
 8003544:	f7fd fb5a 	bl	8000bfc <BSP_PB_Init>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0x0, 0x0);
 8003548:	2200      	movs	r2, #0
 800354a:	4611      	mov	r1, r2
 800354c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003550:	f7fd fe6a 	bl	8001228 <HAL_NVIC_SetPriority>
  BSP_MotorControl_SetNbDevices(BSP_MOTOR_CONTROL_BOARD_ID_L6206, 1);
 8003554:	2101      	movs	r1, #1
 8003556:	f641 003e 	movw	r0, #6206	; 0x183e
 800355a:	f7fd fdc1 	bl	80010e0 <BSP_MotorControl_SetNbDevices>
  BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_L6206, &initDeviceParameters);
 800355e:	496a      	ldr	r1, [pc, #424]	; (8003708 <main+0x1d4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003560:	4d6a      	ldr	r5, [pc, #424]	; (800370c <main+0x1d8>)
  BSP_MotorControl_Init(BSP_MOTOR_CONTROL_BOARD_ID_L6206, &initDeviceParameters);
 8003562:	f641 003e 	movw	r0, #6206	; 0x183e
 8003566:	f7fd fd43 	bl	8000ff0 <BSP_MotorControl_Init>
  BSP_MotorControl_SetDualFullBridgeConfig(PARALLELING_IN1A_IN2A__IN1B_IN2B__1_BIDIR_MOTOR);
 800356a:	2009      	movs	r0, #9
 800356c:	f7fd fd9c 	bl	80010a8 <BSP_MotorControl_SetDualFullBridgeConfig>
  BSP_MotorControl_AttachFlagInterrupt(MyFlagInterruptHandler);
 8003570:	4867      	ldr	r0, [pc, #412]	; (8003710 <main+0x1dc>)
 8003572:	f7fd fd31 	bl	8000fd8 <BSP_MotorControl_AttachFlagInterrupt>
  BSP_MotorControl_AttachErrorHandler(Error_Handler);
 8003576:	4867      	ldr	r0, [pc, #412]	; (8003714 <main+0x1e0>)
 8003578:	f7fd fd22 	bl	8000fc0 <BSP_MotorControl_AttachErrorHandler>
  BSP_MotorControl_SetBridgeInputPwmFreq(0,10000);
 800357c:	f242 7110 	movw	r1, #10000	; 0x2710
 8003580:	2000      	movs	r0, #0
 8003582:	f7fd fd9f 	bl	80010c4 <BSP_MotorControl_SetBridgeInputPwmFreq>
  BSP_MotorControl_SetBridgeInputPwmFreq(1,10000);
 8003586:	f242 7110 	movw	r1, #10000	; 0x2710
 800358a:	2001      	movs	r0, #1
 800358c:	f7fd fd9a 	bl	80010c4 <BSP_MotorControl_SetBridgeInputPwmFreq>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003590:	2214      	movs	r2, #20
 8003592:	2100      	movs	r1, #0
 8003594:	a807      	add	r0, sp, #28
 8003596:	f000 fb0b 	bl	8003bb0 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800359a:	2400      	movs	r4, #0
 800359c:	4b5e      	ldr	r3, [pc, #376]	; (8003718 <main+0x1e4>)
 800359e:	9403      	str	r4, [sp, #12]
 80035a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80035a2:	485e      	ldr	r0, [pc, #376]	; (800371c <main+0x1e8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035a4:	f042 0204 	orr.w	r2, r2, #4
 80035a8:	631a      	str	r2, [r3, #48]	; 0x30
 80035aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ac:	f002 0204 	and.w	r2, r2, #4
 80035b0:	9203      	str	r2, [sp, #12]
 80035b2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80035b4:	9404      	str	r4, [sp, #16]
 80035b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035bc:	631a      	str	r2, [r3, #48]	; 0x30
 80035be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035c0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80035c4:	9204      	str	r2, [sp, #16]
 80035c6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035c8:	9405      	str	r4, [sp, #20]
 80035ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035cc:	f042 0201 	orr.w	r2, r2, #1
 80035d0:	631a      	str	r2, [r3, #48]	; 0x30
 80035d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035d4:	f002 0201 	and.w	r2, r2, #1
 80035d8:	9205      	str	r2, [sp, #20]
 80035da:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035dc:	9406      	str	r4, [sp, #24]
 80035de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035e0:	f042 0202 	orr.w	r2, r2, #2
 80035e4:	631a      	str	r2, [r3, #48]	; 0x30
 80035e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e8:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80035ec:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ee:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80035f0:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f2:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80035f4:	f7fd ffca 	bl	800158c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80035f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035fc:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80035fe:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003600:	4b47      	ldr	r3, [pc, #284]	; (8003720 <main+0x1ec>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003602:	4848      	ldr	r0, [pc, #288]	; (8003724 <main+0x1f0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003604:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003606:	2602      	movs	r6, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003608:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800360a:	f7fd fe6d 	bl	80012e8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800360e:	a907      	add	r1, sp, #28
 8003610:	4844      	ldr	r0, [pc, #272]	; (8003724 <main+0x1f0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003612:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003614:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003616:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003618:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800361a:	f7fd fe65 	bl	80012e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800361e:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003620:	a907      	add	r1, sp, #28
 8003622:	483e      	ldr	r0, [pc, #248]	; (800371c <main+0x1e8>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003624:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003626:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003628:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800362a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800362c:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800362e:	f7fd fe5b 	bl	80012e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8003632:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003634:	a907      	add	r1, sp, #28
 8003636:	4839      	ldr	r0, [pc, #228]	; (800371c <main+0x1e8>)
  GPIO_InitStruct.Pin = LD2_Pin;
 8003638:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800363a:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003640:	f7fd fe52 	bl	80012e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003644:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003648:	a907      	add	r1, sp, #28
 800364a:	4834      	ldr	r0, [pc, #208]	; (800371c <main+0x1e8>)
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800364c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800364e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003650:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003652:	f7fd fe49 	bl	80012e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003656:	2330      	movs	r3, #48	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003658:	a907      	add	r1, sp, #28
 800365a:	4833      	ldr	r0, [pc, #204]	; (8003728 <main+0x1f4>)
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800365c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003660:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003662:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003664:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003666:	f7fd fe3f 	bl	80012e8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800366a:	4622      	mov	r2, r4
 800366c:	4621      	mov	r1, r4
 800366e:	2007      	movs	r0, #7
 8003670:	f7fd fdda 	bl	8001228 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003674:	2007      	movs	r0, #7
 8003676:	f7fd fe0b 	bl	8001290 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800367a:	4622      	mov	r2, r4
 800367c:	2105      	movs	r1, #5
 800367e:	2028      	movs	r0, #40	; 0x28
 8003680:	f7fd fdd2 	bl	8001228 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003684:	2028      	movs	r0, #40	; 0x28
 8003686:	f7fd fe03 	bl	8001290 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 800368a:	4828      	ldr	r0, [pc, #160]	; (800372c <main+0x1f8>)
  huart2.Init.BaudRate = 115200;
 800368c:	4a28      	ldr	r2, [pc, #160]	; (8003730 <main+0x1fc>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800368e:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8003690:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003694:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003698:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800369a:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800369c:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800369e:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036a0:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80036a2:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80036a4:	f7fe fe2c 	bl	8002300 <HAL_UART_Init>
 80036a8:	4605      	mov	r5, r0
 80036aa:	b110      	cbz	r0, 80036b2 <main+0x17e>
  gLastError = error;
 80036ac:	4b21      	ldr	r3, [pc, #132]	; (8003734 <main+0x200>)
 80036ae:	801c      	strh	r4, [r3, #0]
 80036b0:	e7fe      	b.n	80036b0 <main+0x17c>
  motorOn = 0;
 80036b2:	4b21      	ldr	r3, [pc, #132]	; (8003738 <main+0x204>)
  xTaskCreate(ledOnOff,
 80036b4:	4921      	ldr	r1, [pc, #132]	; (800373c <main+0x208>)
  motorOn = 0;
 80036b6:	8018      	strh	r0, [r3, #0]
  xTaskCreate(ledOnOff,
 80036b8:	2280      	movs	r2, #128	; 0x80
 80036ba:	4603      	mov	r3, r0
 80036bc:	9001      	str	r0, [sp, #4]
 80036be:	9600      	str	r6, [sp, #0]
 80036c0:	481f      	ldr	r0, [pc, #124]	; (8003740 <main+0x20c>)
 80036c2:	f7ff fc70 	bl	8002fa6 <xTaskCreate>
  xTaskCreate(motorOnOff,
 80036c6:	9600      	str	r6, [sp, #0]
 80036c8:	462b      	mov	r3, r5
 80036ca:	2280      	movs	r2, #128	; 0x80
 80036cc:	491d      	ldr	r1, [pc, #116]	; (8003744 <main+0x210>)
 80036ce:	9501      	str	r5, [sp, #4]
 80036d0:	481d      	ldr	r0, [pc, #116]	; (8003748 <main+0x214>)
 80036d2:	f7ff fc68 	bl	8002fa6 <xTaskCreate>
  xTaskCreate(rec_bytes,
 80036d6:	9600      	str	r6, [sp, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80036d8:	4e1c      	ldr	r6, [pc, #112]	; (800374c <main+0x218>)
  xTaskCreate(rec_bytes,
 80036da:	4918      	ldr	r1, [pc, #96]	; (800373c <main+0x208>)
 80036dc:	9501      	str	r5, [sp, #4]
 80036de:	462b      	mov	r3, r5
 80036e0:	2280      	movs	r2, #128	; 0x80
 80036e2:	481b      	ldr	r0, [pc, #108]	; (8003750 <main+0x21c>)
 80036e4:	f7ff fc5f 	bl	8002fa6 <xTaskCreate>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80036e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80036ea:	ac07      	add	r4, sp, #28
 80036ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036ee:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80036f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80036f6:	4629      	mov	r1, r5
 80036f8:	a807      	add	r0, sp, #28
 80036fa:	f7fe ffda 	bl	80026b2 <osThreadCreate>
 80036fe:	4b15      	ldr	r3, [pc, #84]	; (8003754 <main+0x220>)
 8003700:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8003702:	f7fe ffd1 	bl	80026a8 <osKernelStart>
 8003706:	e7fe      	b.n	8003706 <main+0x1d2>
 8003708:	20000170 	.word	0x20000170
 800370c:	10110000 	.word	0x10110000
 8003710:	08003465 	.word	0x08003465
 8003714:	08003365 	.word	0x08003365
 8003718:	40023800 	.word	0x40023800
 800371c:	40020000 	.word	0x40020000
 8003720:	10210000 	.word	0x10210000
 8003724:	40020800 	.word	0x40020800
 8003728:	40020400 	.word	0x40020400
 800372c:	20004474 	.word	0x20004474
 8003730:	40004400 	.word	0x40004400
 8003734:	2000432e 	.word	0x2000432e
 8003738:	20004330 	.word	0x20004330
 800373c:	08003d79 	.word	0x08003d79
 8003740:	08003371 	.word	0x08003371
 8003744:	08003d85 	.word	0x08003d85
 8003748:	080033a1 	.word	0x080033a1
 800374c:	08003d48 	.word	0x08003d48
 8003750:	080033f9 	.word	0x080033f9
 8003754:	20004470 	.word	0x20004470

08003758 <HAL_UART_RxCpltCallback>:
{
 8003758:	b510      	push	{r4, lr}
    HAL_UART_Transmit(&huart2, rx_buffer, sizeof(rx_buffer), 0xFFFF);
 800375a:	4c08      	ldr	r4, [pc, #32]	; (800377c <HAL_UART_RxCpltCallback+0x24>)
 800375c:	4908      	ldr	r1, [pc, #32]	; (8003780 <HAL_UART_RxCpltCallback+0x28>)
 800375e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003762:	2204      	movs	r2, #4
 8003764:	4620      	mov	r0, r4
 8003766:	f7fe fdf9 	bl	800235c <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 800376a:	4620      	mov	r0, r4
 800376c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003770:	2202      	movs	r2, #2
 8003772:	4904      	ldr	r1, [pc, #16]	; (8003784 <HAL_UART_RxCpltCallback+0x2c>)
}
 8003774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8003778:	f7fe bdf0 	b.w	800235c <HAL_UART_Transmit>
 800377c:	20004474 	.word	0x20004474
 8003780:	20004332 	.word	0x20004332
 8003784:	08003d76 	.word	0x08003d76

08003788 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM4) {
 8003788:	6802      	ldr	r2, [r0, #0]
 800378a:	4b03      	ldr	r3, [pc, #12]	; (8003798 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800378c:	429a      	cmp	r2, r3
 800378e:	d101      	bne.n	8003794 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003790:	f7fd bd12 	b.w	80011b8 <HAL_IncTick>
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40000800 	.word	0x40000800

0800379c <ButtonHandler>:
  * @brief  This function is executed when the Nucleo User button is pressed
  * @param  error number of the error
  * @retval None
  */
void ButtonHandler(void)
{
 800379c:	b508      	push	{r3, lr}
  gButtonPressed = TRUE;
 800379e:	4b08      	ldr	r3, [pc, #32]	; (80037c0 <ButtonHandler+0x24>)
 80037a0:	2201      	movs	r2, #1

  /* Let 300 ms before clearing the IT for key debouncing */
  HAL_Delay(300);
 80037a2:	f44f 7096 	mov.w	r0, #300	; 0x12c
  gButtonPressed = TRUE;
 80037a6:	701a      	strb	r2, [r3, #0]
  HAL_Delay(300);
 80037a8:	f7fd fd18 	bl	80011dc <HAL_Delay>
  __HAL_GPIO_EXTI_CLEAR_IT(KEY_BUTTON_PIN);
 80037ac:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <ButtonHandler+0x28>)
 80037ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037b2:	615a      	str	r2, [r3, #20]
  HAL_NVIC_ClearPendingIRQ(KEY_BUTTON_EXTI_IRQn);
 80037b4:	2028      	movs	r0, #40	; 0x28
}
 80037b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_ClearPendingIRQ(KEY_BUTTON_EXTI_IRQn);
 80037ba:	f7fd bd75 	b.w	80012a8 <HAL_NVIC_ClearPendingIRQ>
 80037be:	bf00      	nop
 80037c0:	2000432c 	.word	0x2000432c
 80037c4:	40013c00 	.word	0x40013c00

080037c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037c8:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ca:	4b0f      	ldr	r3, [pc, #60]	; (8003808 <HAL_MspInit+0x40>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	9200      	str	r2, [sp, #0]
 80037d0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80037d2:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80037d6:	6459      	str	r1, [r3, #68]	; 0x44
 80037d8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80037da:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80037de:	9100      	str	r1, [sp, #0]
 80037e0:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037e2:	9201      	str	r2, [sp, #4]
 80037e4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80037e6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80037ea:	6419      	str	r1, [r3, #64]	; 0x40
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f2:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80037f4:	210f      	movs	r1, #15
 80037f6:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 80037fa:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80037fc:	f7fd fd14 	bl	8001228 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003800:	b003      	add	sp, #12
 8003802:	f85d fb04 	ldr.w	pc, [sp], #4
 8003806:	bf00      	nop
 8003808:	40023800 	.word	0x40023800

0800380c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800380c:	b510      	push	{r4, lr}
 800380e:	4604      	mov	r4, r0
 8003810:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003812:	2214      	movs	r2, #20
 8003814:	2100      	movs	r1, #0
 8003816:	a803      	add	r0, sp, #12
 8003818:	f000 f9ca 	bl	8003bb0 <memset>
  if(huart->Instance==USART2)
 800381c:	6822      	ldr	r2, [r4, #0]
 800381e:	4b17      	ldr	r3, [pc, #92]	; (800387c <HAL_UART_MspInit+0x70>)
 8003820:	429a      	cmp	r2, r3
 8003822:	d128      	bne.n	8003876 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003824:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8003828:	2400      	movs	r4, #0
 800382a:	9401      	str	r4, [sp, #4]
 800382c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800382e:	4814      	ldr	r0, [pc, #80]	; (8003880 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003830:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003834:	641a      	str	r2, [r3, #64]	; 0x40
 8003836:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003838:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800383c:	9201      	str	r2, [sp, #4]
 800383e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003840:	9402      	str	r4, [sp, #8]
 8003842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003844:	f042 0201 	orr.w	r2, r2, #1
 8003848:	631a      	str	r2, [r3, #48]	; 0x30
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	9302      	str	r3, [sp, #8]
 8003852:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003854:	230c      	movs	r3, #12
 8003856:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003858:	2302      	movs	r3, #2
 800385a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800385c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800385e:	2307      	movs	r3, #7
 8003860:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003862:	f7fd fd41 	bl	80012e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003866:	2026      	movs	r0, #38	; 0x26
 8003868:	4622      	mov	r2, r4
 800386a:	2105      	movs	r1, #5
 800386c:	f7fd fcdc 	bl	8001228 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003870:	2026      	movs	r0, #38	; 0x26
 8003872:	f7fd fd0d 	bl	8001290 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003876:	b008      	add	sp, #32
 8003878:	bd10      	pop	{r4, pc}
 800387a:	bf00      	nop
 800387c:	40004400 	.word	0x40004400
 8003880:	40020000 	.word	0x40020000

08003884 <HAL_TIM_PWM_MspInit>:
  * @brief PWM MSP Initialization
  * @param[in] htim_pwm PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003884:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if ((htim_pwm->Instance == BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A)&&
 8003886:	6803      	ldr	r3, [r0, #0]
 8003888:	4a32      	ldr	r2, [pc, #200]	; (8003954 <HAL_TIM_PWM_MspInit+0xd0>)
 800388a:	4293      	cmp	r3, r2
{
 800388c:	b08b      	sub	sp, #44	; 0x2c
  if ((htim_pwm->Instance == BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A)&&
 800388e:	d132      	bne.n	80038f6 <HAL_TIM_PWM_MspInit+0x72>
      (htim_pwm->Channel == BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1A))
 8003890:	7f03      	ldrb	r3, [r0, #28]
  if ((htim_pwm->Instance == BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A)&&
 8003892:	2b01      	cmp	r3, #1
 8003894:	d11a      	bne.n	80038cc <HAL_TIM_PWM_MspInit+0x48>
  {
    /* Peripheral clock enable */
    __BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A_CLCK_ENABLE();
 8003896:	2300      	movs	r3, #0
 8003898:	f502 320d 	add.w	r2, r2, #144384	; 0x23400
 800389c:	9301      	str	r3, [sp, #4]
 800389e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80038a0:	f041 0102 	orr.w	r1, r1, #2
 80038a4:	6411      	str	r1, [r2, #64]	; 0x40
 80038a6:	6c12      	ldr	r2, [r2, #64]	; 0x40

    /* GPIO configuration */
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PWM_1A_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a8:	9307      	str	r3, [sp, #28]
    __BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A_CLCK_ENABLE();
 80038aa:	f002 0202 	and.w	r2, r2, #2
 80038ae:	9201      	str	r2, [sp, #4]
 80038b0:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80038b2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PWM_1A_PIN;
 80038b4:	2210      	movs	r2, #16
 80038b6:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b8:	2202      	movs	r2, #2
 80038ba:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = BSP_MOTOR_CONTROL_BOARD_AFx_TIMx_PWM1A;
 80038bc:	9209      	str	r2, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PWM_2A_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
    GPIO_InitStruct.Alternate = BSP_MOTOR_CONTROL_BOARD_AFx_TIMx_PWM2A;
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PWM_2A_PORT, &GPIO_InitStruct);
 80038be:	4826      	ldr	r0, [pc, #152]	; (8003958 <HAL_TIM_PWM_MspInit+0xd4>)
 80038c0:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PWM_2B_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
    GPIO_InitStruct.Alternate = BSP_MOTOR_CONTROL_BOARD_AFx_TIMx_PWM2B;
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PWM_2B_PORT, &GPIO_InitStruct);
 80038c2:	f7fd fd11 	bl	80012e8 <HAL_GPIO_Init>
   }
}
 80038c6:	b00b      	add	sp, #44	; 0x2c
 80038c8:	f85d fb04 	ldr.w	pc, [sp], #4
  else if ((htim_pwm->Instance == BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A)&&
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d1fa      	bne.n	80038c6 <HAL_TIM_PWM_MspInit+0x42>
    __BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A_CLCK_ENABLE();
 80038d0:	2200      	movs	r2, #0
 80038d2:	4922      	ldr	r1, [pc, #136]	; (800395c <HAL_TIM_PWM_MspInit+0xd8>)
 80038d4:	9202      	str	r2, [sp, #8]
 80038d6:	6c08      	ldr	r0, [r1, #64]	; 0x40
 80038d8:	f040 0002 	orr.w	r0, r0, #2
 80038dc:	6408      	str	r0, [r1, #64]	; 0x40
 80038de:	6c09      	ldr	r1, [r1, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e0:	9306      	str	r3, [sp, #24]
    __BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2A_CLCK_ENABLE();
 80038e2:	f001 0102 	and.w	r1, r1, #2
 80038e6:	9102      	str	r1, [sp, #8]
 80038e8:	9902      	ldr	r1, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ea:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PWM_2A_PIN;
 80038ec:	2120      	movs	r1, #32
 80038ee:	9105      	str	r1, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80038f0:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = BSP_MOTOR_CONTROL_BOARD_AFx_TIMx_PWM2A;
 80038f2:	9309      	str	r3, [sp, #36]	; 0x24
 80038f4:	e7e3      	b.n	80038be <HAL_TIM_PWM_MspInit+0x3a>
  else if ((htim_pwm->Instance == BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B)&&
 80038f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fa:	d1e4      	bne.n	80038c6 <HAL_TIM_PWM_MspInit+0x42>
           (htim_pwm->Channel == BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1B))
 80038fc:	7f03      	ldrb	r3, [r0, #28]
  else if ((htim_pwm->Instance == BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B)&&
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d114      	bne.n	800392c <HAL_TIM_PWM_MspInit+0xa8>
    __BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B_CLCK_ENABLE();
 8003902:	2200      	movs	r2, #0
 8003904:	4915      	ldr	r1, [pc, #84]	; (800395c <HAL_TIM_PWM_MspInit+0xd8>)
 8003906:	9203      	str	r2, [sp, #12]
 8003908:	6c08      	ldr	r0, [r1, #64]	; 0x40
 800390a:	f040 0001 	orr.w	r0, r0, #1
 800390e:	6408      	str	r0, [r1, #64]	; 0x40
 8003910:	6c09      	ldr	r1, [r1, #64]	; 0x40
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PWM_1B_PIN;
 8003912:	9305      	str	r3, [sp, #20]
    __BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B_CLCK_ENABLE();
 8003914:	f001 0101 	and.w	r1, r1, #1
 8003918:	9103      	str	r1, [sp, #12]
 800391a:	9903      	ldr	r1, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391c:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800391e:	2102      	movs	r1, #2
 8003920:	9106      	str	r1, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8003922:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = BSP_MOTOR_CONTROL_BOARD_AFx_TIMx_PWM2B;
 8003924:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(BSP_MOTOR_CONTROL_BOARD_PWM_2B_PORT, &GPIO_InitStruct);
 8003926:	a905      	add	r1, sp, #20
 8003928:	480d      	ldr	r0, [pc, #52]	; (8003960 <HAL_TIM_PWM_MspInit+0xdc>)
 800392a:	e7ca      	b.n	80038c2 <HAL_TIM_PWM_MspInit+0x3e>
  else if ((htim_pwm->Instance == BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B)&&
 800392c:	2b02      	cmp	r3, #2
 800392e:	d1ca      	bne.n	80038c6 <HAL_TIM_PWM_MspInit+0x42>
    __BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B_CLCK_ENABLE();
 8003930:	2200      	movs	r2, #0
 8003932:	490a      	ldr	r1, [pc, #40]	; (800395c <HAL_TIM_PWM_MspInit+0xd8>)
 8003934:	9204      	str	r2, [sp, #16]
 8003936:	6c08      	ldr	r0, [r1, #64]	; 0x40
 8003938:	f040 0001 	orr.w	r0, r0, #1
 800393c:	6408      	str	r0, [r1, #64]	; 0x40
 800393e:	6c09      	ldr	r1, [r1, #64]	; 0x40
    GPIO_InitStruct.Pin = BSP_MOTOR_CONTROL_BOARD_PWM_2B_PIN;
 8003940:	9305      	str	r3, [sp, #20]
    __BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B_CLCK_ENABLE();
 8003942:	f001 0101 	and.w	r1, r1, #1
 8003946:	9104      	str	r1, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003948:	9306      	str	r3, [sp, #24]
    __BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B_CLCK_ENABLE();
 800394a:	9904      	ldr	r1, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394c:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800394e:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = BSP_MOTOR_CONTROL_BOARD_AFx_TIMx_PWM2B;
 8003950:	2301      	movs	r3, #1
 8003952:	e7e7      	b.n	8003924 <HAL_TIM_PWM_MspInit+0xa0>
 8003954:	40000400 	.word	0x40000400
 8003958:	40020400 	.word	0x40020400
 800395c:	40023800 	.word	0x40023800
 8003960:	40020000 	.word	0x40020000

08003964 <HAL_TIM_PWM_MspDeInit>:
  * @param[in] htim_pwm PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef* htim_pwm)
{
  if ((htim_pwm->Instance == BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A)&&
 8003964:	6803      	ldr	r3, [r0, #0]
 8003966:	4a10      	ldr	r2, [pc, #64]	; (80039a8 <HAL_TIM_PWM_MspDeInit+0x44>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d10c      	bne.n	8003986 <HAL_TIM_PWM_MspDeInit+0x22>
 800396c:	7f03      	ldrb	r3, [r0, #28]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d118      	bne.n	80039a4 <HAL_TIM_PWM_MspDeInit+0x40>
       (htim_pwm->Channel == BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1A))
  {
    /* Peripheral clock disable */
    __BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A_CLCK_DISABLE();
 8003972:	f502 320d 	add.w	r2, r2, #144384	; 0x23400

    /* GPIO Deconfiguration */
    HAL_GPIO_DeInit(BSP_MOTOR_CONTROL_BOARD_PWM_1A_PORT, BSP_MOTOR_CONTROL_BOARD_PWM_1A_PIN);
 8003976:	480d      	ldr	r0, [pc, #52]	; (80039ac <HAL_TIM_PWM_MspDeInit+0x48>)
    __BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1A_CLCK_DISABLE();
 8003978:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800397a:	f023 0302 	bic.w	r3, r3, #2
 800397e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(BSP_MOTOR_CONTROL_BOARD_PWM_1A_PORT, BSP_MOTOR_CONTROL_BOARD_PWM_1A_PIN);
 8003980:	2110      	movs	r1, #16
  {
    /* Peripheral clock disable */
    __BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B_CLCK_DISABLE();

    /* GPIO Deconfiguration */
    HAL_GPIO_DeInit(BSP_MOTOR_CONTROL_BOARD_PWM_2B_PORT, BSP_MOTOR_CONTROL_BOARD_PWM_2B_PIN);
 8003982:	f7fd bd87 	b.w	8001494 <HAL_GPIO_DeInit>
  else if ((htim_pwm->Instance == BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B)&&
 8003986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800398a:	d10b      	bne.n	80039a4 <HAL_TIM_PWM_MspDeInit+0x40>
           (htim_pwm->Channel == BSP_MOTOR_CONTROL_BOARD_HAL_ACT_CHAN_TIMER_PWM1B))
 800398c:	7f01      	ldrb	r1, [r0, #28]
  else if ((htim_pwm->Instance == BSP_MOTOR_CONTROL_BOARD_TIMER_PWM1B)&&
 800398e:	2901      	cmp	r1, #1
 8003990:	d106      	bne.n	80039a0 <HAL_TIM_PWM_MspDeInit+0x3c>
    __BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B_CLCK_DISABLE();
 8003992:	4a07      	ldr	r2, [pc, #28]	; (80039b0 <HAL_TIM_PWM_MspDeInit+0x4c>)
    HAL_GPIO_DeInit(BSP_MOTOR_CONTROL_BOARD_PWM_2B_PORT, BSP_MOTOR_CONTROL_BOARD_PWM_2B_PIN);
 8003994:	4807      	ldr	r0, [pc, #28]	; (80039b4 <HAL_TIM_PWM_MspDeInit+0x50>)
    __BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B_CLCK_DISABLE();
 8003996:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003998:	f023 0301 	bic.w	r3, r3, #1
 800399c:	6413      	str	r3, [r2, #64]	; 0x40
 800399e:	e7f0      	b.n	8003982 <HAL_TIM_PWM_MspDeInit+0x1e>
  else   if ((htim_pwm->Instance == BSP_MOTOR_CONTROL_BOARD_TIMER_PWM2B)&&
 80039a0:	2902      	cmp	r1, #2
 80039a2:	d0f6      	beq.n	8003992 <HAL_TIM_PWM_MspDeInit+0x2e>
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40000400 	.word	0x40000400
 80039ac:	40020400 	.word	0x40020400
 80039b0:	40023800 	.word	0x40023800
 80039b4:	40020000 	.word	0x40020000

080039b8 <HAL_GPIO_EXTI_Callback>:
  * @param[in] GPIO_Pin pin number
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if ((GPIO_Pin == BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN)||
 80039b8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
{
 80039bc:	b510      	push	{r4, lr}
 80039be:	4604      	mov	r4, r0
  if ((GPIO_Pin == BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN)||
 80039c0:	d001      	beq.n	80039c6 <HAL_GPIO_EXTI_Callback+0xe>
 80039c2:	2802      	cmp	r0, #2
 80039c4:	d101      	bne.n	80039ca <HAL_GPIO_EXTI_Callback+0x12>
      (GPIO_Pin == BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN))
  {
    BSP_MotorControl_FlagInterruptHandler();
 80039c6:	f7fd fb21 	bl	800100c <BSP_MotorControl_FlagInterruptHandler>
  }

  if (GPIO_Pin == KEY_BUTTON_PIN)
 80039ca:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 80039ce:	d103      	bne.n	80039d8 <HAL_GPIO_EXTI_Callback+0x20>
  {
    ButtonHandler();
  }
}
 80039d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ButtonHandler();
 80039d4:	f7ff bee2 	b.w	800379c <ButtonHandler>
 80039d8:	bd10      	pop	{r4, pc}
	...

080039dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039dc:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 80039de:	4601      	mov	r1, r0
{
 80039e0:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 80039e2:	2200      	movs	r2, #0
 80039e4:	201e      	movs	r0, #30
 80039e6:	f7fd fc1f 	bl	8001228 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 80039ea:	201e      	movs	r0, #30
 80039ec:	f7fd fc50 	bl	8001290 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80039f0:	2500      	movs	r5, #0
 80039f2:	4b15      	ldr	r3, [pc, #84]	; (8003a48 <HAL_InitTick+0x6c>)
 80039f4:	9502      	str	r5, [sp, #8]
 80039f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80039f8:	4c14      	ldr	r4, [pc, #80]	; (8003a4c <HAL_InitTick+0x70>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 80039fa:	f042 0204 	orr.w	r2, r2, #4
 80039fe:	641a      	str	r2, [r3, #64]	; 0x40
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f003 0304 	and.w	r3, r3, #4
 8003a06:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a08:	a901      	add	r1, sp, #4
 8003a0a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003a0c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a0e:	f7fe f839 	bl	8001a84 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003a12:	f7fe f817 	bl	8001a44 <HAL_RCC_GetPCLK1Freq>
  htim4.Instance = TIM4;
 8003a16:	4b0e      	ldr	r3, [pc, #56]	; (8003a50 <HAL_InitTick+0x74>)
 8003a18:	6023      	str	r3, [r4, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8003a1a:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003a1e:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003a20:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003a22:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <HAL_InitTick+0x78>)
 8003a24:	fbb0 f0f3 	udiv	r0, r0, r3
 8003a28:	3801      	subs	r0, #1
  htim4.Init.Prescaler = uwPrescalerValue;
 8003a2a:	6060      	str	r0, [r4, #4]
  htim4.Init.ClockDivision = 0;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8003a2c:	4620      	mov	r0, r4
  htim4.Init.ClockDivision = 0;
 8003a2e:	6125      	str	r5, [r4, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a30:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8003a32:	f7fe f9db 	bl	8001dec <HAL_TIM_Base_Init>
 8003a36:	b920      	cbnz	r0, 8003a42 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8003a38:	4620      	mov	r0, r4
 8003a3a:	f7fe f8b6 	bl	8001baa <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8003a3e:	b009      	add	sp, #36	; 0x24
 8003a40:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8003a42:	2001      	movs	r0, #1
 8003a44:	e7fb      	b.n	8003a3e <HAL_InitTick+0x62>
 8003a46:	bf00      	nop
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	200044b4 	.word	0x200044b4
 8003a50:	40000800 	.word	0x40000800
 8003a54:	000f4240 	.word	0x000f4240

08003a58 <NMI_Handler>:
 8003a58:	4770      	bx	lr

08003a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a5a:	e7fe      	b.n	8003a5a <HardFault_Handler>

08003a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a5c:	e7fe      	b.n	8003a5c <MemManage_Handler>

08003a5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a5e:	e7fe      	b.n	8003a5e <BusFault_Handler>

08003a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a60:	e7fe      	b.n	8003a60 <UsageFault_Handler>

08003a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a62:	4770      	bx	lr

08003a64 <EXTI1_IRQHandler>:
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  //HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
  HAL_GPIO_EXTI_IRQHandler(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_B_PIN);
 8003a64:	2002      	movs	r0, #2
 8003a66:	f7fd bd97 	b.w	8001598 <HAL_GPIO_EXTI_IRQHandler>
	...

08003a6c <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a6c:	4801      	ldr	r0, [pc, #4]	; (8003a74 <TIM4_IRQHandler+0x8>)
 8003a6e:	f7fe b8cd 	b.w	8001c0c <HAL_TIM_IRQHandler>
 8003a72:	bf00      	nop
 8003a74:	200044b4 	.word	0x200044b4

08003a78 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a78:	4801      	ldr	r0, [pc, #4]	; (8003a80 <USART2_IRQHandler+0x8>)
 8003a7a:	f7fe bd6d 	b.w	8002558 <HAL_UART_IRQHandler>
 8003a7e:	bf00      	nop
 8003a80:	20004474 	.word	0x20004474

08003a84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003a84:	b508      	push	{r3, lr}
		// do nothing...
	}
	//
	// change state variable to toggle the motor on/off
	//
	if (motorOn) {
 8003a86:	4b0d      	ldr	r3, [pc, #52]	; (8003abc <EXTI15_10_IRQHandler+0x38>)
 8003a88:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003a8c:	b19a      	cbz	r2, 8003ab6 <EXTI15_10_IRQHandler+0x32>
		motorOn = 0;
 8003a8e:	2200      	movs	r2, #0
	else {
		motorOn = 1;
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003a90:	f44f 6080 	mov.w	r0, #1024	; 0x400
		motorOn = 1;
 8003a94:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003a96:	f7fd fd7f 	bl	8001598 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003a9a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003a9e:	f7fd fd7b 	bl	8001598 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  
  HAL_GPIO_EXTI_IRQHandler(BSP_MOTOR_CONTROL_BOARD_EN_AND_FLAG_A_PIN);
 8003aa2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003aa6:	f7fd fd77 	bl	8001598 <HAL_GPIO_EXTI_IRQHandler>

	HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8003aaa:	f44f 5000 	mov.w	r0, #8192	; 0x2000

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003aae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8003ab2:	f7fd bd71 	b.w	8001598 <HAL_GPIO_EXTI_IRQHandler>
		motorOn = 1;
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	e7ea      	b.n	8003a90 <EXTI15_10_IRQHandler+0xc>
 8003aba:	bf00      	nop
 8003abc:	20004330 	.word	0x20004330

08003ac0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ac0:	490f      	ldr	r1, [pc, #60]	; (8003b00 <SystemInit+0x40>)
 8003ac2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003ac6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003ace:	4b0d      	ldr	r3, [pc, #52]	; (8003b04 <SystemInit+0x44>)
 8003ad0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003ad2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003ad4:	f042 0201 	orr.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003ada:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003ae2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ae6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003ae8:	4a07      	ldr	r2, [pc, #28]	; (8003b08 <SystemInit+0x48>)
 8003aea:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003af2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003af4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003af6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003afa:	608b      	str	r3, [r1, #8]
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	e000ed00 	.word	0xe000ed00
 8003b04:	40023800 	.word	0x40023800
 8003b08:	24003010 	.word	0x24003010

08003b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003b10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003b12:	e003      	b.n	8003b1c <LoopCopyDataInit>

08003b14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003b14:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003b16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003b18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003b1a:	3104      	adds	r1, #4

08003b1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003b1c:	480b      	ldr	r0, [pc, #44]	; (8003b4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003b1e:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003b20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003b22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003b24:	d3f6      	bcc.n	8003b14 <CopyDataInit>
  ldr  r2, =_sbss
 8003b26:	4a0b      	ldr	r2, [pc, #44]	; (8003b54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003b28:	e002      	b.n	8003b30 <LoopFillZerobss>

08003b2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003b2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003b2c:	f842 3b04 	str.w	r3, [r2], #4

08003b30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003b30:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003b32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003b34:	d3f9      	bcc.n	8003b2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003b36:	f7ff ffc3 	bl	8003ac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b3a:	f000 f815 	bl	8003b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b3e:	f7ff fcf9 	bl	8003534 <main>
  bx  lr    
 8003b42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b44:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8003b48:	08003ed8 	.word	0x08003ed8
  ldr  r0, =_sdata
 8003b4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b50:	2000036c 	.word	0x2000036c
  ldr  r2, =_sbss
 8003b54:	2000036c 	.word	0x2000036c
  ldr  r3, = _ebss
 8003b58:	200044f4 	.word	0x200044f4

08003b5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b5c:	e7fe      	b.n	8003b5c <ADC_IRQHandler>

08003b5e <atoi>:
 8003b5e:	220a      	movs	r2, #10
 8003b60:	2100      	movs	r1, #0
 8003b62:	f000 b8ad 	b.w	8003cc0 <strtol>
	...

08003b68 <__libc_init_array>:
 8003b68:	b570      	push	{r4, r5, r6, lr}
 8003b6a:	4e0d      	ldr	r6, [pc, #52]	; (8003ba0 <__libc_init_array+0x38>)
 8003b6c:	4c0d      	ldr	r4, [pc, #52]	; (8003ba4 <__libc_init_array+0x3c>)
 8003b6e:	1ba4      	subs	r4, r4, r6
 8003b70:	10a4      	asrs	r4, r4, #2
 8003b72:	2500      	movs	r5, #0
 8003b74:	42a5      	cmp	r5, r4
 8003b76:	d109      	bne.n	8003b8c <__libc_init_array+0x24>
 8003b78:	4e0b      	ldr	r6, [pc, #44]	; (8003ba8 <__libc_init_array+0x40>)
 8003b7a:	4c0c      	ldr	r4, [pc, #48]	; (8003bac <__libc_init_array+0x44>)
 8003b7c:	f000 f8d8 	bl	8003d30 <_init>
 8003b80:	1ba4      	subs	r4, r4, r6
 8003b82:	10a4      	asrs	r4, r4, #2
 8003b84:	2500      	movs	r5, #0
 8003b86:	42a5      	cmp	r5, r4
 8003b88:	d105      	bne.n	8003b96 <__libc_init_array+0x2e>
 8003b8a:	bd70      	pop	{r4, r5, r6, pc}
 8003b8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b90:	4798      	blx	r3
 8003b92:	3501      	adds	r5, #1
 8003b94:	e7ee      	b.n	8003b74 <__libc_init_array+0xc>
 8003b96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b9a:	4798      	blx	r3
 8003b9c:	3501      	adds	r5, #1
 8003b9e:	e7f2      	b.n	8003b86 <__libc_init_array+0x1e>
 8003ba0:	08003ed0 	.word	0x08003ed0
 8003ba4:	08003ed0 	.word	0x08003ed0
 8003ba8:	08003ed0 	.word	0x08003ed0
 8003bac:	08003ed4 	.word	0x08003ed4

08003bb0 <memset>:
 8003bb0:	4402      	add	r2, r0
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d100      	bne.n	8003bba <memset+0xa>
 8003bb8:	4770      	bx	lr
 8003bba:	f803 1b01 	strb.w	r1, [r3], #1
 8003bbe:	e7f9      	b.n	8003bb4 <memset+0x4>

08003bc0 <_strtol_l.isra.0>:
 8003bc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bc4:	4680      	mov	r8, r0
 8003bc6:	4689      	mov	r9, r1
 8003bc8:	4692      	mov	sl, r2
 8003bca:	461f      	mov	r7, r3
 8003bcc:	468b      	mov	fp, r1
 8003bce:	465d      	mov	r5, fp
 8003bd0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003bd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003bd6:	f000 f889 	bl	8003cec <__locale_ctype_ptr_l>
 8003bda:	4420      	add	r0, r4
 8003bdc:	7846      	ldrb	r6, [r0, #1]
 8003bde:	f016 0608 	ands.w	r6, r6, #8
 8003be2:	d10b      	bne.n	8003bfc <_strtol_l.isra.0+0x3c>
 8003be4:	2c2d      	cmp	r4, #45	; 0x2d
 8003be6:	d10b      	bne.n	8003c00 <_strtol_l.isra.0+0x40>
 8003be8:	782c      	ldrb	r4, [r5, #0]
 8003bea:	2601      	movs	r6, #1
 8003bec:	f10b 0502 	add.w	r5, fp, #2
 8003bf0:	b167      	cbz	r7, 8003c0c <_strtol_l.isra.0+0x4c>
 8003bf2:	2f10      	cmp	r7, #16
 8003bf4:	d114      	bne.n	8003c20 <_strtol_l.isra.0+0x60>
 8003bf6:	2c30      	cmp	r4, #48	; 0x30
 8003bf8:	d00a      	beq.n	8003c10 <_strtol_l.isra.0+0x50>
 8003bfa:	e011      	b.n	8003c20 <_strtol_l.isra.0+0x60>
 8003bfc:	46ab      	mov	fp, r5
 8003bfe:	e7e6      	b.n	8003bce <_strtol_l.isra.0+0xe>
 8003c00:	2c2b      	cmp	r4, #43	; 0x2b
 8003c02:	bf04      	itt	eq
 8003c04:	782c      	ldrbeq	r4, [r5, #0]
 8003c06:	f10b 0502 	addeq.w	r5, fp, #2
 8003c0a:	e7f1      	b.n	8003bf0 <_strtol_l.isra.0+0x30>
 8003c0c:	2c30      	cmp	r4, #48	; 0x30
 8003c0e:	d127      	bne.n	8003c60 <_strtol_l.isra.0+0xa0>
 8003c10:	782b      	ldrb	r3, [r5, #0]
 8003c12:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003c16:	2b58      	cmp	r3, #88	; 0x58
 8003c18:	d14b      	bne.n	8003cb2 <_strtol_l.isra.0+0xf2>
 8003c1a:	786c      	ldrb	r4, [r5, #1]
 8003c1c:	2710      	movs	r7, #16
 8003c1e:	3502      	adds	r5, #2
 8003c20:	2e00      	cmp	r6, #0
 8003c22:	bf0c      	ite	eq
 8003c24:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003c28:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	fbb1 fef7 	udiv	lr, r1, r7
 8003c32:	4610      	mov	r0, r2
 8003c34:	fb07 1c1e 	mls	ip, r7, lr, r1
 8003c38:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003c3c:	2b09      	cmp	r3, #9
 8003c3e:	d811      	bhi.n	8003c64 <_strtol_l.isra.0+0xa4>
 8003c40:	461c      	mov	r4, r3
 8003c42:	42a7      	cmp	r7, r4
 8003c44:	dd1d      	ble.n	8003c82 <_strtol_l.isra.0+0xc2>
 8003c46:	1c53      	adds	r3, r2, #1
 8003c48:	d007      	beq.n	8003c5a <_strtol_l.isra.0+0x9a>
 8003c4a:	4586      	cmp	lr, r0
 8003c4c:	d316      	bcc.n	8003c7c <_strtol_l.isra.0+0xbc>
 8003c4e:	d101      	bne.n	8003c54 <_strtol_l.isra.0+0x94>
 8003c50:	45a4      	cmp	ip, r4
 8003c52:	db13      	blt.n	8003c7c <_strtol_l.isra.0+0xbc>
 8003c54:	fb00 4007 	mla	r0, r0, r7, r4
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003c5e:	e7eb      	b.n	8003c38 <_strtol_l.isra.0+0x78>
 8003c60:	270a      	movs	r7, #10
 8003c62:	e7dd      	b.n	8003c20 <_strtol_l.isra.0+0x60>
 8003c64:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003c68:	2b19      	cmp	r3, #25
 8003c6a:	d801      	bhi.n	8003c70 <_strtol_l.isra.0+0xb0>
 8003c6c:	3c37      	subs	r4, #55	; 0x37
 8003c6e:	e7e8      	b.n	8003c42 <_strtol_l.isra.0+0x82>
 8003c70:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003c74:	2b19      	cmp	r3, #25
 8003c76:	d804      	bhi.n	8003c82 <_strtol_l.isra.0+0xc2>
 8003c78:	3c57      	subs	r4, #87	; 0x57
 8003c7a:	e7e2      	b.n	8003c42 <_strtol_l.isra.0+0x82>
 8003c7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c80:	e7eb      	b.n	8003c5a <_strtol_l.isra.0+0x9a>
 8003c82:	1c53      	adds	r3, r2, #1
 8003c84:	d108      	bne.n	8003c98 <_strtol_l.isra.0+0xd8>
 8003c86:	2322      	movs	r3, #34	; 0x22
 8003c88:	f8c8 3000 	str.w	r3, [r8]
 8003c8c:	4608      	mov	r0, r1
 8003c8e:	f1ba 0f00 	cmp.w	sl, #0
 8003c92:	d107      	bne.n	8003ca4 <_strtol_l.isra.0+0xe4>
 8003c94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c98:	b106      	cbz	r6, 8003c9c <_strtol_l.isra.0+0xdc>
 8003c9a:	4240      	negs	r0, r0
 8003c9c:	f1ba 0f00 	cmp.w	sl, #0
 8003ca0:	d00c      	beq.n	8003cbc <_strtol_l.isra.0+0xfc>
 8003ca2:	b122      	cbz	r2, 8003cae <_strtol_l.isra.0+0xee>
 8003ca4:	3d01      	subs	r5, #1
 8003ca6:	f8ca 5000 	str.w	r5, [sl]
 8003caa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cae:	464d      	mov	r5, r9
 8003cb0:	e7f9      	b.n	8003ca6 <_strtol_l.isra.0+0xe6>
 8003cb2:	2430      	movs	r4, #48	; 0x30
 8003cb4:	2f00      	cmp	r7, #0
 8003cb6:	d1b3      	bne.n	8003c20 <_strtol_l.isra.0+0x60>
 8003cb8:	2708      	movs	r7, #8
 8003cba:	e7b1      	b.n	8003c20 <_strtol_l.isra.0+0x60>
 8003cbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003cc0 <strtol>:
 8003cc0:	4b08      	ldr	r3, [pc, #32]	; (8003ce4 <strtol+0x24>)
 8003cc2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cc4:	681c      	ldr	r4, [r3, #0]
 8003cc6:	4d08      	ldr	r5, [pc, #32]	; (8003ce8 <strtol+0x28>)
 8003cc8:	6a23      	ldr	r3, [r4, #32]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	bf08      	it	eq
 8003cce:	462b      	moveq	r3, r5
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	460a      	mov	r2, r1
 8003cd6:	4601      	mov	r1, r0
 8003cd8:	4620      	mov	r0, r4
 8003cda:	f7ff ff71 	bl	8003bc0 <_strtol_l.isra.0>
 8003cde:	b003      	add	sp, #12
 8003ce0:	bd30      	pop	{r4, r5, pc}
 8003ce2:	bf00      	nop
 8003ce4:	2000019c 	.word	0x2000019c
 8003ce8:	20000200 	.word	0x20000200

08003cec <__locale_ctype_ptr_l>:
 8003cec:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003cf0:	4770      	bx	lr

08003cf2 <__ascii_mbtowc>:
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	b901      	cbnz	r1, 8003cf8 <__ascii_mbtowc+0x6>
 8003cf6:	a901      	add	r1, sp, #4
 8003cf8:	b142      	cbz	r2, 8003d0c <__ascii_mbtowc+0x1a>
 8003cfa:	b14b      	cbz	r3, 8003d10 <__ascii_mbtowc+0x1e>
 8003cfc:	7813      	ldrb	r3, [r2, #0]
 8003cfe:	600b      	str	r3, [r1, #0]
 8003d00:	7812      	ldrb	r2, [r2, #0]
 8003d02:	1c10      	adds	r0, r2, #0
 8003d04:	bf18      	it	ne
 8003d06:	2001      	movne	r0, #1
 8003d08:	b002      	add	sp, #8
 8003d0a:	4770      	bx	lr
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	e7fb      	b.n	8003d08 <__ascii_mbtowc+0x16>
 8003d10:	f06f 0001 	mvn.w	r0, #1
 8003d14:	e7f8      	b.n	8003d08 <__ascii_mbtowc+0x16>

08003d16 <__ascii_wctomb>:
 8003d16:	b149      	cbz	r1, 8003d2c <__ascii_wctomb+0x16>
 8003d18:	2aff      	cmp	r2, #255	; 0xff
 8003d1a:	bf85      	ittet	hi
 8003d1c:	238a      	movhi	r3, #138	; 0x8a
 8003d1e:	6003      	strhi	r3, [r0, #0]
 8003d20:	700a      	strbls	r2, [r1, #0]
 8003d22:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8003d26:	bf98      	it	ls
 8003d28:	2001      	movls	r0, #1
 8003d2a:	4770      	bx	lr
 8003d2c:	4608      	mov	r0, r1
 8003d2e:	4770      	bx	lr

08003d30 <_init>:
 8003d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d32:	bf00      	nop
 8003d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d36:	bc08      	pop	{r3}
 8003d38:	469e      	mov	lr, r3
 8003d3a:	4770      	bx	lr

08003d3c <_fini>:
 8003d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3e:	bf00      	nop
 8003d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d42:	bc08      	pop	{r3}
 8003d44:	469e      	mov	lr, r3
 8003d46:	4770      	bx	lr
